Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]
Example 2:


Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]
 

Constraints:

The number of nodes in the list is n.
1 <= k <= n <= 5000
0 <= Node.val <= 1000
 

Follow-up: Can you solve the problem in O(1) extra memory space?


MY_SOLUTION

// BRUTE FORCE
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        
        List<Integer> ls = new ArrayList<>();
        while(head != null) {
            ls.add(head.val);
            head = head.next;
        }
        
        List<Integer> reversed = new ArrayList<>();
        List<Integer> inner = new ArrayList<>();
        
        for(int i = 0; i < ls.size(); i++) {
            
            if((i + 1) % k == 0) {
                inner.add(ls.get(i));
                Collections.reverse(inner);
                            
                for(int j = 0; j < inner.size(); j++) reversed.add(inner.get(j));
                
                inner.clear();
            } else inner.add(ls.get(i));
        }
        
        for(int j = 0; j < inner.size(); j++) reversed.add(inner.get(j));
        
        ListNode newHead = new ListNode(reversed.get(0));
        ListNode temp = newHead;
        for(int i = 1; i < reversed.size(); i++) {
            
            ListNode node = new ListNode(reversed.get(i));
            temp.next = node;
            temp = node;
           
        }
        
        return newHead;
    }
}


==================================================================================================================================================

OPTIMISED METHOD -> STRIVER
Approach:

The following steps are needed to arrive at the desired output. 

Create a dummy node. Point next to this node to head of the linked list provided.
Iterate through the given linked list to get the length of the list.
Create three pointer pre,cur and nex to reverse each group. Why? If we observe output, we can see that we have to reverse each
group, apart from modifying links of group.
Iterate through the linked list until the length of list to be processed is greater than and equal to given k.
For each iteration, point cur to pre->next and nex to nex->next.
Start nested iteration for length of k.
For each iteration, modify links as following steps:-
cur->next = nex->next
nex->next = pre->next
pre->next = nex
nex = cur->next
Move pre to cur and reduce length by k.


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
       // METHOD - 1
        if(head == null || k ==1 ) return head;
        
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        
        ListNode cur = dummy, nex = dummy, pre = dummy;
        
        // FINDING LENGTH
        int count = 0;
        while(cur.next != null){
            cur = cur.next;
            count++;
        }
        
        //REVERSING over all list
        
        while(count >= k){
            cur = pre.next;
            nex = cur.next;
            
            // REVERSING INNER K LIST
            for(int i = 1; i < k; i++){
                cur.next = nex.next;
                nex.next = pre.next;
                pre.next = nex;
                nex = cur.next;
            }
            
            pre = cur;
            count -= k;
        }
        return dummy.next;
        
        
            
        
    }
}

Time Complexity: O(N)

Reason: Nested iteration with O((N/k)*k) which makes it equal to O(N).

Space Complexity: O(1)

Reason: No extra data structures are used for computation.

================================================================================================================================

OPTIMISED METHOD - 2 -> PEPCODING
// https://www.youtube.com/watch?v=EKgNMFCShO8&ab_channel=Pepcoding

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    // T.C -> O(N), S.C -> O(1)
    
    // FINDING THE LENGHTH OF LINKED LIST
    public static int length(ListNode node){
        int len = 0;
        ListNode temp = node;
        while(temp != null){
            temp = temp.next;
            len++;
        }
        return len;
    }
    
    
    // ADD_FIRST_NODE FUNCTION
    static ListNode tempHead = null;
    static ListNode tempTail = null;
    
    public static void addFirstNode(ListNode node){
        if(tempHead == null){
            tempHead = node;
            tempTail = node;
        }
        else{
            node.next = tempHead;
            tempHead = node;
        }  
    }
    
    // REVERSING K GROUP ELEMENTS
    public ListNode reverseKGroup(ListNode head, int k) {
        if(head == null || head.next == null || k == 0) return head;
        
        ListNode orgHead = null, orgTail = null;
        int len = length(head);
        
        ListNode curr = head;
        while(len >= k){
            int tempK = k;
            while(tempK-- > 0){
                ListNode forw =curr.next;
                // Breaking the Link
                curr.next = null;
                addFirstNode(curr);
                curr = forw;
            }
            
            if(orgHead == null){
                orgHead = tempHead;
                orgTail = tempTail;
            }
            else
            {
                orgTail.next = tempHead;
                orgTail = tempTail;
            }
            
            tempHead = null;
            tempTail = null;
            len -= k; 
        }
        // ATTACHING THE REMAINING PART OF THE LIST
        orgTail.next = curr;
        return orgHead;
        
    }
   
    
    
}

Time Complexity: O(N)

Reason: Nested iteration with O((N/k)*k) which makes it equal to O(N).

Space Complexity: O(1)

Reason: No extra data structures are used for computation.


===============================================================================================================================================

ANOTHER_SOLUTION
public ListNode reverseKGroup(ListNode head, int k) {
    ListNode cur = head, tmp = head, prev = null;
    for(int i = 0 ; i < k; i++, tmp = tmp.next) if(tmp == null) return head;  // check if there is enough k elements for reverse in current group
    for(int i = 0; i < k; i++){ // reverse k elements in current group
        tmp = cur.next;
        cur.next = prev;
        prev = cur;
        cur = tmp;
    }
    head.next = reverseKGroup(cur, k); // connect the real tail of current reversed group with the real head of remaining reversed group
    return prev; // return the real tail of current reversed group
}
