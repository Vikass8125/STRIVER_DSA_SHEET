The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.

You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.

For each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. 
If there is no next greater element, then the answer for this query is -1.

Return an array ans of length nums1.length such that ans[i] is the next greater element as described above.

 

Example 1:

Input: nums1 = [4,1,2], nums2 = [1,3,4,2]
Output: [-1,3,-1]
Explanation: The next greater element for each value of nums1 is as follows:
- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.
- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.
- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.
Example 2:

Input: nums1 = [2,4], nums2 = [1,2,3,4]
Output: [3,-1]
Explanation: The next greater element for each value of nums1 is as follows:
- 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.
- 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1.
 

Constraints:

1 <= nums1.length <= nums2.length <= 1000
0 <= nums1[i], nums2[i] <= 104
All integers in nums1 and nums2 are unique.
All the integers of nums1 also appear in nums2.
 

Follow up: Could you find an O(nums1.length + nums2.length) solution?


MY_SOLUTION

class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int[] ans = new int[nums1.length];
        for(int i = 0; i < nums1.length; i++){
            boolean found = false;
            int foundVal = -1;
            for(int j = 0; j < nums2.length; j++){
                if(nums2[j] == nums1[i]){
                    found = true;
                    continue;
                }
                if(found && nums2[j] > nums1[i]){
                    foundVal = nums2[j];
                    break;
                }
            }
            ans[i] = foundVal;
        }
        return ans;
    }
}

===========================================
Approach:
The idea here is to create a map which will have the mapping of each element from the bigger array (nums2[]) and its corresponding greater element. 
In order to do that we are using a monotone stack in increasing order (top element is smaller than the element below in the stack).

Algorithm:
We iterate through nums2[] and push each element into a stack.
If the current element in the iteration is greater than the top most element in the stack, then we pop it out and add the popped out element as key
and the current element as the value (next greater number).
We repeat this process as long as the current element is greater than the top most element in the stack or the stack is empty.
The current element is also added to the stack.
The last element in the nums2[] will not have a next element. Hence we are not adding that to the map.
Similarly if there are elements in the stack which does not have a next greater element, remains in the stack and is not moved to the map as the 
requirement for these elements is to default it to -1, which is being taken care while fetching values from the map.
Code:
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int[] result = new int[nums1.length];
        Stack<Integer> stack=new Stack<>();
        Map<Integer, Integer> map = new HashMap<>();

        for(int num: nums2){            
            while(!stack.isEmpty() && num > stack.peek())
                map.put(stack.pop(), num);
            stack.push(num);            
        }
        
        int i=0;        
        for(int num : nums1)
            result[i++] = map.getOrDefault(num, -1);
        return result;
    }
}

==============================================
Brute
Time - O(n^2)

Code

public int[] nextGreaterElementBrute(int[] nums1, int[] nums2) {
	int[] ans = new int[nums1.length];

	for(int i = 0; i < nums1.length; i++) {
		int greaterIdx = -1, j = nums2.length - 1;
		while(j >= 0 && nums2[j] != nums1[i]) {
			if(nums2[j] > nums1[i]){
				greaterIdx = nums2[j];
			}
			j--;
		}
		ans[i] = greaterIdx;
	}

	return ans;
}
Explanation
This is actually a bit modified brute force, in this the logic is to start searching backwards until nums2[j] != nums1[i] check fails, and 
update greaterIdx to nums2[j] if nums2[j] > nums1[i].
Then update ans[i] to greaterIdx, it will be -1 in case no greater element and value if exists.
Then return ans

Optimal
Time - O(n) where n is length of nums2 as it is equal to or greater than nums1,

Code

public int[] nextGreaterElement(int[] nums1, int[] nums2) {
	int[] ans = new int[nums1.length];

	Stack<Integer> stack = new Stack<>();
	HashMap<Integer, Integer> map = new HashMap<>();

	// find out all the next greater elements in nums2 array
	for(int num: nums2) {
		// if num is greater than top elements in stack then it is the next greater element in nums2
		while(!stack.isEmpty() && num > stack.peek()) {
			map.put(stack.pop(), num);
		}
		// then add num to stack
		stack.add(num);
	}

	int i = 0;
	for(int num : nums1) {
		ans[i++] = map.getOrDefault(num, -1);
	}

	return ans;
}
Explanation
This approach uses stack, the main point is to store next greater element for all the elements in nums2 array. It does that by following steps:-

In this we traverse nums2 array and add the element to stack if either stack is empty or the element is smaller than the top element.
If case occurs when the element is greater then top in the stack then that means current element is the next greater element for that top element in stack,
remove that and add it's entry in map.
Repeat this until either stack becomes empty or that element is no longer larger than top in stack.
Now iterate through nums1 and put entries in ans array by fetching it from map.
return ans

==========================================================
// Time Complexity: O(N)
// Space Complexity: 10001 is the max size

class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        Stack<Integer> stack = new Stack<>();
        int M = nums1.length, N = nums2.length;
        
        int[] greater = new int[10001];
        for(int i = N - 1; i >= 0; i--) {
            while(stack.size() > 0 && stack.peek() < nums2[i])
                stack.pop();
            greater[nums2[i]] = stack.size() == 0 ? -1 : stack.peek();
            stack.push(nums2[i]);
        }
        
        int[] result = new int[M];
        for(int i = 0; i < M; i++)
            result[i] = greater[nums1[i]];
        
        return result;
    }
}
Using Map

// Space Complexity: O(N)
// Time Complexity: O(N)

class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        Stack<Integer> stack = new Stack<>();
        int M = nums1.length, N = nums2.length;
        
        Map<Integer, Integer> map = new HashMap<>();
        for(int i = N - 1; i >= 0; i--) {
            while(stack.size() > 0 && stack.peek() < nums2[i])
                stack.pop();
            map.put(nums2[i], stack.size() == 0 ? -1 : stack.peek());
            stack.push(nums2[i]);
        }
        
        int[] result = new int[M];
        for(int i = 0; i < M; i++)
            result[i] = map.get(nums1[i]);
        
        return result;
    }
}
=============================================================================


