Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]
 

Constraints:

n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.
 

Follow up: Could you come up with a one-pass algorithm using only constant extra space?


MY_SOLUTIONS
Solution 2: Keeping count of values

Intuition: Since in this case there are only 3 distinct values in the array so it’s easy to maintain the count of all, Like the count of 0, 1, and 2. This can be followed by overwriting the array based on the frequency(count) of the values.

Approach: 

Take 3 variables to maintain the count of 0, 1 and 2.
Travel the array once and increment the corresponding counting variables
( let’s consider count_0 = a, count_1 = b, count_2 = c )

In 2nd traversal of array, we will now over write the first ‘a’ indices / positions in array with ’0’, the next ‘b’ with ‘1’ and the remaining ‘c’ with ‘2’.
Time Complexity: O(N) + O(N)

Space Complexity: O(1)

Solution 3: 3-Pointer approach

This problem is a variation of the popular Dutch National flag algorithm 

Intuition: In this approach, we will be using 3 pointers named low, mid, and high. We will be using these 3 pointers to move around the values. The primary goal here is to move 0s to the left and 2s to the right of the array and at the same time all the 1s shall be in the middle region of the array and hence the array will be sorted. 

Approach: 

Initialize the 3 pointers such that low and mid will point to 0th index and high pointer will point to last index
int low = arr[0]

int mid = arr[0]

int high = arr[n – 1]

Now there will 3 different operations / steps based on the value of arr[mid] and will be repeated until mid <= high.

arr[mid] == 0:
swap(arr[low], arr[mid])
low++, mid++

arr[mid] == 1:
mid++

arr[mid] == 2:
swap(arr[mid], arr[high])
high–;
The array formed after these steps will be a sorted array.

CODE:
=========================================================================================================================================================
class Solution {
    public void sortColors(int[] nums) {
        /*
        int index = 0;
        int count_0 = 0;
        int count_1 = 0;
        int count_2 = 0;
        
        for(int i = 0; i < nums.length; i++){
            if(nums[i] == 0) count_0++;
            if(nums[i] == 1) count_1++;
            if(nums[i] == 2) count_2++;
        }
        
        while(count_0 > 0 && index < nums.length){
            nums[index] = 0;
            index++;
            count_0--;
        }
        
        while(count_1 > 0 && index < nums.length){
            nums[index] = 1;
            index++;
            count_1--;
        }
        
        while(count_2 > 0 && index < nums.length){
            nums[index] = 2;
            index++;
            count_2--;
        }
        */
        
        // OPTIMISED
        
        int index = 0;
        int low = 0;
        int high = nums.length-1;
        
        while(index <= high){
            if(nums[index] == 2){
                swap(nums, high,index);
                high--;
               
            }
            else if(nums[index] == 0){
                swap(nums,low,index);
                low++;
                index++;
                
            }
            else{
                index++;
            }
        }
              
    }
    
    static void swap(int[] nums, int first,int second){
        int temp = nums[first];
        nums[first] = nums[second];
        nums[second] = temp;
    }
}


CODE:
=========================================================================================================================================================
    public void sortColors(int[] nums) {
        int lo = 0; 
        int hi = nums.length - 1; 
        int mid = 0; 
        int temp; 
        while (mid <= hi) { 
            switch (nums[mid]) { 
                case 0: { 
                    temp = nums[lo]; 
                    nums[lo] = nums[mid]; 
                    nums[mid] = temp; 
                    lo++; 
                    mid++; 
                    break; 
                } 
                case 1: 
                    mid++; 
                    break; 
                case 2: { 
                    temp = nums[mid]; 
                    nums[mid] = nums[hi]; 
                    nums[hi] = temp; 
                    hi--; 
                    break; 
                } 
            } 
        }
    }
}
