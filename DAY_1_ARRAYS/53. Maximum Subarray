Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Example 2:

Input: nums = [1]
Output: 1
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
 

Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.


MY_SOLUTION

BRUTE FORCE

class Solution {
    public int maxSubArray(int[] nums) {
        // BRUTU FORCE

        int maxSum = Integer.MIN_VALUE;
        
        for(int i = 0; i < nums.length; i++){
            int curSum = 0;
            for(int j = i; j < nums.length; j++){
                curSum += nums[j];
                if(curSum > maxSum){
                    maxSum = curSum;
                }
            }
        }
        
        return maxSum;
        
        }
  }
  
  
  OPTIMISED
  
 Intution: Start traversing your array keep each element in the sum and every time keep the max of currSum and prevSum.
But the catch here is that if at any point sum becomes negative then no point keeping it because 0 is obviously greater than negative, 
so just make your sum 0.

Now here in this question you can see that you can also be asked some more things like :

Length of the max subarray
Elements of the max subarray
Start and End index of max subarray
This is very important concept from interview point so try to get the ans of above mentioned point and have confidence on this algorithm.
  
  class Solution {
    public int maxSubArray(int[] nums) {
    
        // OPTIMISED -> KADANE'S ALGORITHM
        int maxSum = Integer.MIN_VALUE;
         int curSum = 0;
        
        for(int i = 0; i < nums.length; i++){
            curSum += nums[i];
            if(curSum > maxSum) maxSum = curSum;
            
            if(curSum < 0) curSum = 0;
            
        }
         return maxSum;
        
        
    }
}
