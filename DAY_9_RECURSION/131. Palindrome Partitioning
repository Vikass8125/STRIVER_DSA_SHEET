Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.

A palindrome string is a string that reads the same backward as forward.

 

Example 1:

Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]
Example 2:

Input: s = "a"
Output: [["a"]]
 

Constraints:

1 <= s.length <= 16
s contains only lowercase English letters.


MY_SOLUTION


Matrix Chain Multiplication (dp)
=============

class Solution {
    List<List<String>> list;
    public List<List<String>> partition(String s) {
	
        list = new ArrayList();
		
        if( s.equals("")){
            list.add(new ArrayList());
            return list;
        }
		
        find(s, new ArrayList()); 
        
        if(isP(s)){
            List<String> temp = new ArrayList();
            temp.add(s);
            list.add(temp);
        }
                    
       return list;
     } 
    
    void find(String s, ArrayList<String> temp){
         
        int n = s.length();
        
        for(int k = 1; k<n; k++){
            
            String left = s.substring(0, k);
            
            if( isP(left) ){
                temp.add(left);

                String right = s.substring(k, n);
                if( isP(right)){
                    temp.add(right);    
                    list.add(new ArrayList(temp));
                    temp.remove(temp.size()-1);
                }
                
                find(right, temp);
                
                temp.remove(temp.size()-1);
            } 
        }    
    }
	
    boolean isP(String s){
        int i = 0;
        int j = s.length()-1;
        while(i<j){
		
            if( s.charAt(i) != s.charAt(j) )
                return false;

            i++;  j--;
        }
        return true;
    }
}




================================================================================================
Approach: The initial idea will be to make partitions to generate substring and check if the substring generated out of the partition will be a palindrome. 
Partitioning means we would end up generating every substring and checking for palindrome at every step. 
Since this is a repetitive task being done again and again, at this point we should think of recursion.
The recursion continues until the entire string is exhausted. After partitioning, every palindromic substring is inserted in a data structure 
When the base case has reached the list of palindromes generated during that recursion call is inserted in a vector of vectors/list of list.

We have already discussed the initial thought process and the basic outline of the solution. The approach will get clearer with an example.

Say s = “aabb” and assume indexes of string characters to be 0-based. For a better understanding, we have divided recursion into some steps. 

STEP 1: We consider substrings starting from the 0th index.[0,0] is a palindrome, so partition right after the 0th index.[0,1] is another palindrome,
make a partition after 1st index. Beyond this point, other substrings starting from index 0 are “aab”  and “aabb”. 
These are not palindromes, hence no more. partitions are possible. The strings remaining on the right side of the partition are used as input to make recursive calls.
STEP 2: Consider the recursive call on the left(refer to image)  where “abb” is the input.[1,1] is a palindrome, make a partition after it.[1,2] and [1,3] are not palindromes.
STEP 3: Here “bb” is the input.[2,2] as well as [2,3]  are palindromes. Make one partition after the 2nd index and one after the 3rd index 
The entire string is exhausted after the 3rd index, so the right recursion ends here. Palindromes generated from the right recursion are inserted in our answer.

Our answer at this point :[ [“a”,” a”,” bb”] ]
The left recursion will continue with  “b” as its input.[3,3] is a palindrome so one last partition for the left recursion is made after the 3rd index. 
Insert the palindromes.

ans = [  [“a”,”a”,”bb”], [ “a”,”a”,”b”,”b”] ] 

STEP 4: After the list of palindromic substrings are returned from the left recursive call, continue the same process for the call on the right that was left to recur. 
The right recursion is having “bb” as input, something we have already encountered in step 3. Hence we will repeat the same task which was done in step 3 onwards.
Final answer : [  [“a”,”a”,”bb”], [ “a”,”a”,”b”,”b”] ,[“aa”,”b”,”b”], [“aa”,”bb”] ]

class Solution {
    public List<List<String>> partition(String s) {
        // STORING THE FINAL RESULT
        List<List<String>> result = new ArrayList<>();
        // STORING THE ANSWER AT EVERY LEVEL
        List<String> ans = new ArrayList<>();
        // CALLING THE RECURSIVE CALL
        helper(0, s, ans, result);
        
        return result;
    }
    
    public void helper(int index, String s, List<String> ans, List<List<String>> result){
        //BASE CASE -> IF IT REACHES THE END THEN ADD THE ANS AND RETURN
        if(index == s.length()){
            result.add(new ArrayList<>(ans));
            return;
        }
        // PARTITIONING AT EVERY INDEX
        for(int i = index; i < s.length(); i++){
            // CHECKING THE STRING IS PALINDROME OR NOT
            if(isPalindrome(s, index, i)){
                ans.add(s.substring(index, i + 1));
                helper(i + 1, s, ans, result);
                ans.remove(ans.size() - 1);
            }
        }
    }
    
    boolean isPalindrome(String s, int start, int end){
        while(start <= end){
            if(s.charAt(start++) != s.charAt(end--)) return false;
        }
        return true;
    }
}

Time Complexity: O( (2^n) *k*(n/2) )

Reason: O(2^n) to generate every substring and O(n/2)  to check if the substring generated is a palindrome. 
O(k) is for inserting the palindromes in another data structure, where k  is the average length of the palindrome list.

Space Complexity: O(k * x)

Reason: The space complexity can vary depending upon the length of the answer. 
k is the average length of the list of palindromes and if we have x such list of palindromes in our final answer. 
The depth of the recursion tree is n, so the auxiliary space required is equal to the O(n).

===========================================================================================================================================
Overview
The aim to partition the string into all possible palindrome combinations. To achieve this, we must generate all possible substrings of a string by 
partitioning at every index until we reach the end of the string. Example, abba can be partitioned as ["a","ab","abb","abba"]. 
Each generated substring is considered as a potential candidate if it a Palindrome.

Let's look at a few approaches to implement this idea.

Approach 1: Backtracking
Intuition

The idea is to generate all possible substrings of a given string and expand each possibility if is a potential candidate. 
The first thing that comes to our mind is Depth First Search. In Depth First Search, we recursively expand potential candidate until the defined goal is achieved. 
After that, we backtrack to explore the next potential candidate.

Backtracking incrementally build the candidates for the solution and discard the candidates (backtrack) if it doesn't satisfy the condition.

The backtracking algorithms consists of the following steps:

Choose: Choose the potential candidate. Here, our potential candidates are all substrings that could be generated from the given string.

Constraint: Define a constraint that must be satisfied by the chosen candidate. In this case, the constraint is that the string must be a palindrome.

Goal: We must define the goal that determines if have found the required solution and we must backtrack. 
Here, our goal is achieved if we have reached the end of the string.

Algorithm

In the backtracking algorithm, we recursively traverse over the string in depth-first search fashion. 
For each recursive call, the beginning index of the string is given as start.

Iteratively generate all possible substrings beginning at start index. 
The end index increments from start till the end of the string.

For each of the substring generated, check if it is a palindrome.

If the substring is a palindrome, the substring is a potential candidate. Add substring to the currentList and perform a depth-first search on 
the remaining substring. If current substring ends at index end, end+1 becomes the start index for the next recursive call.

Backtrack if start index is greater than or equal to the string length and add the currentList to the result.

class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList<List<String>>();
        dfs(0, result, new ArrayList<String>(), s);
        return result;
    }

    void dfs(int start, List<List<String>> result, List<String> currentList, String s) {
        if (start >= s.length()) result.add(new ArrayList<String>(currentList));
        for (int end = start; end < s.length(); end++) {
            if (isPalindrome(s, start, end)) {
                // add current substring in the currentList
                currentList.add(s.substring(start, end + 1));
                dfs(end + 1, result, currentList, s);
                // backtrack and remove the current substring from currentList
                currentList.remove(currentList.size() - 1);
            }
        }
    }

    boolean isPalindrome(String s, int low, int high) {
        while (low < high) {
            if (s.charAt(low++) != s.charAt(high--)) return false;
        }
        return true;
    }
}

Complexity Analysis

Time Complexity : {O}(N 2^{N}), where NN is the length of string s. 
This is the worst-case time complexity when all the possible substrings are palindrome.
Hence, there could be 2^{N} possible substrings in the worst case. 
For each substring, it takes \mathcal{O}(N)O(N) time to generate substring and determine if it a palindrome or not. 
This gives us time complexity as {O}(N 2^{N})

Space Complexity: O(N), where N is the length of the string s. This space will be used to store the recursion stack. 
For s = aaa, the maximum depth of the recursive call stack is 3 which is equivalent to N.

=================================================================================================================================
Approach 2: Backtracking with Dynamic Programming
Intuition

This approach uses a similar Backtracking algorithm as discussed in Approach 1. 
But, the previous approach performs one extra iteration to determine if a given substring is a palindrome or not. 
Here, we are repeatedly iterating over the same substring multiple times and the result is always the same. 
There are Overlapping Subproblems and we could further optimize the approach by using dynamic programming to determine if a string is a palindrome in constant time. 
Let's understand the algorithm in detail.

Algorithm

A given string ss starting at index start and ending at index end is a palindrome if following conditions are satisfied :

The characters at start and end indexes are equal.
The substring starting at index start+1 and ending at index end−1 is a palindrome.

Let N be the length of the string. 
To determine if a substring starting at index }start and ending at index end is a palindrome or not, we use a 2 Dimensional array dp of size N⋅N where,
dp[start][end]=true , if the substring beginning at index start and ending at index end is a palindrome.

Otherwise, dp[start][end] ==false.

Also, we must update the }dp array, if we find that the current string is a palindrome.
class Solution {
    public List<List<String>> partition(String s) {
        int len = s.length();
        boolean[][] dp = new boolean[len][len];
        List<List<String>> result = new ArrayList<>();
        dfs(result, s, 0, new ArrayList<>(), dp);
        return result;
    }

    void dfs(List<List<String>> result, String s, int start, List<String> currentList, boolean[][] dp) {
        if (start >= s.length()) result.add(new ArrayList<>(currentList));
        for (int end = start; end < s.length(); end++) {
            if (s.charAt(start) == s.charAt(end) && (end - start <= 2 || dp[start + 1][end - 1])) {
                dp[start][end] = true;
                currentList.add(s.substring(start, end + 1));
                dfs(result, s, end + 1, currentList, dp);
                currentList.remove(currentList.size() - 1);
            }
        }
    }
}
Complexity Analysis

Time Complexity : {O}(N  2^{N}), where N is the length of string s. In the worst case, there could be 2^{N} possible 
substrings and it will take O(N) to generate each substring using substr as in Approach 1. 
However, we are eliminating one additional iteration to check if substring is a palindrome or not.

Space Complexity: O(N⋅N), where N is the length of the string s. 
The recursive call stack would require N space as in Approach 1. 
Additionally we also use 2 dimensional array dp of size N⋅N .
This gives us total space complexity as O(N⋅N) + O(N) = O(N⋅N)

=================================================================================================
The normal dfs backtracking will need to check each substring for palindrome, but a dp array can be used to record the possible break for palindrome before we start recursion.

Edit:
Sharing my thought process:
first, I ask myself that how to check if a string is palindrome or not, usually a two point solution scanning from front and back. Here if you want to get all the possible palindrome partition, first a nested for loop to get every possible partitions for a string, then a scanning for all the partitions. That's a O(n^2) for partition and O(n^2) for the scanning of string, totaling at O(n^4) just for the partition. However, if we use a 2d array to keep track of any string we have scanned so far, with an addition pair, we can determine whether it's palindrome or not by justing looking at that pair, which is this line if(s.charAt(i) == s.charAt(j) && (i - j <= 2 || dp[j+1][i-1])). This way, the 2d array dp contains the possible palindrome partition among all.

second, based on the prescanned palindrome partitions saved in dp array, a simple backtrack does the job.

public class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        boolean[][] dp = new boolean[s.length()][s.length()];
        for(int i = 0; i < s.length(); i++) {
            for(int j = 0; j <= i; j++) {
                if(s.charAt(i) == s.charAt(j) && (i - j <= 2 || dp[j+1][i-1])) {
                    dp[j][i] = true;
                }
            }
        }
        helper(res, new ArrayList<>(), dp, s, 0);
        return res;
    }
    
    private void helper(List<List<String>> res, List<String> path, boolean[][] dp, String s, int pos) {
        if(pos == s.length()) {
            res.add(new ArrayList<>(path));
            return;
        }
        
        for(int i = pos; i < s.length(); i++) {
            if(dp[pos][i]) {
                path.add(s.substring(pos,i+1));
                helper(res, path, dp, s, i+1);
                path.remove(path.size()-1);
            }
        }
    }
}
=========================================================
Approach Explaination :-
A basic summary of diagram, how we are doing it
Take an example, "xxyy".
If we partition over x|xyy so the substring "x" is a palindrome. Where i can have the first partition.

But, if they don't allow to partition over there, then our second partition will be xx|yy. 
Because this "xx" is a palindrome substring. Thus we still left out with yy, so if i do the partion over here xxy|y the answer will be no, 
because if i do the partition over here the substring "xxy" is not a palindrome.

Can i do a partition over here xxyy|. No. Because xxyy is not a palindromic substring. So, we can see when we started we can do a 
partition over here x|xyy OR xx|yy so that is what we do. We try to do partition where ever it is possible

So, in the first case we did a partition over x|xyy where we left out with xyy. So, if i do a partiton like x|x|yy where x it'self a palindrome. 
And we left out with a substring yy
Now can you do a partition over here x|xy|y. No, because this substring xy is not a palindrome
Again can we do a partition over here x|xyy|. No, because this substring xyy is not a palindrome

So, the only partition possible is x|x|yy. And after that we tend to call the recursion for remaining substring

If i try to do a partition over here x|x|y|y so, the substring y in itself is a palindromic substring. After that we left out with remaining y substring.
Now you ask can we do a partition over here x|x|yy|, Yes

Like this way, we do the partition in complete STRING using recursion. And with the help of Backtracking we store our answer.

class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>(); // which will be our answer
        List<String> path = new ArrayList<>(); // as we are generating list everythime, so at the end this will be our list
        helper(0, s, path, res); // calling to recursion function start from index 0 and string s
        return res;
    }
    // Entire recursive function, that generates all the partition substring
    public void helper(int index, String s, List<String> path, List<List<String>> res){
        // Base Condition, which means when we have done partition at the end (n), then add it to our ultimate result
        if(index == s.length()){
            res.add(new ArrayList<>(path));
            return;
        }
        // Let's talk about partition
        for(int i = index; i < s.length(); i++){
            if(isPalindrome(s, index, i)){ // what we are checking over here is, if we partition the string from index to i Example-(0, 0) is palindrome or not
                path.add(s.substring(index, i + 1)); // take the substring and store it in our list & call the next substring from index + 1
                helper(i + 1, s, path, res); // as we have done for (0, 0) then our next will be from (1)
                path.remove(path.size() - 1); // please make sure you remove when you backtrack. 
                // Why? Because let say i had partion y, so when i go back. I can't have yy
            }
        }
    } 
    
    public boolean isPalindrome(String s, int start, int end){ // A simple palindromic function start from 0 go till end. And basically keep on checking till they don't cross. 
        while(start <= end){
            if(s.charAt(start++) != s.charAt(end--)) return false;
        }
        return true;
    }
}

===============================================================================================================================
Let's get to the intuition: the question has three keywords, partition, substring and palindrome.

Partition: Means every answer of ours has to include full string in parts.
Substring: Since, each answer of ours need to have full string means every next partition should be continuous from the previous substring.
Palindrome:
Forget palindrome for now, and suppose we have "abaaba" and from our above two observations, one of the answers of ours could be ["a", "ba", "ab", "a"].
Now, why is this not one of the answers? Each partitions that we do need to be a palindrome(same as it's reverse). 
Means one possible solution could be ["a", "baab", "a"].
Take a look at the below image for a better understanding.


class Solution {
    
    ArrayList<List<String>> answer;
    
    public List<List<String>> partition(String s) {
        answer = new ArrayList<>();
        solution(s, new ArrayList<String>());
        
        return answer;
    }

	public boolean isPalindrome(String str) {
		
		int length = str.length();
		for(int idx = 0; idx < length/2; idx++) {
			if(str.charAt(idx) != str.charAt(length - 1 - idx)) return false;
		}

		return true;
	}
 
	public void solution(String str, ArrayList<String> asf) {
		
		if(str.length() == 0) {            
            answer.add(new ArrayList<>(asf));
			return;
		}


		// Take out palindromes from the starting of the question string which is left.
		for(int idx = 0; idx < str.length(); idx++) {
			String sub = str.substring(0, idx + 1);
			
			if(isPalindrome(sub)) {
                
                asf.add(sub);
                solution(str.substring(idx + 1), asf);
				// backtrack and remove the palindromic substring added and found the next one starting from the same letter as this one `sub`.
                asf.remove(asf.size() - 1);
			}

		}
		
	}

    
}

===========================================================================================================

given string S of length N, we use DP along the length N

example: say we want to find palindromes for string S = "aaba", N = 4

assume we already did the DP calculations for N=3, N=2, N=1, so that
dp[2] would give question results (palindrome partitions) for the string "aa"

traverse string S "aaba", from back to front, checking for palindromes

"a" is a palindrome. The rest of the string is "aab". The palindrome results of "aab" are in dp[3]. Copy dp[3] and merge the copy with "a"

"ba" is not a palindrome, skip

"aba" is a palindrome. The rest of the string is "a". Copy dp[1], the palindrome results of "a", and merge the copy with "aba"

now we have all the palindrome partitions for "aaba", N = 4

remember to put the palindrome results for "aaba" into dp[4]

    public List<List<String>> partition(String s) {
        List<List<String>> result = new LinkedList<List<String>>();
        if (s == null || s.length() == 0) return result;
        
        Map<Integer, List<List<String>>> dp = new HashMap<Integer, List<List<String>>>();

        for (int i = 0; i < s.length(); ++i) {
            List<List<String>> results = new LinkedList<List<String>>();
            
            for (int j = i; j >= 0; --j) {
                if (isPalindrome(s, j, i)) {
                    String endPali = s.substring(j, i + 1);
                    List<List<String>> prev = dp.get(j - 1);
                    if (prev != null) {
                        for (List<String> palList : prev) {
                            List<String> newPalList = new LinkedList<String>(palList);
                            newPalList.add(endPali);
                            results.add(newPalList);
                        }
                    } else if (j == 0) {
                        List<String> newPalList = new LinkedList<String>();
                        newPalList.add(endPali);
                        results.add(newPalList);
                    }
                }   
            }
            
            dp.put(i, results);
        }
        
        return dp.get(s.length() - 1);
    }
    
    private boolean isPalindrome(String s, int start, int end) {
        while (start < end) {
            if (s.charAt(start) != s.charAt(end)) return false;
            ++start;
            --end;
        }
        return true;
    }
    =================================================================
    Steps:

Create a isPalindrome lookup table for all the substrings
Calculate the palindrom list for all the sub indexes
The result of index 0 will be answer to our problem
Time Complexity: O(N^2)

O(N^2) (for creating isPalindrome memo table) +
O(N^2) (findPalindromes method would be invoked only N times with new input * each invokation can make N-1 calls)
Space Complexity: O(N!)

O(N^2) (for creating isPalindrome memo table) +
O(N!) (we should remember all the subsolution which is costly)
class Solution {
    public List<List<String>> partition(String s) {
        boolean[][] isPalindromeMemo = new boolean[s.length()][s.length()];
        // Create a memo table with all the isPalindrome value for the string
        for(int length=0; length<s.length(); ++length)
            for(int start=0; start<s.length()-length; ++start)
                isPalindromeMemo[start][start+length] = s.charAt(start) == s.charAt(start+length) && 
                    (length<2 || isPalindromeMemo[start+1][start+length-1]);
        
        return findPalindromes(0, s, isPalindromeMemo, new ArrayList[s.length()]);
    }
    
    private List<List<String>> findPalindromes(int pos, String str, boolean[][] isPalindromeMemo,
                                 List<List<String>>[] subSolutions) {
        if (subSolutions[pos] != null)
            return subSolutions[pos];
        
        List<List<String>> result = new ArrayList<>();
        for(int i=pos; i<str.length(); ++i) {
            if (isPalindromeMemo[pos][i]) {
                String currentStr = str.substring(pos, 1+i);
                if (i == str.length()-1)
                    result.add(new ArrayList<>() {{
                        add(currentStr);
                    }});
                else {
                    List<List<String>> remaining = 
                        findPalindromes(i+1, str, isPalindromeMemo, dp);
                    for(List<String> rem: remaining)
                        result.add(new ArrayList<String>() {{
                            add(currentStr);
                            addAll(rem);
                        }});
                }
            }
        }
        return subSolutions[pos] = result;
    }
}

