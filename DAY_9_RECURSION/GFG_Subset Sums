Given a list arr of N integers, print sums of all subsets in it.

 

Example 1:

Input:
N = 2
arr[] = {2, 3}
Output:
0 2 3 5
Explanation:
When no elements is taken then Sum = 0.
When only 2 is taken then Sum = 2.
When only 3 is taken then Sum = 3.
When element 2 and 3 are taken then 
Sum = 2+3 = 5.
Example 2:

Input:
N = 3
arr = {5, 2, 1}
Output:
0 1 2 3 5 6 7 8
Your Task:  
You don't need to read input or print anything. Your task is to complete the function subsetSums() which takes a list/vector and 
an integer N as an input parameter and return the list/vector of all the subset sums.

Expected Time Complexity: O(2N)
Expected Auxiliary Space: O(2N)

Constraints:
1 <= N <= 15
0 <= arr[i] <= 104

MY_SOLUTION

Solution 1: Using recursion

Intuition: The main idea is that on every index you have two options either to select the element to add it to your subset(pick) or not select the element 
at that index and move to the next index(non-pick).

Approach: Traverse through the array and for each index solve for two arrays, one where you pick the element,i.e add the element to the sum or don’t pick and 
move to the next element, recursively, until the base condition. Here when you reach the end of the array is the base condition.


class Solution{
    ArrayList<Integer> subsetSums(ArrayList<Integer> arr, int N){
        ArrayList<Integer> result = new ArrayList<>();
        // CALLING THE RECURSIVE FUNCTION
        subSetMethod(0, 0, arr, N, result);
        // SORTING THE RESULT ARRAY
        Collections.sort(result);
        return result;
    }
    
    void subSetMethod(int index, int sum, ArrayList<Integer> arr, int N, ArrayList<Integer> result){
        // BASE CONDITION -> WHEN INDEX == SIZE OF ARRAY
        if(index == N){
            result.add(sum);
            return;
        }
        // CONSIDERING THE ELEMENT
        subSetMethod(index + 1, sum + arr.get(index), arr, N, result);
        // NOT CONSIDERING THE ELEMENT
        subSetMethod(index + 1, sum , arr, N, result);
        
    }
    
}

Time Complexity: O(2^n)+O(2^n log(2^n)). Each index has two ways. You can either pick it up or not pick it. So for n index time complexity for O(2^n) and 
for sorting it will take (2^n log(2^n)).

Space Complexity: O(2^n) for storing subset sums, since 2^n subsets can be generated for an array of size n.




// ITERATIVE
Method 2 (Iterative) 
As discussed above, there are total 2n subsets. The idea is generate loop from 0 to 2n – 1. For every number, pick all array elements which 
correspond to 1s in binary representation of current number.

// Iterative Java program to print sums of all
// possible subsets.
import java.util.*;

class GFG {

	// Prints sums of all subsets of array
	static void subsetSums(int arr[], int n)
	{

		// There are total 2^n subsets
		int total = 1 << n;

		// Consider all numbers from 0 to 2^n - 1
		for (int i = 0; i < total; i++) {
			int sum = 0;

			// Consider binary representation of
			// current i to decide which elements
			// to pick.
			for (int j = 0; j < n; j++)
				if ((i & (1 << j)) != 0)
					sum += arr[j];

			// Print sum of picked elements.
			System.out.print(sum + " ");
		}
	}

	// Driver code
	public static void main(String args[])
	{
		int arr[] = new int[] { 5, 4, 3 };
		int n = arr.length;

		subsetSums(arr, n);
	}
}


Time Complexity: O(N * 2^N)
Auxiliary Space: O(1) 
Thanks to cfh for suggesting above iterative solution in a comment.
Note: We haven’t actually created sub-sets to find their sums rather we have just used recursion to find sum of non-contiguous sub-sets of the given set.

The above mentioned techniques can be used to perform various operations on sub-sets 
like multiplication, division, XOR, OR, etc, without actually creating and storing the sub-sets and thus making the program memory efficient. 
