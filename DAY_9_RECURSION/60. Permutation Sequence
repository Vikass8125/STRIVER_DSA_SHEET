The set [1, 2, 3, ..., n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order, we get the following sequence for n = 3:

"123"
"132"
"213"
"231"
"312"
"321"
Given n and k, return the kth permutation sequence.

 

Example 1:

Input: n = 3, k = 3
Output: "213"
Example 2:

Input: n = 4, k = 9
Output: "2314"
Example 3:

Input: n = 3, k = 1
Output: "123"
 

Constraints:

1 <= n <= 9
1 <= k <= n!

MY_SOLUTION

Solution 1: Brute Force Solution

Approach:  

The extreme naive solution is to generate all the possible permutations of the given sequence.  
This is achieved using recursion and every permutation generated is stored in some other data structure (here we have used a vector). 
Finally, we sort the data structure in which we have stored all the sequences and return the Kth sequence from it.

Code:

import java.util.*;
public class Main {
    static void swap(char s[], int i, int j) {
        char ch = s[i];
        s[i] = s[j];
        s[j] = ch;
    }
    static void solve(char s[], int index, ArrayList < String > res) {
        if (index == s.length) {
            String str = new String(s);

            res.add(str);
            return;
        }
        for (int i = index; i < s.length; i++) {
            swap(s, i, index);
            solve(s, index + 1, res);
            swap(s, i, index);
        }
    }

    static String getPermutation(int n, int k) {
        String s = "";
        ArrayList < String > res = new ArrayList < > ();
        for (int i = 1; i <= n; i++) {
            s += i;
        }
        solve(s.toCharArray(), 0, res);
        Collections.sort(res);

        return res.get(k);

    }
    public static void main(String args[]) {
        int n = 3, k = 3;
        String ans = getPermutation(n, k);
        System.out.println("The Kth permutation sequence is " + ans);
    }
}

Output:

The Kth permutation sequence is 213

Time complexity: O(N! * N) +O(N! Log N!)

Reason:  The recursion takes O(N!)  time because we generate every possible permutation and another O(N)  time is required to make a deep copy and store 
every sequence in the data structure. Also, O(N! Log N!)  time required to sort the data structure

Space complexity: O(N) 

Reason: Result stored in a vector, we are auxiliary space taken by recursion

=======================================================================================================================================

Solution 2:(Optimal Approach)

Say we have N = 4  and K = 17. Hence the number sequence is {1,2,3,4}. 

Intuition:

Since this is a permutation we can assume that there are four positions that need to be filled using the four numbers of the sequence. 
First, we need to decide which number is to be placed at the first index. Once the number at the first index is decided we have three more positions 
and three more numbers.  Now the problem is shorter. We can repeat the technique that was used previously until all the positions are filled. 
The technique is explained below.

Approach:  

STEP 1:

Mathematically speaking there can be 4 variations while generating the permutation. 
We can have our permutation starting with either 1 or 2 or 3 or 4. If the first position is already occupied by one number there are three more positions left. 
The remaining three numbers can be permuted among themselves while filling the 3 positions and will generate 3! = 6 sequences.
Hence each block will have 6 permutations adding up to a total of 6*4 = 24 permutations. If we consider the sequences as 0-based and in the sorted form we observe:- 

The 0th – 5th permutation will start with 1 
The 6th – 11th permutation will start with 2
The 12th – 17th permutation will start with 3 
The 18th – 23rd permutation will start with 4.

We make K = 17-1 considering 0-based indexing. Since each of the four blocks illustrated above 
comprises 6 permutations, therefore, the 16th permutation will lie in (16 / 6 ) = 2nd block, and our answer is the (16 % 6) = 4th sequence from the 2nd block. 
Therefore 3 occupies the first position of the sequence and K = 4.

STEP 2:

Our new search space comprises three elements {1,2,4} where K = 4 .
Using the previous technique we can consider the second position to be occupied can be any one of these 3 numbers. 
Again one block can start with 1, another can start with 2 and the last one can start with 4 .
Since one position is fixed, the remaining two numbers of each block can form 2! = 2  sequences. In sorted order :

The 0th – 1st sequence starts with 1 
The 2nd – 3rd sequence starts with 2 
The 4th – 5th sequence starts with 4


The 4th permutation will lie in (4/2) = 2nd block and our answer is the 4%2 = 0th sequence from the 2nd block. Therefore 4 occupies the second position and K = 0.

STEP 3: 

The new search space will have two elements {1 ,2} and K = 0. One block starts with 1 and the other block starts with 2.
The other remaining number can form only one 1! = 1 sequence. In sorted form –

The  0th sequence starts with 1 
The  1st sequence. starts with 2


The 0th permutation will lie in the (0/1) = 0th block and our answer is the 0%1 = 0th sequence from the 0th block. 
Therefore 1 occupies the 3rd position and K = 0.

STEP 4: 

Now the only block has 2 in the first position and no remaining number is present.


This is the point where we place 2 in the last position and stop.


The final answer is 3412.

Code:

class Solution {
    public String getPermutation(int n, int k) {
        //find the factorial
        int fact = 1;
        // the list of numbers of set
        List<Integer> numbers = new ArrayList<>();
        
        for(int i = 1; i < n; i++){
            fact = fact * i;
            numbers.add(i);
        }
        
        numbers.add(n);
        String ans = "";
        k = k - 1; // 0 based indexing
        
        while(true){
            // filling the position one by one
            ans = ans + numbers.get(k / fact);
            // removing the digit after adding to result from the list
            numbers.remove(k/fact);
            if(numbers.size() == 0){
                break;
            }
            // assigning the new value of k 
            k = k % fact;
            fact = fact / numbers.size();
            
        }
        return ans;
        
    }
}

Time Complexity: O(N) * O(N) = O(N^2)

Reason: We are placing N numbers in N positions. This will take O(N) time. 
For every number, we are reducing the search space by removing the element already placed in the previous step. This takes another O(N) time.

Space Complexity: O(N) 

Reason: We are storing  the numbers in a data structure(here vector)

=====================================================================================================================
class Solution {
    public String getPermutation(int n, int k) {
        // Idea: calculate this by math
        //
        // Observation 1: (k - 1) / (n - 1)!  + 1 determines
        // which number in [1, n] comes first
        // E.g. If n = 3, k = 3,
        // then (3 - 1) / (3 - 1)! + 1
        // = 2 / 2 + 1
        // = 2
        // Thus, "2xx" would be the answer
        //
        // Observation 2: The "xx" part in "2xx" can be calculated
        // similarly as a subproblem. This is therefore a recursion problem,
        // solvable with the usual dynamic programming/iterative techniques.
        //
        // First, let's calculate all factorials from 0 to n - 1
        // Not really needed to calculate 0!, but
        // 1) it helps to calculate 1! and
        // 2) it eliminates the need for special case code
        // when finding the last number in the answer.
        int[] factorials = new int[n];
        factorials[0] = 1;
        
        for (int i = 1; i < factorials.length; ++i) {
            factorials[i] = i * factorials[i - 1];
        }
        
        // Use an array to mark which numbers in [1, n] have already
        // been used in the answer
        // Be mindful of 1-based indexing in question vs. zero-based
        // indexing in code
        boolean[] used = new boolean[n];
        
        // This is the recursive part, solved iteratively
        //
        // Observation 3: Since 0th (first) num can be found via
        // (k - 1) / (n - 1)!, the 1th (second) num can be found
        // similarly using a k'
        // k' is the remainder of (k - 1) / (n - 1)!, e.g., what is
        // left over after using the quotient of (k - 1) / (n - 1)!
        // to find the previous index.
        // Let's start with k - 1 as the remainder to find the 0th num.
        // Use k - 1 because k is 1-based indexing as phrased in the
        // question but in code we use zero-based indexing.
        int remainder = k - 1;
        
        // Accumulator for answer
        // Use StringBuilder if you want further optimization
        String answer = "";
        
        // Iterate from n - 1 down to 0
        // From observation 2 above
        for (int i = n - 1; i >= 0; --i) {
            // offset is the index of the list of unused nums in [1, n]
            // This is from observation 1 above.
            // For example, if n = 3, k = 3,
            // offset = (3 - 1) / (3 - 1)! = 1
            // 1th num in the list [1, 2, 3] is 2
            int offset = remainder / factorials[i];
            
            // iterate through the used array and find the offset-th unused num
            for (int j = 0; j < used.length; ++j) {
                if (used[j]) {
                    continue;
                }
                
                // Algorithm guarantees this will be matched once per loop
                // through the used array.
                //
                // Proof: offset is upper-bounded by i, which decreases by 1
                // every iteration of the outer loop. This is true because
                // remainder cannot exceed factorials[i + 1]. Also, we use one
                // num each iteration of the outer loop, so offset is always
                // less than or equal to the number of unused nums left.
                if (offset == 0) {
                    // j is zero-based index, but [1,n] is 1-based
                    answer += j + 1;
                    used[j] = true;
                    break;
                }
                
                --offset;
            }
            
            // From observation 3 above
            remainder %= factorials[i];
        }
        
        return answer;
    }
}
Time complexity: O(n^2). Calculating factorials is O(n). Getting the correct num based on offset is upper-bounded at n + (n - 1) + ... + 1 or O(n^2).
Space complexity: O(n). Both factorials and used arrays are n length.

================================================================================================
This problem consists of two parts.

Part one, find the array A[0..n-1] that satisfies:

**k-1 = (n-1)!*A[0] + (n-2)!*A[1] + ... + 2!*A[n-3] + 1!A[n-2] + 0!A[n-1]

and 0 <= A[i] < n-i (so the last item in the formula above is always 0).

It's obvious that the array A[0..n-1] can be calculated either from 0 to n-1 or reversely.
In order to avoid previous calculation of factorial, A[0..n-1] is calculated from end to start here.

Part two, translate A[0..n-1] into final sequence number. A[0..n-1] can be translated from end to start step by step, just like the 
mathematical solution of Joseph Circle.

public class Solution {
    public String getPermutation(int n, int k) {
		k--;
		int fact = 1;
		char[] result = new char[n];
		result[n - 1] = '1';
		for (int i = 2; i <= n; i++) {
			fact *= i;
			result[n - i] = (char) (k % fact * i / fact + '1');
			for (int j = n - i + 1; j < n; j++) {
				result[j] += result[j] >= result[n - i] ? 1 : 0;
			}
			k -= k % fact;
		}
		return new String(result);
    }
}
====================================================================================================================================

Recursion will use more memory, while this problem can be solved by iteration. 
I solved this problem before, but I didn't realize that using k = k-1 would avoid dealing with case k%(n-1)!==0.
Rewrote this code, should be pretty concise now.

Only thing is that I have to use a list to store the remaining numbers, neither linkedlist nor arraylist are very efficient, anyone has a better idea?

The logic is as follows: for n numbers the permutations can be divided to (n-1)! groups, for n-1 numbers can be divided to (n-2)! groups, and so on. 
Thus k/(n-1)! indicates the index of current number, and k%(n-1)! denotes remaining index for the remaining n-1 numbers.
We keep doing this until n reaches 0, then we get n numbers permutations that is kth.

public String getPermutation(int n, int k) {
        List<Integer> num = new LinkedList<Integer>();
        for (int i = 1; i <= n; i++) num.add(i);
        int[] fact = new int[n];  // factorial
        fact[0] = 1;
        for (int i = 1; i < n; i++) fact[i] = i*fact[i-1];
        k = k-1;
        StringBuilder sb = new StringBuilder();
        for (int i = n; i > 0; i--){
            int ind = k/fact[i-1];
            k = k%fact[i-1];
            sb.append(num.get(ind));
            num.remove(ind);
        }
        return sb.toString();
    }
