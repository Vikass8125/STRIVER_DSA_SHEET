Given an integer array nums that may contain duplicates, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10


MY_SOLUTION

Solution 1: Brute Force

Approach:
At every index, we make a decision whether to pick or not pick the element at that index. 
This will help us in generating all possible combinations but does not take care of the duplicates. 
Hence we will use a set to store all the combinations that will discard the duplicates.


import java.util.*;
class TUF {
    static void printAns(List < String > ans) {
        System.out.println("The unique subsets are ");
        System.out.println(ans.toString().replace(",", " "));
    }
    public static void fun(int[] nums, int index, List < Integer > ds, HashSet < String > res) {
        if (index == nums.length) {
            Collections.sort(ds);
            res.add(ds.toString());
            return;
        }
        ds.add(nums[index]);
        fun(nums, index + 1, ds, res);
        ds.remove(ds.size() - 1);
        fun(nums, index + 1, ds, res);
    }
    public static List < String > subsetsWithDup(int[] nums) {
        List < String > ans = new ArrayList < > ();
        HashSet < String > res = new HashSet < > ();
        List < Integer > ds = new ArrayList < > ();
        fun(nums, 0, ds, res);
        for (String it: res) {
            ans.add(it);
        }
        return ans;
    }

    public static void main(String args[]) {
        int nums[]={1,2,2};
        List < String > ans = subsetsWithDup(nums);
        printAns(ans);

    }

}
=======================================================
The Basic Idea is to use HashSet to remove the duplicates and procede as you solve the Subset problem, that is either choose a particular element or not choose.
Also don't forget to sort the array beforehand so that there is no duplicate ordering of the numbers inside the final answer!

class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> ans = new ArrayList<List<Integer>>();
        Arrays.sort(nums);
        helper(nums,0,ans,new ArrayList<Integer>());
        List<List<Integer>> newAns = new ArrayList<List<Integer>>();
        HashSet<List<Integer>> set = new HashSet<>();
        for(List<Integer> curr : ans){
            set.add(curr);
        }
        for(List<Integer> curr : set){
            newAns.add(curr);
        }
        return newAns;
    }
    public void helper(int[] nums, int i, List<List<Integer>> ans, ArrayList<Integer> curr){
        if(i == nums.length){
            ans.add(new ArrayList<Integer>(curr));
            return;
        }
        curr.add(nums[i]);
        helper(nums,i+1,ans,curr);
        curr.remove(curr.size()-1);
        helper(nums,i+1,ans,curr);
    }
}


Time Complexity: O( 2^n *(k log (x) )). 2^n  for generating every subset and k* log( x)  to insert every combination of average length k in a set of size x. 
After this, we have to convert the set of combinations back into a list of list /vector of vectors which takes more time.

Space Complexity:  O(2^n * k) to store every subset of average length k. Since we are initially using a set to store the answer another O(2^n *k) is also used.


============================================================================================================


Solution 2: Optimal

Approach: 

In the previous method, we were taking extra time to store the unique combination with the help of a set.  
To make the solution efficient we will have to decide on a method that will consider only the unique combinations without the help of additional data structure.

Lets  understand  with an example where arr = [1,2,2 ].

Initially start with an empty data structure. In the first recursion, call make a subset of size one, in the next recursion call a subset of size 2, and so on. 
But first, in order to make a subset of size one what options do we have?

We can pick up elements from either the first index or the second index or the third index. 
However, if we have already picked up two from the second index, picking up two from the third index will make another duplicate subset of size one. 
Since we are trying to avoid duplicate subsets we can avoid picking up from the third index. 
This should give us an intuition that whenever there are duplicate elements in the array we pick up only the first occurrence.

The next recursion calls will continue from the point the previous one ended.

Letâ€™s summarize:-

Sort the input array.Make a recursive function that takes the input array ,the current subset,the current index and  
a list of list/ vector of vectors to contain the answer.
Try to make a subset of size n during the nth recursion call and consider elements from every index while generating the combinations. 
Only pick up elements that are appearing for the first time during a recursion call to avoid duplicates.
Once an element is picked up, move to the next index.The recursion will terminate when the end of array is reached.
While returning backtrack by removing the last element that was inserted.

class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
       // OPTIMISED RECURSION
    
        // SORT THE ARRAY TO AVOID DUPLICATES
        Arrays.sort(nums);
        // CREATING LIST TO STORE FINAL RESULT
        List<List<Integer>> ansList = new ArrayList<>();
        // CALLING FUNCTION RECURSIVELY
        subset(0, nums, new ArrayList<>(), ansList);
        return ansList;
        
    }
    
    public void subset(int index, int[] nums, List<Integer> tempList, List<List<Integer>> ansList){
        ansList.add(new ArrayList<>(tempList));
    
        for(int i = index; i < nums.length; i++){
            if(i != index && nums[i] == nums[i-1]) continue;
            
            tempList.add(nums[i]);
            subset(i + 1, nums, tempList, ansList);
            tempList.remove(tempList.size() - 1);
            
        }
    }

}


Time Complexity: O(2^n) for generating every subset and O(k)  to insert every subset in another data structure if the average length of every subset is k. 
Overall O(k * 2^n).

Space Complexity: O(2^n * k) to store every subset of average length k. Auxiliary space is O(n)  if n is the depth of the recursion tree.

===============================================================

class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        
        //make sure to sort the array in ascending order so that we can detect the dupicates side by side
        Arrays.sort(nums);
        
        //create a list of list of integer anslist to return in the end
        //this is the array list that will contain all the unique subsets lists
        ArrayList<List<Integer>> ansList = new ArrayList<>();
        
        //Now lets call the recursion
        findUniqueSubSets(0, nums, new ArrayList<Integer>(), ansList);
        //the ArrayList<Integer>() is here because we need to return List<List<Integer>> here so 
        //our main arrayList is ansList which we've already defined
        //this ArrayList<Integer>() we've defined so that we can store our individual lists here
        //and we'll add this list to main list i.e ansList
        
        return ansList;
    }
    
    public void findUniqueSubSets(int ind, int[] nums, ArrayList<Integer> ds, ArrayList<List<Integer>> ansList)
    {
        //initially we add an empty list to our ansList 
        //to generate an empty list like this -> [] 
        ansList.add(new ArrayList<Integer>(ds));
        
        //start chking from 0th to n-1th index. using for loop
        for(int i = ind; i< nums.length; i++)
        {
            //chk for duplicates if any just avoid them
            if( i != ind && nums[i] == nums[i-1]) continue;
            //i != ind . ind is the first index always for which we are chking 
            //so if i is not ind then we are not visiting that element 
            //for the first time and might be and that might be a duplicate 
            //which we again chk using nums[i] == nums[i-1]
            
            //if we came across this if condition that only means that we are at an element 
            //which is not a duplicate 
            //so we have to add it to our arryalist ds
            ds.add(nums[i]);
            
            //again call recursion for the next index
            findUniqueSubSets(i+1, nums, ds, ansList);
            
            //while returning make sure to remove the element we added because 
            //we wouldn't want that to be present for the next recursion call
            ds.remove(ds.size() -1);
                
        }
    }
    
    }
    
Time Complexity: O(k * 2^n) -> O(2^n) for generating every subset + O(k) to insert every subset in another data structure. 
assuming average length of each subset is near about K.

Space Complexity: O(2^n * k) to store every subset and the Auxiliary space is O(n) if n is the depth of the recursion tree.



===================================================================================

ITERATIVE_SOLUTION
class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> outer = new ArrayList<>();
        outer.add(new ArrayList<>());
        int start = 0;
        int end = 0;
        
        for(int i = 0; i < nums.length; i++){
            start = 0;
            if(i > 0 && nums[i] == nums[i-1]){
                start = end + 1;
            }
            end = outer.size() - 1;
            int n = outer.size();
            for(int j = start; j < n; j++){
                List<Integer> internal = new ArrayList<>(outer.get(j));
                internal.add(nums[i]);
                outer.add(internal);
            }
        }
        return outer;
        
    }
}

======================

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10

the input size give us a clear hint that it is a backtracking solution, if there were no duplicates then it would easy problem to backtrack, 
the trick is to skip the duplicates except the first time.
backTrack( index, currentList )

class Solution {
    List<List<Integer>> output;
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort( nums ); //To handle duplicate first we sort the array ( adjacent elements will be similar )
        output = new ArrayList();
        backTracking( 0, nums, new ArrayList() );
        return output;
    }
    
    public void backTracking( int index, int[] nums, List<Integer> list )
    {
        output.add( new ArrayList(list) );
        for( int i = index;i < nums.length; i++ )
        {
            if( i != index && nums[i] == nums[i-1] ) //skip the duplicates, except for the first time
                continue;
            list.add( nums[i]); //include
            backTracking(i+1,nums,list); //explore
            list.remove( list.size()-1);//backtrack, remove the element
        }
    }
}
===========================================================================================
Space Optimized Iterative Solution. This solution takes only O(Unique Nums) for countMap

/**
 * Space Optimized Iterative Solution
 *
 * S(n) = (0 Ã— (n C 0) + 1 Ã— (n C 1) + 2 Ã— (n C 2) + â€¦ + n Ã— (n C n))
 * Note that (n C k) = (n C n-k). Therefore:
 * S(n) = 0 Ã— (n C n) + 1 Ã— (n C n-1) + 2 Ã— (n C n-2) + â€¦ + n Ã— (n C 0)
 * If we add these two together, we get
 * 2S(n) = n Ã— (n C 0) + n Ã— (n C 1) + â€¦ + n Ã— (n C n)
 *       = n Ã— (n C 0 + n C 1 + â€¦ + n C n)
 * As per binomial theorem, (n C 0 + n C 1 + â€¦ + n C n) = 2^n, so
 * 2*S(n) = n * 2^n => S(n) = n * 2^(n-1)
 *
 * Time Complexity: O(S(N) + n C 0) = O(N * 2^(N-1) + 1) = O(N * 2^N)
 *
 * Space Complexity: O(Unique Nums) (Excluding the result space)
 *
 * N = Length of input nums array
 */
class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        if (nums == null) {
            return result;
        }

        Map<Integer, Integer> countMap = new HashMap<>();
        for (int n : nums) {
            countMap.put(n, countMap.getOrDefault(n, 0) + 1);
        }

        result.add(new ArrayList<>());

        for (int n : countMap.keySet()) {
            int size = result.size();
            int count = countMap.get(n);

            for (int i = 0; i < size; i++) {
                List<Integer> cur = result.get(i);
                for (int k = 0; k < count; k++) {
                    List<Integer> temp = new ArrayList<>(cur);
                    temp.add(n);
                    result.add(temp);
                    cur = temp;
                }
            }
        }

        return result;
    }
}
Backtracking (Recursion). This solution take O(N + Unique Nums) space for recursion depth, temp list and countMap

/**
 * Backtracking (Recursion)
 *
 * Time Complexity: O(N * 2 ^ N) Refer to above explanation
 *
 * Space Complexity: O(N + Unique Nums)
 *
 * N = Length of input nums array
 */
class Solution1 {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        if (nums == null) {
            return result;
        }
		
		// Avoid sorting by using a count Map
        Map<Integer, Integer> countMap = new HashMap<>();
        for (int n : nums) {
            countMap.put(n, countMap.getOrDefault(n, 0) + 1);
        }

        subsetsWithDupHelper(countMap, new ArrayList<>(countMap.keySet()), 0, new ArrayList<>(), result);
        return result;
    }

    private void subsetsWithDupHelper(Map<Integer, Integer> countMap, List<Integer> uniqueNums,
									  int start, List<Integer> temp, List<List<Integer>> result) {
        result.add(new ArrayList<>(temp));

        for (int i = start; i < uniqueNums.size(); i++) {
            int num = uniqueNums.get(i);
            int count = countMap.get(num);
            temp.add(num);
            countMap.put(num, count - 1);

            subsetsWithDupHelper(countMap, uniqueNums, (count == 1 ? i + 1 : i), temp, result);

            countMap.put(num, count);
            temp.remove(temp.size() - 1);
        }
    }
}
