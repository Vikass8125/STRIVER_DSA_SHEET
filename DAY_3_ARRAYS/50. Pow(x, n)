Implement pow(x, n), which calculates x raised to the power n (i.e., xn).

 

Example 1:

Input: x = 2.00000, n = 10
Output: 1024.00000
Example 2:

Input: x = 2.10000, n = 3
Output: 9.26100
Example 3:

Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25
 

Constraints:

-100.0 < x < 100.0
-231 <= n <= 231-1
-104 <= xn <= 104

MY_SOLUTION
//O(N) -> TLE
class Solution {
    public double myPow(double x, int n) {
        boolean negative = false;
        double answer = 1.0;
        if(n < 0) {
            negative = true;
            n = n*(-1);
        } 
        for(int i = 0; i < n; i++){
            answer = answer * x;
           
        }
        
        if(negative){
            return 1/answer;
        }
        
        return answer;
        
    }
}


// RECUSIVE -> O(LOGN), O(LOGN)
public class Solution {
    public double pow(double x, int n) {
        if(n == 0)
            return 1;
        if(n<0){
            n = -n;
            x = 1/x;
        }
        return (n%2 == 0) ? pow(x*x, n/2) : x*pow(x*x, n/2);
    }
}

//O(LOGN),O(1)
class Solution {
    public double myPow(double x, int n) {
        double res = 1.0;
        long power = n;
        if(power < 0) power = power * (-1);
        
        while(power > 0){
            if(power % 2 == 1){
                res = res * x;
                power -= 1;
            }
            else{
                x = x*x;
                power /= 2; 

            }

        }
        if(n < 0) res = (double)(1.0) / (double)(res);
         return res;
    }
   
}

class Solution {
    public double myPow(double x, int n) {
        long power = n;
        if(power < 0){
            x = 1/x;
            power = (-1)*power;
        }
        double tempAns = x;
        double result = 1;
        for(long i = power; i > 0; i/=2){
            if((i%2) == 1){
                result = result * tempAns;
            }
            tempAns = tempAns * tempAns;
        }
        
        return result;
        
        
        
    }
}



OTHER_SOLUTIONS

nest myPow
double myPow(double x, int n) {
    if(n<0) return 1/x * myPow(1/x, -(n+1));
    if(n==0) return 1;
    if(n==2) return x*x;
    if(n%2==0) return myPow( myPow(x, n/2), 2);
    else return x*myPow( myPow(x, n/2), 2);
}
double myPow
double myPow(double x, int n) { 
    if(n==0) return 1;
    double t = myPow(x,n/2);
    if(n%2) return n<0 ? 1/x*t*t : x*t*t;
    else return t*t;
}
double x
double myPow(double x, int n) { 
    if(n==0) return 1;
    if(n<0){
        n = -n;
        x = 1/x;
    }
    return n%2==0 ? myPow(x*x, n/2) : x*myPow(x*x, n/2);
}
iterative one
double myPow(double x, int n) { 
    if(n==0) return 1;
    if(n<0) {
        n = -n;
        x = 1/x;
    }
    double ans = 1;
    while(n>0){
        if(n&1) ans *= x;
        x *= x;
        n >>= 1;
    }
    return ans;
}
