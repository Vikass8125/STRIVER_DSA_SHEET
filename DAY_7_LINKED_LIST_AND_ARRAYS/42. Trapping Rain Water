Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

 

Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9
 

Constraints:

n == height.length
1 <= n <= 2 * 104
0 <= height[i] <= 105


MY_SOLUTION
Solution 1: Brute force

Approach: For each index, we have to find the amount of water that can be stored and we have to sum it up.
If we observe carefully the amount the water stored at a particular index is the minimum of maximum elevation to 
the left and right of the index minus the elevation at that index.
public int trap(int[] height) {
  int n = height.length;
  int totalWater = 0;
  for (int k = 0; k < n; ++k) {
    int leftMax = 0;
    for (int i = 0; i <= k - 1; ++i) {
      leftMax = Math.max(leftMax, height[i]);
    }
    int rightMax = 0;
    for (int i = k + 1; i < n; ++i) {
      rightMax = Math.max(rightMax, height[i]);
    }
    int water = Math.min(leftMax, rightMax) - height[k];
    totalWater += (water > 0) ? water : 0;
  }
  return totalWater;
}
=======================================================================
class TUF {
    static int trap(int[] arr) {
        int n = arr.length;
        int waterTrapped = 0;
        for (int i = 0; i < n; i++) {
            int j = i;
            int leftMax = 0, rightMax = 0;
            while (j >= 0) {
                leftMax = Math.max(leftMax, arr[j]);
                j--;
            }
            j = i;
            while (j < n) {
                rightMax = Math.max(rightMax, arr[j]);
                j++;
            }
            waterTrapped += Math.min(leftMax, rightMax) - arr[i];
        }
        return waterTrapped;
    }
==========================================================================
  public int trapBrute(int[] height) {
	int n = height.length;
	if(n <= 2) return 0;
	int sum = 0;
	for(int i = 0; i < n; i++) {
		int j = i, left = Integer.MIN_VALUE, right = Integer.MIN_VALUE;
		while(j >= 0) {
			left = Math.max(left, height[j]);
			j--;
		}
		j = i;
		while(j < n) {
			right = Math.max(right, height[j]);
			j++;
		}
		sum += Math.min(left, right) - height[i];
	}

	return sum;
}


Time Complexity: O(N*N) as for each index we are calculating leftMax and rightMax so it is a nested loop.

Space Complexity: O(1).

======================================================================================================================

Solution 2:Better solution

Intuition: We are taking O(N) for computing leftMax and rightMax at each index. 
The complexity can be boiled down to O(1) if we precompute the leftMax and rightMax at each index.

Approach:Take 2 array prefix and suffix array and precompute the leftMax and rightMax for each index beforehand.
Then use the formula min(prefix[i],suffix[i])-arr[i] to compute water trapped at each index.

class Solution {
    public int trap(int[] height) {
        //BETTER SOLUTION ; T.C -> O(N), S.C -> O(N)
        int len = height.length;
        if(len <= 2) return 0;
        
        int[] leftMax = new int[len];
        int[] rightMax = new int[len];
        
        leftMax[0] = height[0];
        for(int i = 1; i < len ; i++){
            leftMax[i] = Math.max(leftMax[i - 1], height[i]);
        }
        
        rightMax[len - 1] = height[len - 1];
        for(int i = len - 2; i >= 0 ; i--){
            rightMax[i] = Math.max(rightMax[i + 1], height[i]);
        }
        
        
        int waterTapped = 0;
        for(int i = 0; i < len; i++){
            waterTapped += Math.min(leftMax[i], rightMax[i]) - height[i];
        }
        
        return waterTapped;
    }
}
====================================================================
class Solution {
    public int trap(int[] height) {
        int n = height.length;
        if(n<3){
            return 0;
        }
        int leftMax[] = new int[n];
        int rightMax[] = new int[n];
        leftMax[0] = height[0];
        rightMax[n-1] = height[n-1];
        for(int i=1;i<n;i++){
            leftMax[i] = Math.max(leftMax[i-1], height[i]);
            rightMax[n-i-1] = Math.max(rightMax[n-i], height[n-i-1]);
        }
        
        int trappedWater = 0;
        for(int i=0;i<n;i++){
            trappedWater += Math.min(leftMax[i], rightMax[i])-height[i];
        }
        
        return trappedWater;
    }
}
========================================================================
public int trap(int[] height) {
  int n = height.length;
  if (n <= 2) return 0;
  // pre-compute
  int[] leftMax = new int[n];
  int[] rightMax = new int[n];
  leftMax[0] = height[0]; // init
  rightMax[n - 1] = height[n - 1];
  for (int i = 1, j = n - 2; i < n; ++i, --j) {
    leftMax[i] = Math.max(leftMax[i - 1], height[i]);
    rightMax[j] = Math.max(rightMax[j + 1], height[j]);
  }
  // water
  int totalWater = 0;
  for (int k = 1; k < n - 1; ++k) { // do not consider the first and the last places
    int water = Math.min(leftMax[k - 1], rightMax[k + 1]) - height[k];
    totalWater += (water > 0) ? water : 0;
  }
  return totalWater;
}


Time Complexity: O(3*N) as we are traversing through the array only once. 
And O(2*N) for computing prefix and suffix array.

Space Complexity: O(N)+O(N) for prefix and suffix arrays.

==============================================================================================================================================
Solution 3:Optimal Solution(Two pointer approach)

Approach: Take 2 pointer l(left pointer) and r(right pointer) pointing to 0th and (n-1)th index respectively.
Take two variables leftMax and rightMax and initialise it to 0.
If heigh[l] is less than or equal to height[r] then if leftMax is less then height[l] update leftMax to height[l] else add leftMax-height[l] to your 
final answer and move the l pointer to the right i.e l++.If height[r] is less then height[l],then now we are dealing with the right block.
If height[r] is greater then rightMax,then update rightMax to height[r] else add rightMax-height[r] to the final answer.Now move r to the left. 
Repeat theses steps till l and r crosses each other.

Intuition: We need a minimum of leftMax and rightMax.So if we take the case when height[l]<=height[r] we increase l++, so we can surely say that 
there is a block with a height more than height[l] to the right of l.
And for the same reason when height[r]<=height[l] we can surely say that there is a block to the left of r which is at least of height[r]. 
So by traversing these cases and using two pointers approach the time complexity can be decreased without using extra space.

class Solution {
    public int trap(int[] height) {
        
        //OPTIMISED : T.C -> O(N), S.C -> O(1)
        int len = height.length;
        int result = 0;
        
        int left = 0;
        int right = len - 1;
        
        int left_max = 0;
        int right_max = 0;
        
        while(left <= right){
            if(height[left] < height[right]){
                if(height[left] >= left_max){
                    left_max = height[left];
                }
                else{
                    result += left_max - height[left];
                }
                left++;
            }
            else{
                if(height[right] >= right_max){
                    right_max = height[right];
                }
                else{
                    result += right_max - height[right];
                }
                right--;
            }

        }
        return result;
    }
}

==========================================================================
public int trap(int[] height) {
  int n = height.length;
  int lo = 0, hi = n - 1;
  int leftMax = 0, rightMax = 0;
  int water = 0;
  while (lo < hi) {
    // update
    if (height[lo] > leftMax)  leftMax = height[lo];
    if (height[hi] > rightMax) rightMax = height[hi];
    // compute
    if (leftMax < rightMax) { // consider the min
        water += (leftMax - height[lo]); // leftMax >= height[lo]
        ++lo;
    } else {
        water += (rightMax - height[hi]);
        --hi;
    }
  }
  return totalWater;
}


============================================================================
class Solution {
    public int trap(int[] heights) {
        int n = heights.length;
        if(n<3){
            return 0;
        }
        int leftMax = heights[0];
        int rightMax = heights[n-1];
        int l = 1;
        int r = n-2;
        
        int trappedWater = 0;
        while(l<=r){
            if(leftMax<rightMax){
                if(heights[l]>leftMax){
                    leftMax = heights[l];
                } else {
                    trappedWater+=(leftMax-heights[l]);
                }
                l++;
            } else {
                if(heights[r]>rightMax){
                    rightMax = heights[r];
                } else {
                    trappedWater+=(rightMax-heights[r]);
                }
                r--;
            }
        }
        
        return trappedWater;
    }
}


Time Complexity: O(N) because we are using 2 pointer approach.

Space Complexity: O(1) because we are not using anything extra.
