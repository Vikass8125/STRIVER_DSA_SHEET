Given the head of a linked list, remove the nth node from the end of the list and return its head.

 

Example 1:


Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Example 2:

Input: head = [1], n = 1
Output: []
Example 3:

Input: head = [1,2], n = 1
Output: [1]
 

Constraints:

The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz
 
 MY_SOLUTION 
 
 Solution 1: Naive Approach [Traverse 2 times]

Intuition: We can traverse through the Linked List while maintaining a count of nodes, let’s say in the variable count, and then traversing 
for the 2nd time for (n – count) nodes to get to the nth node of the list.

Solution 2: [Efficient] Two pointer Approach

Unlike the above approach, we don’t have to maintain the count value, we can find the nth node just by one traversal by using two pointer approach.

Intuition : 

What if we had to modify the same above approach to work in just one traversal? Let’s see what all information we have here:

We have the flexibility of using two-pointers now.
We know, that the n-th node from the end is the same as (total nodes – n)th node from start.
But, we are not allowed to calculate total nodes, as we can do only one traversal.
What if, one out of the two-pointers is at the nth node from start instead of the end? Will it make anything easier for us?

Yes, with two pointers in hand out of which one is at the n-th node from start, we can just advance both of them till the end simultaneously, once the 
faster reaches the end, the slower will stand at the n-th node from the end.

Approach : 

Take two dummy nodes, who’s next will be pointing to the head.
Take another node to store the head, initially,s a dummy node(start), and the next node will be pointing to the head. The reason why we are using this 
extra dummy node is that there is an edge case. If the node is equal to the length of the LinkedList, then this slow will point to slow’s next→ next.
And we can say our dummy start node will be broken and will be connected to the slow next→ next.
Start traversing until the fast pointer reaches the nth node.

Now start traversing by one step both of the pointers until the fast pointers reach the end.    

When the traversal is done, just do the deleting part. Make slow pointers next to the next of the slow pointer to ignore/disconnect the given node.

Last, return to the next start.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {// 1 =< n <= sz
        // BRUTE FORCE : T.C -> O(N) + O(N)
        /*
        if (head == null) return null;

        ListNode node = getNode(head, n);
        if (node == head) return head.next;

        ListNode nodePrev = getNode(head, n + 1);
        nodePrev.next = node.next;
        return head;
    }

    //return the indexth Node from the tail.
    private ListNode getNode(ListNode head, int index) {
        int length = 0;
        ListNode temp = head;
        while (temp != null) {
            temp = temp.next;
            length++;
        }
        int indexFromHead = length - index;
        temp = head;
        for (int i = 0; i < indexFromHead; i++) {
            temp = temp.next;
        }
        return temp;
        */
        
        //SINGLE PASS : T.C-> O(N)
        ListNode dummy = new ListNode();
        dummy.next = head;
        ListNode fast = dummy;
        ListNode slow = dummy;
        
        for(int i = 1; i <= n; i++){
            fast = fast.next;
        }
        
        while(fast.next != null){
            fast = fast.next;
            slow = slow.next;
        }
        
        slow.next = slow.next.next;
        return dummy.next;
    }
}



Time Complexity: O(N)

Space Complexity: O(1)

==========================================================================================================
ANOTHER_SOLUTION
A one pass solution can be done using pointers. Move one pointer fast --> n+1 places forward, to maintain a gap of n between the 
two pointers and then move both at the same speed. Finally, when the fast pointer reaches the end, the 
slow pointer will be n+1 places behind - just the right spot for it to be able to skip the next node.

Since the question gives that n is valid, not too many checks have to be put in place. Otherwise, this would be necessary.

public ListNode removeNthFromEnd(ListNode head, int n) {
    
    ListNode start = new ListNode(0);
    ListNode slow = start, fast = start;
    slow.next = head;
    
    //Move fast in front so that the gap between slow and fast becomes n
    for(int i=1; i<=n+1; i++)   {
        fast = fast.next;
    }
    //Move fast to the end, maintaining the gap
    while(fast != null) {
        slow = slow.next;
        fast = fast.next;
    }
    //Skip the desired node
    slow.next = slow.next.next;
    return start.next;
}


==========================================================================================================

class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode fast = head, slow = head;
        for (int i = 0; i < n; i++) fast = fast.next;
        if (fast == null) return head.next;
        while (fast.next != null) {
            fast = fast.next;
            slow = slow.next;
        }
        slow.next = slow.next.next;
        return head;
    }
}
==========================================================================================================
Brute Force approach
Code

public ListNode removeNthFromEndBrute(ListNode head, int n) {
	ListNode temp = head;
	int c = 0;
	// count the number of nodes in ll
	while(temp != null) {
		c++;
		temp = temp.next;
	}
	// find remaining
	int t = c - n;
	// if first node is to be deleted
	if(t == 0) {
		head = head.next;
		return head;
	}
	temp = head;
	// move temp by t-1 steps to reach correct node for deleting
	while(t-- > 1) {
		temp = temp.next;
	}

	temp.next = temp.next.next;
	return head;
}





Optimised approach
The optimised approach is using two pointer approach, let's see how:-

Code

public ListNode removeNthFromEnd(ListNode head, int n) {
	if(head == null) return null;
	ListNode slow = head, fast = head;

	for(int i = 1; i <= n; i++)
		fast = fast.next;

	while(fast != null && fast.next != null) {
		slow = slow.next;
		fast = fast.next;
	}

	// if there is a single element and we want to delete that
	if(slow == head && fast == null) {
		head = head.next;
		return head;
	}

	if(slow != null && slow.next != null) {
		slow.next = slow.next.next;
	}
	return head;
}
