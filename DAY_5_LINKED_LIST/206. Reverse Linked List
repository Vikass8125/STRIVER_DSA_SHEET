// https://www.youtube.com/watch?v=ugQ2DVJJroc&ab_channel=AnujBhaiya

Given the head of a singly linked list, reverse the list, and return the reversed list.

 

Example 1:


Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]
Example 2:


Input: head = [1,2]
Output: [2,1]
Example 3:

Input: head = []
Output: []
 

Constraints:

The number of nodes in the list is the range [0, 5000].
-5000 <= Node.val <= 5000
 

Follow up: A linked list can be reversed either iteratively or recursively. Could you implement both?

MY_SOLUTION

Using Recursion

We traverse to the end of the list recursively.

As we reach the end of the list, we make the end node the head. Then receive previous nodes and make them connected to the last one.

At last, we link the second node to the head and the first node to NULL. We return to our new head.

Time Complexity:

We move to the end of the list and achieve our reversed list. Thus, the time complexity is O(N) where N represents the number of nodes.

Space Complexity:

Apart from recursion using stack space, no external storage is used. Thus, space complexity is O(1).


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
        // Recursive
        /*
        if(head == null || head.next == null) return head;
        
        ListNode newHead = reverseList(head.next);
        
        ListNode headNext = head.next;
        headNext.next = head;
        
        head.next = null;
        
        return newHead;
        
        */
        
        // Iterative
        
        if(head == null || head.next == null) return head;
        
        ListNode prev = null;
        
        while(head != null){
            ListNode nextNode = head.next;
            head.next = prev;
            prev = head;
            head = nextNode;
        }
        return prev;
        
        
    }
}


Recursive Approach

class Solution {
    public ListNode reverseList(ListNode head) {
        //Base case
       if(head==null || head.next==null){
           return head;
       }
        //Recursive call
        ListNode newHead=reverseList(head.next);
        head.next.next=head;
        head.next=null;
        return newHead;
    }
}

=================================================================================================================================================
Reverse Linked List: Iterative
We will use three-pointers to traverse through the entire list and interchange links between nodes. 
One pointer to keep track of the current node in the list. The second one is to keep track of the previous node to the current node and change links. 
Lastly, a pointer to keep track of nodes in front of current nodes.


STEP 1:

currrent_p is a pointer to keep track of current nodes. Set it to head.
prev_p is a pointer to keep track of previous nodes. Set it to NULL.
next_p is a pointer to keep track of the next nodes.
STEP 2:

Set next_p to point next node to node pointed by current_p.
Change link between nodes pointed by current_p and prev_p.
Update prev_p to current_p and current_p pointer to next_p.
Perform STEP 2 until current_p reaches the end of the list.

STEP 3:

Set head as prev_p. This makes the head point at the last node.

Iterative Approach

class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode curr=head;
        ListNode prev=null;
        while(curr!=null){
            ListNode temp=curr.next;
            curr.next=prev;
            prev=curr;
            curr=temp;
        }
        return prev;
    }
}


Time Complexity:

Since we are iterating only once through the list and achieving reversed list. 
Thus, the time complexity is O(N) where N is the number of nodes present in the list.

Space Complexity:

To perform given tasks, no external spaces are used except three-pointers. So, space complexity is O(1).
