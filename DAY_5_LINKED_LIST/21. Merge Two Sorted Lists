You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.

 

Example 1:


Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]
Example 2:

Input: list1 = [], list2 = []
Output: []
Example 3:

Input: list1 = [], list2 = [0]
Output: [0]
 

Constraints:

The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both list1 and list2 are sorted in non-decreasing order.

MY_SOLUTION
Solution 1: Using an externally linked list to store answers.

Approach :

Step 1: Create a new dummy node. It will have the value 0 and will point to NULL respectively. 
This will be the head of the new list. Another pointer to keep track of traversals in the new list.

Step 2:  Find the smallest among two nodes pointed by the head pointer of both input lists, and store that data in a new list created.

Step 3: Move the head pointer to the next node of the list whose value is stored in the new list.

Step 4: Repeat the above steps till any one of the head pointers stores NULL. Copy remaining nodes of the list whose head is not NULL in the new list.



Time Complexity: O(N+M).

Let N be the number of nodes in list l1 and M be the number of nodes in list l2. We have to iterate through both lists. 
So, the total time complexity is O(N+M).

Space Complexity: O(N+M).

We are creating another linked list that contains the (N+M) number of nodes in the list. So, space complexity is O(N+M).

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        // USING EXTRA SPACE : T.C -> O(M + N), S.C -> O(M + N)
        /*
        if(list1 == null) return list2;
        if(list2 == null) return list1;
        
        ListNode dummyHead = new ListNode();
        ListNode node = dummyHead;
        
        while(list1 != null && list2 != null){
            if(list1.val < list2.val){
                node.next = new ListNode(list1.val);
                list1 = list1.next;
            }
            else{
                node.next = new ListNode(list2.val);
                list2 = list2.next;
            }
            node = node.next;
        }
        
        if(list1 == null) node.next = list2;
        
        if(list2 == null) node.next = list1;
        
        return dummyHead.next;
        */
        
        
       }
     }  
======================================================================================================================================

Solution 2: Inplace method without using extra space.

The idea to do it without extra space is to play around with the next pointers of nodes in the two input lists and arrange them in a fashion such that 
all nodes are linked in increasing order of values.
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
// WITHOUT EXTRA SPACE : T.C -> O(M + N)
        if(list1 == null) return list2;
        if(list2 == null) return list1;
        
        ListNode dummyHead = new ListNode();
        ListNode node = dummyHead;
        
        while(list1 != null && list2 != null){
            if(list1.val < list2.val){
                node.next = list1;
                list1 = list1.next;
                node = node.next;
            }
            else{
                node.next = list2;
                list2 = list2.next;
                node = node.next;
            }
        }
        
        node.next = (list1 != null) ? list1 : list2;
        return dummyHead.next;
    }
}


Time Complexity :

We are still traversing both lists entirely in the worst-case scenario. 
So, it remains the same as O(N+M) where N is the number of nodes in list 1 and M is the number of nodes in list 2.

Space Complexity :

We are using the same lists just changing links to create our desired list. So no extra space is used. Hence, its space complexity is O(1). 


======================================================================================================================================

ANOTHER_SOLUTION

//RECURSIVE

public ListNode mergeTwoLists(ListNode l1, ListNode l2){
		if(l1 == null) return l2;
		if(l2 == null) return l1;
		if(l1.val < l2.val){
			l1.next = mergeTwoLists(l1.next, l2);
			return l1;
		} else{
			l2.next = mergeTwoLists(l1, l2.next);
			return l2;
		}
}


========================================================================
public class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if(l1 == null){
            return l2;
        }
        if(l2 == null){
            return l1;
        }
        
        ListNode mergeHead;
        if(l1.val < l2.val){
            mergeHead = l1;
            mergeHead.next = mergeTwoLists(l1.next, l2);
        }
        else{
            mergeHead = l2;
            mergeHead.next = mergeTwoLists(l1, l2.next);
        }
        return mergeHead;
    }
}

===================================================================================================================================
1. Iterative- using extra space

// iterative using extra space
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode dummy=new ListNode();
        ListNode temp=dummy;
        
        while(l1!=null && l2!=null){
            if(l1.val<l2.val){
                temp.next=new ListNode(l1.val);
                l1=l1.next;
            }else{
                temp.next=new ListNode(l2.val);
                l2=l2.next;
            }
            temp=temp.next;
        }
        
        if(l1==null){
            temp.next=l2;
        }else if(l2==null) {
            temp.next=l1;
        }
        
        return dummy.next;
    }
}
2. Iterative- without using extra space

// iterative without extra space iterative
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode dummy=new ListNode();
        ListNode temp=dummy;
        
        while(l1!=null && l2!=null){
            if(l1.val<l2.val){
                temp.next=l1;
                l1=l1.next;
            }else{
                temp.next=l2;
                l2=l2.next;
            }
            temp=temp.next;
        }
        
        if(l1==null){
            temp.next=l2;
        }else if(l2==null) {
            temp.next=l1;
        }
        
        return dummy.next;
    }
}
3. Recursive- with extra space

// recursive using extra space
class Solution {
    private void merge(ListNode l1, ListNode l2, ListNode temp){
        if(l1!=null && l2!=null){
            if(l1.val<l2.val){
                temp.next=new ListNode(l1.val);
                 merge(l1.next,l2,temp.next);
            }else{
                temp.next=new ListNode(l2.val);
                merge(l1,l2.next,temp.next);
            }
        }
        
        if(l1==null){
            temp.next=l2;
        }else if(l2==null) {
            temp.next=l1;
        }
        
    }
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode dummy=new ListNode();
        ListNode temp=dummy;
        merge(l1,l2,temp);
        
        return dummy.next;
    }
}
4. Recursive- without extra space

// Recursive without extra space
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode res=null;
        if(l1==null){
            return l2;
        }
        
        if(l2==null){
            return l1;
        }
        
        if(l1.val<l2.val){
            res=l1;
            // merge happens here
            res.next=mergeTwoLists(l1.next,l2);
        }else{
            res=l2;
            res.next=mergeTwoLists(l1,l2.next);
        }
        
        return res;
    }
}
