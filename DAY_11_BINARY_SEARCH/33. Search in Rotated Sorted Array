There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) 
such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). 
For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1
 

Constraints:

1 <= nums.length <= 5000
-104 <= nums[i] <= 104
All values of nums are unique.
nums is an ascending array that is possibly rotated.
-104 <= target <= 104

MY_SOLUTION

Solution 1: Using Linear Search

Approach :

We will iterate through the array completely. While iterating, we have to check if we have found the target element in the array.
If we find it, we will return its index. If we iterate completely and still do not find an element in the array.
This indicates the target is not present and hence we return -1 as mentioned in the question.

Code:

import java.util.*;
public class Main {
    static int search(int arr[],int target) {
    for(int i=0;i<arr.length;i++)
    {
        if(arr[i]==target)
            return i;
    }
    return -1;
}
    public static void main(String args[]) {
    int arr[] = {4,5,6,7,0,1,2,3};
    int target = 3;
    System.out.println("The index in which the number is present is "+search(arr,target));
    }
}

    
    
Time Complexity : O(N)

Reason: We have to iterate through the entire array to check if the target is present in the array.

Space Complexity: O(1)

Reason: We have not used any extra data structures, this makes space complexity, even in the worst case as O(1).

==============================================================================================================================

Solution 2: Using Binary Search

Intuition :

It is mentioned that the array given is sorted but in a rotated manner. So, we can divide a given array into two parts that are sorted. 
This gives us hints to use binary search. We can visualize a given array to be composed of two sorted arrays.


Approach :

We divide the array into parts. It is done using two pointers, low and high, and dividing the range between them by 2. 
This gives the midpoint of the range. Check if the target is present in the midpoint, calculated before, of the array. 
If not present, check if the left half of the array is sorted. 
This implies that binary search can be applied in the left half of the array provided the target lies between the value range. 
Else check into the right half of the array. Repeat the above steps until low <= high.
If low > high, indicates we have searched array and target is not present hence return -1. 
Thus, it makes search operations less as we check range first then perform searching in possible ranges which may have target value.

Code:

import java.util.*;
public class Main {
    static int search(int arr[], int target) {
        int low = 0, high = arr.length - 1; //<---step 1

        while (low <= high) { //<--- step 2
            int mid = (low + high) >> 1; //<----step 3
            if (arr[mid] == target)
                return mid; // <---step 4

            if (arr[low] <= arr[mid]) { //<---step 5
                if (arr[low] <= target && arr[mid] >= target)
                    high = mid - 1; //<---step 6 
                else
                    low = mid + 1; //<---step 7
            } else { //<---step 7
                if (arr[mid] <= target && target <= arr[high])
                    low = mid + 1;
                else
                    high = mid - 1;
            }
        }
        return -1; //<---step 8
    }
    public static void main(String args[]) {
        int arr[] = {4,5,6,7,0,1,2,3};
        int target = 3;
        System.out.println("The index in which the number is present is " + search(arr, target));
    }
}

Output: The index in which the target is present is 7

Time Complexity: O(log(N))

Reason: We are performing a binary search, this turns time complexity to O(log(N)) where N is the size of the array.

Space Complexity: O(1)

Reason: We do not use any extra data structure, this turns space complexity to O(1).

====================================================================================================

Explanation
My solutions use binary search guided by the following thoughts:

Remember the array is sorted, except it might drop at one point.

If nums[0] <= nums[i], then nums[0..i] is sorted (in case of "==" it's just one element, and in case of "<" there must be a drop elsewhere). 
So we should keep searching in nums[0..i] if the target lies in this sorted range, i.e., if nums[0] <= target <= nums[i].

If nums[i] < nums[0], then nums[0..i] contains a drop, and thus nums[i+1..end] is sorted and lies strictly between nums[i] and nums[0]. 
So we should keep searching in nums[0..i] if the target doesn't lie strictly between them, i.e., if target <= nums[i] < nums[0] or nums[i] < nums[0] <= target

Those three cases look cyclic:

    nums[0] <= target <= nums[i]
               target <= nums[i] < nums[0]
                         nums[i] < nums[0] <= target
So I have the three checks (nums[0] <= target), (target <= nums[i]) and (nums[i] < nums[0]), and I want to know whether exactly two of them are true. 
They can't all be true or all be false (check it), so I just need to distinguish between "two true" and "one true". 
Parity is enough for that, so instead of adding them I xor them, which is a bit shorter and particularly helpful in Java and Ruby,
because those don't let me add booleans but do let me xor them.

(Actually while developing this I thought of permutations of nums[0], target and nums[i] and the permutation parity and saw those three checks 
as representing inversions, but I had trouble putting that into words and now find the above explanation much better.
But it helped me get there, so I wanted to mention it here.)

public int search(int[] nums, int target) {
    int lo = 0, hi = nums.length - 1;
    while (lo < hi) {
        int mid = (lo + hi) / 2;
        if ((nums[0] > target) ^ (nums[0] > nums[mid]) ^ (target > nums[mid]))
            lo = mid + 1;
        else
            hi = mid;
    }
    return lo == hi && nums[lo] == target ? lo : -1;
}
