Problem Statement
You are given two positive integers N and M. You have to find the Nth root of M i.e. M(1/N).
Note:
N'th root of an integer M is a real number, which when raised to the power N gives M as a result.

N'th root of the M should be correct up to 6 decimal places.
Input Format:
The first line of the input contains an integer T denoting the number of test cases.

The first and only line of each test case consists of two space-separated integers N and M.
Output Format:
For each test case, print a real number with precision till 6 decimal places that denote the Nth root of M in a separate line.
Note:
You don't have to print anything, it has already been taken care of. Just Implement the given function.
Constraints:
1<= T <= 10^3
1<= N <= 300
1<= M <= 10^15

Time Limit: 1 sec.
Sample Input 1:
1
3 27
Sample Output 1:
3.000000
Explanation For Sample Input 1:
3rd Root of 27 is 3.000000, as (3.000000)^3 is equal to 27.
Sample Input 2:
1
4 69
Sample Output 2:
2.882121

Problem Statement: Given two numbers N and M, find the Nth root of M.

The nth root of a number M is defined as a number X when raised to the power N equals M.

Example 1:

Input: N=3 M=27

Output: 3

Explanation: The cube root of 27 is 3.
Example 2:

Input: N=2 M=16

Output: 4

Explanation: The square root of 16 is 4
Example 3:

Input: N=5 M=243

Output: 3

Explaination: The 5th root of 243 is 3

MY-SOLUTION

Solution:

Nth root of a number M is defined as a number X when raised to the power N equals to M.

Approach: In order to find the Nth root of any given integer we are gonna use Binary Search.

Step 1: Take low and high. Low will be equal to 1 and high will be M. 
We will take the mid of low and high such that the searching space is reduced using low + high / 2.

Step 2: Make a separate function to multiply mid N times.

Step 3: Run the while loop till (high – low > eps). Take eps as 1e-6, since we have to find answers to 6 decimal places.

Step 4:  If the mid is less than M, then we will reduce search space to low and mid. 
Else, if it is greater than M then search space will be reduced to mid and high.

Step 5: After the loop breaks we will have our answer as low or high.

We have to find the answer to 6 decimals. So, we will have a double 1e-6. We will run the while loop till (high – low > eps). 
When we will come out of the loop we will have the answer which will be equal to low as well as high.


public class Solution {
    public static double findNthRootOfM(int n, long m) {
    	double low = 1;
        double high = m ;
        double eps = 1e-8; 
        
        while((high - low) > eps) {
            double mid = (high + low) / 2.0; 
            if(multiply(mid, n) < (double)m) {
                low = mid; 
            }
            else {
                high = mid; 
            }
        }
        return high;
    }
    
    public static double multiply(double number, int n){
        double ans = 1.0;
        for(int i = 1;i<=n;i++) {
            ans = ans * number;
        }
        return ans; 
    }
}

Time Complexity: N x log(M x 10^d)

Space Complexity: O(1)

===============================================

Newton Raphson Method
Let’s say X is the Nth root of M.
X = M ^ (1 / N)
The above equation can be written as follows:
X ^ N = M
X ^ N - M = 0
Let’s assume F(X) = X ^ N - M
Now we need to find the root of this equation, for which we can use the Newton Raphson method to solve this equation.
In Newton's Raphson method we start with an initial guess value of X (any random initial value is fine) and 
iterate through a process that takes us towards the actual solution of the equation.
Let’s say X(0) is the initial guess value.
The relationship between the current value of solution value x(k) and the solution of the equation in the next iteration X(K + 1) is as follows:
X(K + 1) = X(K) - F(X(K)) / F'(X(K)), where F'(X(K)) denotes the value derivative of F(X) at X = X(K).                                    ....(1)
In the given case F'(X(k)) = N * X(K) ^ N - 1.
So equation (1) can be written as follows:
X(K + 1) = X(K) - (X(K) ^ N - M) / (N * X(K) ^ N - 1)
X(K + 1) = (X(K) * (N * X(K) ^ N - 1) - X(K) ^ N + M) / (N * X(K) ^ N - 1))
X(K + 1) = (X(K) ^ N * (N - 1) + M) / (N * X(K) ^ N - 1)
So using the above formula to calculate new possible solution value X. Till the gap between X(K + 1) and X(K) become less than 10-7.
When this condition is reached we get our required solution.
Time Complexity
O(log(M) * log(N)), where N and M are given integers.

 

As we are approaching the correct solution from the guessed solution, it will take order of O(log(M)) time 
in the worst case and for calculating X ^ N takes O(log(N)) order of time.

Space Complexity
O(1)

 

As we are using constant extra space.
/*
    Time Complexity : O(log(M) * log(N))
    Space Complexity : O(1),

    where N and M are given integers.
*/

public class Solution {

    public static double findNthRootOfM(int n, long m) {

        // Variable to store maximum possible error in order
        // to obtain the precision of 10^(-6) in the answer.
        double error = 1e-7;
        
        // Difference between the current answer, and the answer
        // in next iteration, which we take as big as possible initially.
        double diff = 1e18;

        // Guessed answer value
        double xk = 2;

        // We keep on finding the precise answer till the difference between
        // answer of two consecutive iteration become less than 10^(-7).
        while (diff > error) {

            // Answer value in the next iteration.
            double xk_1 = (Math.pow(xk, n) * (n - 1) + m) / (n * Math.pow(xk, n - 1));
            
            // Difference of answer in consecutive states updated.
            diff = Math.abs(xk - xk_1);
            
            // Updating the current answer with the answer of next iteration.
            xk = xk_1;
        }

        // Returning the nthRootOfM with precision upto 6 decimal places
        // which is xk.
        return xk;
    }

}
