Given a matrix of integers A of size N x M in which each row is sorted.

Find an return the overall median of the matrix A.

Note: No extra memory is allowed.

Note: Rows are numbered from top to bottom and columns are numbered from left to right.




Input Format

The first and only argument given is the integer matrix A.
Output Format

Return the overall median of the matrix A.
Constraints

1 <= N, M <= 10^5
1 <= N*M  <= 10^6
1 <= A[i] <= 10^9
N*M is odd
For Example

Input 1:
    A = [   [1, 3, 5],
            [2, 6, 9],
            [3, 6, 9]   ]
Output 1:
    5
Explanation 1:
    A = [1, 2, 3, 3, 5, 6, 6, 9, 9]
    Median is 5. So, we return 5.

Input 2:
    A = [   [5, 17, 100]    ]
Output 2:
    17 ``` Matrix=
```

=====================
Problem Statement: Given a row-wise sorted matrix of size r*c, where r is no. of rows and c is no. of columns, find the median in the given matrix.

Assume – r*c is odd

Examples:

Example 1:
Input: 
r = 3 , c = 3
1 4 9 
2 5 6
3 8 7
Output: Median = 5
Explanation: If we find the linear sorted array, the array becomes 1 2 3 4 5 6 7 8 9
So, median = 5

Example 2:
Input: 
r = 3 , c = 3
1 3 8
2 3 4
1 2 5
Output: Median = 3
Explanation: If we find the linear sorted array, the array becomes 1 1 2 2 3 3 4 5 7 8
So, median = 3
Solution
Disclaimer: Don’t jump directly to the solution, try it out yourself first.

MY_SOLUTION
// https://takeuforward.org/data-structure/median-of-row-wise-sorted-matrix/
 
Solution 1:

Approach 1: Brute Force Approach

The approach is very simple, just fill all elements in a linear array sort the array using the sort function, and
then find the middle value (Median). 

For Eg,

For the given matrix

1 3 8

2 3 4

1 2 5

We find the sorted linear array as 1 1 2 2 3 3 4 5 8

Now, the middle element of the array is 3.  

import java.util.*;
public class TUF {
  // Function to find median of row wise sorted matrix
  public static int Findmedian(int[][] arr, int row, int col) {
    int[] median = new int[row * col];
    int index = 0;
    for (int i = 0; i < row; i++) {
      for (int j = 0; j < col; j++) {
        median[index] = arr[i][j];
        index++;
      }
    }
    return median[(row * col) / 2];
  }
  public static void main(String args[]) {
    int row = 3, col = 3;
    int[][] arr = {{1, 3, 8},
                   {2, 3, 4},
                   {1, 2, 5}};
                   
    System.out.println("The median of the row-wise sorted matrix is: "+
    Findmedian(arr, row, col));
 
  }
}
Output: The median of the row-wise sorted matrix is: 3

Time Complexity: O(row*col log(row*col)) for sorting the array where r*c denotes the number of elements in the linear array.

Space Complexity: O(row*col)  for storing elements in the linear array

Approach 2: Efficient Approach (Using Binary Search)

Step 1: Find the minimum and maximum element in the given array. By just traversing the first column, we find the minimum element and by just traversing the last column, we find the maximum element.

Step 2: Now find the middle element of the array one by one and check in the matrix how many elements are present in the matrix.

Three cases can occur:-

If count ==  (r*c+1)/2 , so it may be the answer still we mark max as mid since we are not referring indices , we are referring the elements and 5 elements can be smaller than 6 also and 7 also , so to confirm we mark max as mid.
If count<(r*c+1)/2 , we mark  min as mid+1 since curr element or elements before it cannot be the answer.
If count>(r*c+1)/2 , we mark max as mid , since elements after this can only be the  answer now.

public class Solution {
    public int findMedian(int[][] A) {
        int low = 1;
        int high = 1000000000;
        int row = A.length;
        int col = A[0].length;
        
        while(low <= high){
            int mid = (low + high) >> 1;
            int count = 0;
            
            for(int i = 0; i < row; i++){
                count += countSmallerEqualMid(A[i], mid, col);
            }
            if(count <= (row*col)/2){
                low = mid + 1;
            }
            else{
                high = mid - 1;
            }
           
        }
         
            return low;
    }
    
    public int countSmallerEqualMid(int[] A,int mid, int n){
        int low = 0, high = n - 1;
        
        while(low <= high){
            int md = (low + high) >> 1;
            if(A[md] <= mid){
                low = md + 1;
            }
            else{
                high = md - 1;
            }
        }
        return low;   
    }
}



Time Complexity: O(row*log col) since the upper bound function takes log c time.

Space Complexity: O(1) since no extra space is required.
======================================================================
HINT:
We cannot use extra memory, so we can’t actually store all elements in an array and sort the array.
But since, rows are sorted it must be of some use, right?

Note that in a row you can binary search to find how many elements are smaller than a value X in O(log M).

SOLUTION:

We cannot use extra memory, so we can’t actually store all elements in an array and sort the array.
But since, rows are sorted it must be of some use, right?

Note that in a row you can binary search to find how many elements are smaller than a value X in O(log M).
This is the base of our solution.

Say k = N*M/2. We need to find (k + 1)^th smallest element.
We can use binary search on answer. In O(N log M), we can count how many elements are smaller than X in the matrix.

So, we use binary search on interval [1, INT_MAX]. So, total complexity is O(30 * N log M).

Note:
This problem can be solve by using min-heap, but extra memory is not allowed.



public class Solution {
    public int findMedian(int[][] A) {
        
        int n = A.length;
        int m = A[0].length;
        
        
        
        int min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;
        for( int i = 0 ; i < n ; i++ ){
            for( int j = 0 ; j < m ; j++ ){
                min = Math.min(min,A[i][j]);
                max = Math.max(max,A[i][j]);
            }
        }
        
        int start = min ,end = max ;
        int mid = 0, middle = (n*m+1)/2;
        
        while( start <= end ){
            // System.out.println( " start = " + start + " end = " + end );
            mid = (start+end)/2;
            // System.out.println( " mid = " + mid + " middle = " + middle );
            int count = check(A,mid);
            // System.out.println( " count = " + count );
            if( count == middle ){
                break;
            }
            else if( count < middle ){
                // System.out.println( " start changed ");
                start = mid+1;
            }
            else{
                // System.out.println( " end changed ");
                end = mid-1;
            }
        }
        // return mid;
        //System.out.println( mid );
        return closest(A,mid);
        
    }
    
    private int closest( int[][] A, int mid ){
        
        int min = Integer.MAX_VALUE;
        int num = mid;
        for( int i = 0 ; i < A.length ; i++ ){
            for( int j = 0 ; j < A[0].length ; j++ ){
                if( mid-A[i][j] >= 0 && mid-A[i][j] < min ){
                    min = mid-A[i][j];
                    num = A[i][j];
                }
            }
        }
        return num;
    }
    
    private int check( int[][] A, int mid ){
        int count = 0 ;
        int n = A.length , m = A[0].length;
        int middle = (n*m+1)/2;
        int equal = 0;
        for( int i = 0 ; i < A.length ; i++ ){
            for( int j = 0 ; j < A[0].length ; j++ ){
                if( A[i][j] < mid ){
                    count++;
                }
                if( A[i][j] == mid ){
                    equal++;
                }
            }
        }
        
        if( count < middle && count+equal >= middle ){
            return middle;
        }
        return count+equal;
        
    }
}


===============================
public class Solution {
    public int findMedian(int[][] A) {
        int low =1;int high = (int)1e9;
        int n = A.length,m=A[0].length;
        while(low<=high){
            int mid = (low+high)/2;
            int count =0;
            for(int i=0;i<n;i++){
                count += BinarySearch(A[i],mid);
            }
            if(count<=(n*m)/2) low = mid+1;
            else high = mid-1;
        }
        return low;
        
        
    }
    public int BinarySearch(int[] arr,int target){
        int low =0;int high = arr.length-1;
        
        while(low<=high){
            int mid = (low+high)/2;
            if(arr[mid]>target) high = mid-1;
            else low = mid+1;
        }
        return low;
        
        
        
    }
    
    
    
    
    
}

==================================
public class Solution {

    public int countSmallerThanEqualToMid(int arr[], int mid){
        int l = 0;
        int r = arr.length -1;
        while(l <= r){
            int md = (l + r) >> 1;
            if(arr[md] <= mid){
                l = md +1;
            } else{
                r = md - 1;
            }
        }
        return l;
    }

    public int findMedian(int[][] arr) {

        int n = arr.length;
        int m = arr[0].length;
        int l = 1;
        int r = (int)1e9;
        while(l <= r){
            int mid = (l + r) >> 1;
            int cnt = 0;    // <=mid
            for(int i =0;i<n;i++){
                cnt += countSmallerThanEqualToMid(arr[i], mid);
            }
            if(cnt <= (n * m) / 2){
                l = mid + 1;
            } else{
                r = mid - 1;
            }
        }
        return l;


    }
}

