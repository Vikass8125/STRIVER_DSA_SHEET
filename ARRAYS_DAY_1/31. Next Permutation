A permutation of an array of integers is an arrangement of its members into a sequence or linear order.

For example, for arr = [1,2,3], the following are considered permutations of arr: [1,2,3], [1,3,2], [3,1,2], [2,3,1].
The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).

For example, the next permutation of arr = [1,2,3] is [1,3,2].
Similarly, the next permutation of arr = [2,3,1] is [3,1,2].
While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.
Given an array of integers nums, find the next permutation of nums.

The replacement must be in place and use only constant extra memory.

 

Example 1:

Input: nums = [1,2,3]
Output: [1,3,2]
Example 2:

Input: nums = [3,2,1]
Output: [1,2,3]
Example 3:

Input: nums = [1,1,5]
Output: [1,5,1]
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 100


BRUTE FORCE 
FIND ALL THE POSSIBLE COMBIBNATIONS
T.C -> O(N!)

OPTIMISED

Pick a larger number from the lower digit and swap it with the higher digit smaller number.

How to find the permutation which is just larger than the given number?
The increase should be as small as possible.

Take a example, [3,2,1] which is decreasing order, there is no next permutation, it is already stable and cannot get larger.

Like [1,5,2,4,3,2], how can it be just larger than the given number?

Scanning from right to left, find the first number which is smaller than the right digit, and swap it to the lower digit;
For example, 1 5 (2) 4 3 2, the 2 in the middle is the found one.

Scanning from right to left, searching for the first number which is larger than it, and swap them.
For example, 1 5 (2) 4 (3) 2, after swap: 1 5 (3) 4 (2) 2.

However, it's not over yet!

The magnitude of the increase can be made smaller, the 3rd digit from right has become slightly larger, and the last three can be made smaller.

The last three digits are definitely decreasing, and they are flipped to become [1,5,3,2,2,4], which is what is required.


class Solution {
    public void nextPermutation(int[] nums) {
        
        if(nums.length <= 1) return;
        
        int last = nums.length - 2;
        while(last >= 0 && nums[last] >= nums[last + 1]){
            last--;
        }
        if(last >= 0){
            int index = nums.length - 1;
            while(index >= 0 && nums[index] <= nums[last]){
                index--;
            }
            swap(nums,last,index);
        }
        reverse(nums, last + 1);
        
    }
    
    static void swap(int[] nums, int first, int last){
        int temp = nums[first];
        nums[first] = nums[last];
        nums[last] = temp;
    }
    
    static  void reverse(int[] nums, int index){
        int last = nums.length - 1;
        while(index <= last){
            swap(nums,index,last);
            index++;
            last--;
        }
    }
}
