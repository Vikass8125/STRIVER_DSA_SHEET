Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:


 

Example 1:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
Example 2:

Input: numRows = 1
Output: [[1]]
 

Constraints:

1 <= numRows <= 30



SOLUTIONS


This solution mimics how you would fill out Pascals triangle by hand, which is why it is intuitive.

Start by creating the first row of just 1
On each iteration, always add the first 1 and ending 1 separately from the middle numbers
The middle numbers are just index j-1 and j from the previous row
class Solution {
  public List<List<Integer>> generate(int numRows) {
    List<List<Integer>> result = new ArrayList<>();
    if (numRows == 0) return result;

    result.add(new ArrayList<>(Arrays.asList(1))); // seed first row

    for (int i = 1; i < numRows; i++) { // starting from second row because we seeded the first
      List<Integer> row = new ArrayList<>();
      row.add(1); // add first 1 in each row
	  
      for (int j = 1; j < i; j++) {
        int left = result.get(i-1).get(j-1);
        int right = result.get(i-1).get(j);
        row.add(left + right); 
      }
	  
      row.add(1); // add last 1 to each row
      result.add(row);
    }

    return result;
  }
}

ANOTHE_SOLUTION

class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> result = new ArrayList<>();
        
        for(int i = 0; i < numRows; i++){
            
            List<Integer> ans = new ArrayList<>();
            for(int j = 0 ; j < i+1; j++){
                if(j==0 || j==i){
                    ans.add(1);
                }
                else{
                    int left = result.get(i-1).get(j-1);
                    int right = result.get(i-1).get(j);
                    ans.add(left+right);
                }
            }
            result.add(ans);
        }
        
        return result;
        
    }
}
