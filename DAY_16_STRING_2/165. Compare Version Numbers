Given two version numbers, version1 and version2, compare them.

Version numbers consist of one or more revisions joined by a dot '.'. Each revision consists of digits and may contain leading zeros. 
Every revision contains at least one character. 
Revisions are 0-indexed from left to right, with the leftmost revision being revision 0, the next revision being revision 1, and so on.
For example 2.5.33 and 0.1 are valid version numbers.

To compare version numbers, compare their revisions in left-to-right order. Revisions are compared using their integer value ignoring any leading zeros. 
This means that revisions 1 and 001 are considered equal. If a version number does not specify a revision at an index, then treat the revision as 0.
For example, version 1.0 is less than version 1.1 because their revision 0s are the same, but their revision 1s are 0 and 1 respectively, and 0 < 1.

Return the following:

If version1 < version2, return -1.
If version1 > version2, return 1.
Otherwise, return 0.
 

Example 1:

Input: version1 = "1.01", version2 = "1.001"
Output: 0
Explanation: Ignoring leading zeroes, both "01" and "001" represent the same integer "1".
Example 2:

Input: version1 = "1.0", version2 = "1.0.0"
Output: 0
Explanation: version1 does not specify revision 2, which means it is treated as "0".
Example 3:

Input: version1 = "0.1", version2 = "1.1"
Output: -1
Explanation: version1's revision 0 is "0", while version2's revision 0 is "1". 0 < 1, so version1 < version2.
 

Constraints:

1 <= version1.length, version2.length <= 500
version1 and version2 only contain digits and '.'.
version1 and version2 are valid version numbers.
All the given revisions in version1 and version2 can be stored in a 32-bit integer.


MY_SOLUTION

Approach: It is not possible to compare them directly because of the dot, but the versions can compare numeric part wise and then the latest version can be found. 
Traverse through strings and separate numeric parts and compare them. 
If equal, then the next numeric part is compared and so on until they differ, otherwise flag them as equal. 

Implement a method to compare the two versions. If there are more than two versions, then the below versionCompare method can be used as a compare method 
of sort method, which will sort all versions according to the specified comparison.

Implementation:


// Java program to compare two version number
import java.util.*;
 
class GFG {
 
    // Method to compare two versions.
    // Returns 1 if v2 is
    // smaller, -1 if v1 is smaller, 0 if equal
    static int versionCompare(String v1, String v2)
    {
        // vnum stores each numeric part of version
        int vnum1 = 0, vnum2 = 0;
 
        // loop until both String are processed
        for (int i = 0, j = 0; (i < v1.length()
                                || j < v2.length());) {
            // Storing numeric part of
            // version 1 in vnum1
            while (i < v1.length()
                   && v1.charAt(i) != '.') {
                vnum1 = vnum1 * 10
                        + (v1.charAt(i) - '0');
                i++;
            }
 
            // storing numeric part
            // of version 2 in vnum2
            while (j < v2.length()
                   && v2.charAt(j) != '.') {
                vnum2 = vnum2 * 10
                        + (v2.charAt(j) - '0');
                j++;
            }
 
            if (vnum1 > vnum2)
                return 1;
            if (vnum2 > vnum1)
                return -1;
 
            // if equal, reset variables and
            // go for next numeric part
            vnum1 = vnum2 = 0;
            i++;
            j++;
        }
        return 0;
    }
 
    // Driver method to check above
    // comparison function
    public static void main(String[] args)
    {
        String version1 = "1.0.3";
        String version2 = "1.0.7";
 
        if (versionCompare(version1, version2) < 0)
            System.out.println(version1 + " is smaller");
        else if (versionCompare(version1, version2) > 0)
            System.out.println(version2 + " is smaller");
        else
            System.out.println("Both version are equal");
    }
}
 

Output
1.0.3 is smaller
Complexity Analysis:  

Time Complexity: O(n), where n is the length of the string. 
Only one traversal of the string is needed.
Auxiliary space: O(1). 
As no extra space is needed.




=========================================================

Iterative Approach
First of all, we will delete the zeros from the end of both the strings. For example: Convert 1.0.0 to 1, and  2.2.0 to 2.2 etc.

 

Now, the idea is to use an iterative approach to compare both strings.

 

We will use four-pointers start1,end1 (pointing to version A) and start2,end2 (pointing to version B) all initialized to 0. We will move end1 to the first dot to the right of start1 ( or the end of the string if no such dot exists) and we will move end2 to the first dot to the right of start2 ( or the end of the string if no such dot exists) now If :

 

end1 > end2
Version A is the latest
end2 > end1 
Version B is the latest
end2 = end1
In this case, we will compare both the strings from their respective start points and endpoints and output the result of the comparison. If both the strings are equal we will move start1 to end1 and start2 to end2 and will do the same process iteratively.
 

If we reach the end of both the strings without terminating this means that both the strings are equal and we will return 0 in this case.

Time Complexity
O(N + M), where M and N are the lengths of the string A and B respectively.

 

In the worst-case, all the characters of both strings will be iterated so the overall time complexity will be   O(N + M)

Space Complexity
O(1).

 

In the worst case, constant space is required.

/*
    Time Complexity: O(N + M)
    Space complexity: O(1)
  
    where N and M are lengths of string A and B respectively
*/

public class Solution 
{
    public static int compareVersions(String a, String b) 
    {

        // Removing zeros from end of both strings
        a = removeZerosFromEnd(a);
        b = removeZerosFromEnd(b);

        // Initialising the four pointers
        int start1 = 0, start2 = 0, end1 = 0, end2 = 0;

        // Traversing both strings
        while (true) 
        {

            // Finding first dot to the right of start1 in string a
            while (end1 < a.length() && a.charAt(end1) != '.')
            {
                end1++;

            }

            // Finding first dot to the right of start2 in string b
            while (end2 < b.length() && b.charAt(end2) != '.') 
            {
                end2++;
            }

            // Finding the greater one among end1 and end2
            if (end1 > end2) 
            {
                return 1;
            } 
            else if (end1 < end2) 
            {
                return -1;
            }

            // Comparing both the strings character by character
            for (int i = start1; i < end1; i++) 
            {
                if (a.charAt(i) > b.charAt(i)) 
                {
                    return 1;
                } 
                else if (b.charAt(i) > a.charAt(i))
                {
                    return -1;
                }

            }

            // Check if we reached end of both strings
            if (end1 == a.length() && end2 == b.length()) 
            {
                return 0;
            }

            // Check if we reached end of string a
            if (end1 == a.length()) 
            {
                return -1;
            }

            // Check if we reached end of string b
            if (end2 == b.length()) 
            {
                return 1;
            }
            
            // Updating values of all the four pointers
            start1 = end1;
            start2 = end2;
            end1++;
            end2++;

        }
    }

    // Function to remove zeros from end
    private static String removeZerosFromEnd(String a) 
    {

        // First initialising answer as complete string then removing zeros from end
        int p = a.length() - 1;

        // Traversing the string backwards
        for (int i = a.length() - 1; i >= 1; i -= 2) 
        {

            // Checking if the current character is 0 and there is dot to the left of it
            // If yes, then decreasing length of desired string
            if (a.charAt(i) == '0' && a.charAt(i - 1) == '.') 
            {
                p -= 2;
            }

            // Otherwise ending the loop
            else 
            {
                break;
            }

        }

        // Returning the final string
        return a.substring(0, p + 1);
    }
}

==========================================================

public class Solution {
public int compareVersion(String version1, String version2) {
    int temp1 = 0,temp2 = 0;
    int len1 = version1.length(),len2 = version2.length();
    int i = 0,j = 0;
    while(i<len1 || j<len2) {
        temp1 = 0;
        temp2 = 0;
        while(i<len1 && version1.charAt(i) != '.') {
            temp1 = temp1*10 + version1.charAt(i++)-'0';
            
        }
        while(j<len2 && version2.charAt(j) != '.') {
            temp2 = temp2*10 + version2.charAt(j++)-'0';
            
        }
        if(temp1>temp2) return 1;
        else if(temp1<temp2) return -1;
        else {
            i++;
            j++;
            
        }
        
    }
    return 0;
    
}
}

=======================================================

// O(n) , where n => no of elements in the version part
// O(1), space complexity
class CompareVersionNumbers {

    public int compareVersion(String version1, String version2) {
        String[] version1List = version1.split("\\."); // Note your cant directly use split(".") because if will treat he regex as any character
        String[] version2List = version2.split("\\.");

        int s1 = 0;
        int s2 = 0;

        int len1 = version1List.length;

        int len2 = version2List.length;

        while(s1<len1 && s2<len2){
            int val1 = Integer.parseInt(version1List[s1]);
            int val2 = Integer.parseInt(version2List[s2]);
            s1++;
            s2++;

            if(val1>val2){
                return 1;
            } else if(val1<val2){
                return -1;
            } else{
                // continue
            }

        }

        while(s1<len1){
            int val1 = Integer.parseInt(version1List[s1]);
            s1++;
            if(val1>0){
                return 1;
            }
        }


        while(s2<len2){
            int val2 = Integer.parseInt(version2List[s2]);
            s2++;
            if(val2>0){
                return -1;
            }
        }

        return 0;
    }
}

=============================================================

public int compareVersion(String a, String b) {
        for (int i = 0, j = 0, m, n; i < a.length() || j < b.length(); i++, j++) {
            m = n = 0;
            while (i < a.length() && a.charAt(i) != '.') m = m * 10 + a.charAt(i++) - '0';
            while (j < b.length() && b.charAt(j) != '.') n = n * 10 + b.charAt(j++) - '0';
            if (m > n) return 1;
            if (m < n) return -1;
        }
        return 0;
}
============================================================
public int compareVersion(String version1, String version2) {
        String[] str1 = version1.split("\\.");
        String[] str2 = version2.split("\\.");
        int max = Math.max(str1.length,str2.length);
        for(int i=0;i<max;i++){
            int num1 = i >= str1.length ? 0 : Integer.parseInt(str1[i]);
            int num2 = i >= str2.length ? 0 : Integer.parseInt(str2[i]);
            if(num1 < num2) return -1;
            if(num1 > num2) return 1;
        }

        return 0;
    }
    
==================================================

