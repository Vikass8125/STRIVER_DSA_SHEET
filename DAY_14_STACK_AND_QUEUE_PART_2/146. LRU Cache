Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.

Implement the LRUCache class:

LRUCache(int capacity) Initialize the LRU cache with positive size capacity.
int get(int key) Return the value of the key if the key exists, otherwise return -1.
void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache.
If the number of keys exceeds the capacity from this operation, evict the least recently used key.
The functions get and put must each run in O(1) average time complexity.

 

Example 1:

Input
["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
Output
[null, null, null, 1, null, -1, null, -1, 3, 4]

Explanation
LRUCache lRUCache = new LRUCache(2);
lRUCache.put(1, 1); // cache is {1=1}
lRUCache.put(2, 2); // cache is {1=1, 2=2}
lRUCache.get(1);    // return 1
lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}
lRUCache.get(2);    // returns -1 (not found)
lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}
lRUCache.get(1);    // return -1 (not found)
lRUCache.get(3);    // return 3
lRUCache.get(4);    // return 4
 

Constraints:

1 <= capacity <= 3000
0 <= key <= 104
0 <= value <= 105
At most 2 * 105 calls will be made to get and put.


MY_SOLUTION

Prerequisite: Should have knowledge on the topics Hashmaps & DLL(Doubly Linked List)

Intuition:

While inserting the {key,val} pair into the DDL make sure that we are inserting it from the back tail to head.

The cache will tell us when the {key, value} pair is used/inserted.

Approach:

Size = 3

put(1,10)

put(3,15)

put(2,12)

get(3)

put(4,25)

Create a DLL and hashmap



While inserting the {key,val}pair consider the following

Check if the {key,val} pair is already present in Cache.
Check for the capacity. if the Cache size == capacity then while inserting the new pair remove the LRU and insert the new pair right after the head.
while removing the node make sure to remove the {value, node} pair from the cache.
If the key is not present in the Cache then return -1;
Query 1: put(1,10)

Initialling Cache is empty so (n = 0) and  (1,10) are not present in the Cache. It is a new element so we should insert it into the Cache.

Since n < capacity(0 < 3), so we can insert the pair.

Insert the pair({1,10}) right after the head.And store the {key,address of the node x} in the Cache.





Query 2: put(3,15)

Repeat the same process.

(3,15) is not present in the Cache and the size of the Cache (n = 1) is less than capacity 3.

Insert the pair(3,10) right after the head and store the address of that node in the Cache with its key value.





Query 3: put(2,12)

Repeat again. check if (2,12) Is present in the Cache.

No, itâ€™s not present in the cache so now check for the size Cache size is 2 < capacity(3).so insert the pair right after the head.





Query 4: get(3)

Check if the value is present in the cache. Yes, 3 is present in the cache so take the address of the node(Y) and output the value which is present in that node.

Now the most recently used should be changed because the flow is from head(most recent) to tail(least recent).

Delete the node and add that node right after the head. Since the node is moved to a new address update the address of the key in the cache.





Query 5: put(4,25)

Check for the size of the cache n = 3 which is equal to capacity so we have to remove the LRU which is present right before the tail.

Before removing the node delete the pair{key, node} of that node present in the cache.



Now the size of the cache will be 2 now we have space to insert the pair(4,25).

Take (4,25) right after the head and take the address of the node(s) and insert it into the cache.





Code:

class LRUCache {
    class Node{
        Node prev, next;
        int key, value;
        
        Node(int key, int value){
            this.key = key;
            this.value = value;
        }
    }
    
    Node head = new Node(0,0), tail = new Node(0,0);
    Map<Integer, Node> map = new HashMap<>();
    int capacity;

    public LRUCache(int capacity) {
        this.capacity = capacity;
        head.next = tail;
        tail.prev = head;
        
    }
    
    public int get(int key) {
        if(map.containsKey(key)){
            Node node = map.get(key);
            remove(node);
            insert(node);
            return node.value;
        }
        else{
            return -1;
        }
        
    }
    
    public void put(int key, int value) {
        if(map.containsKey(key)) remove(map.get(key));
        if(map.size() == capacity) remove(tail.prev);
        insert(new Node(key, value));
        
    }
    
    private void remove(Node node){
        map.remove(node.key);
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }
    
    
    private void insert(Node node){
        map.put(node.key, node);
        Node headNext = head.next;
        head.next = node;
        node.prev = head;
        headNext.prev = node;
        node.next = headNext;
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
 
 
Time Complexity:O(N)

Space Complexity:O(1)

==================================================================================================================================

/**
 * Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.
 *
 * get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
 * put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.
 *
 * The cache is initialized with a positive capacity.
 *
 * Follow up:
 * Could you do both operations in O(1) time complexity?
 *
 * Example:
 *
 * LRUCache cache = new LRUCache( 2 capacity );
        *
        *cache.put(1,1);
        *cache.put(2,2);
        *cache.get(1);       // returns 1
        *cache.put(3,3);    // evicts key 2
        *cache.get(2);       // returns -1 (not found)
        *cache.put(4,4);    // evicts key 1
        *cache.get(1);       // returns -1 (not found)
        *cache.get(3);       // returns 3
        *cache.get(4);       // returns 4
 */

class Node {
    int key;
    int val;
    Node prev;
    Node next;

    public Node(int key, int val) {
        this.key = key;
        this.val = val;
    }
}

// only need addToFront and Delete
class LRUCache {

    Map<Integer, Node> map;
    Node head;
    Node tail;
    int capacity;

    // initializ a <capacity> size data sctructure with two empty nodes pointing to each other (head and tail)
    public LRUCache(int capacity) {
        map = new HashMap<>();
        head = new Node(-1, -1);
        tail = new Node(-1, -1);
        head.next = tail;
        tail.prev = head;
        this.capacity = capacity;
    }

    // move the current node to head, O(1)
    public void moveToHead(Node curr) {
        curr.next = head.next;
        curr.prev = head;
        head.next = curr;
        curr.next.prev = curr;
    }

    // delete the current node, O(1)
    public void delete(Node curr) {
        curr.prev.next = curr.next;
        curr.next.prev = curr.prev;
    }

    // when getting this node, delete it and move it to head because it is recently used, O(1)
    public int get(int key) {
        if(map.containsKey(key)) {
            Node curr = map.get(key);
            delete(curr);
            moveToHead(curr);
            return curr.val;
        }
        return -1;
    }

    // puts a new node if it doesn't already exist. Regardless of if it already exists, this node is brough to head
    // because it is recently used. If capacity exceeds, remove the tail because it is the least used, O(1)
    public void put(int key, int value) {
        if(map.containsKey(key)) {
            Node curr = map.get(key);
            curr.val = value;
            delete(curr);
            moveToHead(curr);
        }
        else if(map.size()<capacity) {
            map.put(key, new Node(key, value));
            moveToHead(map.get(key));
        }
        else {
            map.put(key, new Node(key, value));
            map.remove(tail.prev.key);
            delete(tail.prev);
            moveToHead(map.get(key));
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */

/**
 * Time: O(1) for everything
 * Space: O(capacity)
 *
 * Intuition:
 * 1. to ensure get operation is O(1), hashmap is used
 * 2. put at worst case involves, inserting new and deleting least recently used.
 *   - For inserting new, hashmap is also O(1)
 *   - For deleteing least recently used, the least recently used has to be tracked, so this involves keeping and
 *     modifying the ordering of the cached values. This is where doubly linked list can be used, where moving places,
 *     swapping or deletion are all O(1) when I can access each node through a hashmap
 */
 
 ===========================================================================================================================
 class LRUCache
{
    int capacity;
    Queue<Integer> q=new ArrayDeque<>();//faster than LinkedList//to store the key according to  LRU principal
    Map<Integer,Integer> map=new LinkedHashMap<>();//To store key and value pair 
    
    public LRUCache(int capacity) 
    {
        this.capacity = capacity;//cache size 
    }
    
    public int get(int key)
    {
        if (map.containsKey(key)) 
        {//cache updating 
            q.remove(key);//O(n)
            q.offer(key);//O(1)
            return map.get(key);//O(1)
        } 
        else 
            return -1;//key is npt found 
    }
    
    public void put(int key, int value) 
    {
        if(map.containsKey(key)) //if key is present in the map, key has to be searched and deleted and then enqueue the key into the queue, 
        //according to LRU principal
        {
            q.remove(key);//O(n)//remove the key from the queue 
            q.offer(key);//O(1)//apeend at the end of the queue(enqueue)
            map.put(key,value);//O(1)//overwriding the key value (key is always unique)
        }
        else 
        {
            if(q.size() < capacity)
                q.offer(key);//inserting the new key into the queue 
            else 
            {//q.size() == capacity
                map.remove(q.poll());//removing the least recently used key 
                q.offer(key);//qppending the new key to the queue
            }
            map.put(key,value);//putting the key value pair 
        }
    }
}

========================================================================================================================================================================
The easiest solution and maybe most elegant is to just use the LinkedHashMap with the access-order flag set to true. 
The official documentation on it even mentions LRU caches and offers a method to overwrite specifically for a purpose like this.

import java.util.LinkedHashMap;

public class LRUCache {
    
    private Map<Integer, Integer> map;
    
    public LRUCache(int capacity) {
        map = new LinkedCappedHashMap<>(capacity);
    }
    
    public int get(int key) {
        if(!map.containsKey(key)) { return -1; }
        return map.get(key);
    }
    
    public void set(int key, int value) {
        map.put(key,value);
    }

    private static class LinkedCappedHashMap<K,V> extends LinkedHashMap<K,V> {
        
        int maximumCapacity;
        
        LinkedCappedHashMap(int maximumCapacity) {
            super(16, 0.75f, true);
            this.maximumCapacity = maximumCapacity;
        }
        
        protected boolean removeEldestEntry(Map.Entry eldest) {
            return size() > maximumCapacity;
        }
    }
}
================================================================================================

Array Approach
We will use an array of type Pair<key, value> to implement our LRU Cache where the larger the index is, the more recently the key is used. 
Means, the 0th index denotes the least recently used pair, and the last index denotes the most recently used pair.

 

The key will be considered as accessed if we try to perform any operation on it. 
So while performing the get operation on a key, we will do a linear search, if the key found in the cache at an index id we will left shift all keys starting 
from id+1 in the cache by one and put the key at the end (marking it as the most recently used key in the cache). 

 

Similarly, while performing the put operation on a key, we will do a linear search, if the key found at index equals to id, 
we will shift left all keys starting from id+1 in the cache by one and put the key at the end. Otherwise, we will check the current size of the cache. 
If the size equals capacity, we will remove the first(0th) key from the cache by doing the left shift on all the keys by one. 
Now we can simply insert the key at the end.

 

size: denotes the current size of the cache.

capacity: denotes the maximum keys cache can hold at one time.

cache: denotes the array of type pair to store key-value pairs.

Pair: Pair type will store these values, key, value.

 

Algorithm

 

This method will return the index of the key if it exists in the cache, otherwise -1.

 

getIndex(int key):

For all the pairs in the cache, from i = 0 to size - 1.
If currentPair->key == key, return i.
Return -1, as the given key does not exist in the cache.
This method will shift left all the pairs starting from the start index by 1.

 

leftShift(int start):

If start == size, no pair exists to shift, return.
For all pairs in tha cache, from i = start to size - 1,
cache[i - 1] = cache[i]
 

int get(key):

ID = getIndex(key).
If ID == -1, the key does not exist in the cache, return -1.
Get the pair at index = ID, let it pair.
leftShift(ID + 1).
cache[size - 1] = pair
Return pair->value.
 

void put(key, value):

ID = getIndex(key).
If ID is not equal to -1, the key already exists in the cache,
Get the pair at index = ID, let it pair.
leftShift(ID + 1).
pair->value = value.
cache[size - 1] = pair
Return.
Create a new pair of (key, value), let it be pair.
If the size is less than the capacity,
Insert pair in cache at index = size, cache[size] = pair
Increment size by 1.
Otherwise,
Remove the first pair from the cache, by performing a left shift, leftShift(1).
Insert pair in cache at index = size - 1, cache[size - 1] = 

pair.

Time Complexity
O(Q*capacity), where â€˜Qâ€™ is the number of the given queries and â€˜capacityâ€™ is the maximum number of keys LRU Cache can store.

 

In the worst case, we will be iterating on the cache to left shift all pairs by one.

Space Complexity
O(capacity): where â€˜capacityâ€™ is the maximum number of keys LRU Cache can store.

 

In the worst case, we will only be maintaining the â€˜capacityâ€™ number of keys in storage.

/*
    Time Complexity: O(Q*capacity) 
    Space Complexity: O(capacity)
    
    where Q is the number of the given queries and 
    capacity is the maximum number of keys LRU Cache can store.
*/

public class LRUCache
{
    class Pair
    {
        int key, val;

        Pair(int key, int val)
        {
            this.key = key;
            this.val = val;
        }
    }

    Pair cache[];
    int size;
    
    // Initialize LRUCache
    public LRUCache(int capacity)
        {
            cache = new Pair[capacity];
            size = 0;
        }
    
    // Shift elements to left.
    public void leftShift(int st)
        {
            if (st == size)
                return;

            for (int i = st; i < size; i++)
            {
                cache[i - 1] = cache[i];
            }
        }

    public int getIndex(int key)
        {
            for (int i = 0; i < size; i++)
            {
                Pair pair = cache[i];

                if (pair.key == key)
                {
                    return i;
                }
            }

            return -1;
        }
    
    // Return the value of the given key
    public int get(int key)
        {
            int id = getIndex(key);
            if (id == -1)
            {
                return id;
            }

            Pair pair = cache[id];
            leftShift(id + 1);
            cache[size - 1] = pair;

            return pair.val;
        }
    
    // Inserts a key and its value into the LRUCache
    public void put(int key, int value)
        {
            int id = getIndex(key);

            if (id != -1)
            {
                Pair pair = cache[id];
                leftShift(id + 1);
                pair.val = value;
                cache[size - 1] = pair;
            }
            else
            {
                Pair pair = new Pair(key, value);

                if (size < cache.length)
                {
                    cache[size] = pair;
                    size++;
                }
                else
                {
                    leftShift(1);
                    cache[size - 1] = pair;
                }
            }
        }
    }

===================================================================

Using HahMap with Queue
We will use two data structures to implement our LRU Cache.

 

Queue<Node>: To store the nodes into cache where the least recently used key will be the head node and the most recently used key will be the tail node.
Map<K, Node>: To map the keys to the corresponding nodes.
 

The key will be considered as accessed if we try to perform any operation on it. So while performing the get operation on a key, i
f the key already exists in the cache we will detach the key from the cache and put it at the tail end (marking it as the most recently used key in the cache). 
Similarly, while performing the put operation on a key, if the key already exists, we will detach it from the cache and put it at the tail end. 
Otherwise, we will put the key at the tail end and check the current size of the cache. If the size exceeds capacity, we will remove the head key from the cache.

 

To perform both of these operations at the minimum cost (O(1)). We will use a doubly-linked list to implement our queue.

 

head: head node of the queue, to store least recently used key-value pair.

tail: tail node of the queue, to store the most recently used key-value pair.

size: denotes the current size of the cache.

capacity: denotes the maximum keys cache can hold at one time.

Node: Node type will store these values, left node, right node, key, and value.

 

Algorithm

 

addToRear(Node node)

If head == null, head = node.
Else tail->right = node and node->left = tail
tail = node
 

deleteNode(Node node)

If the given node is the head node, head = head->right.
Else node->left->right = node->right.
If the given node is the tail node, tail = tail.left
Else node->right->left = node.left
node->right = null.
node->left = null
 

int get(key)

 

If the key does not exist, return -1.
Fetch the node corresponding to the given key from the map, let it be nod.
deleteNode(nod).
addToRear(nod).
Return nod->value.
 

void put(key, value)

 

If the key already exists in the cache, remove the key from the cache and put it at the tail end with the new value.
Fetch the node corresponding to the given key from the map, let it be nod.
nod->value = value.
deleteNode(nod)
addToRear(nod)
return
Initialize a new node with the given key-value pair. Let it nod, nod = node(key,value).
map.put(key, nod).
If the cache size reaches its capacity,
map.remove(key).
deleteNode(nod)
addToRear(nod)
Else,
addToRear(nod)
Increment size by 1.
Time Complexity
O(Q), where â€˜Qâ€™ is the number of the given queries.

 

As we are only updating the pointers of a queue implemented using a doubly-linked list, both the operations will take O(1) time. 
Therefore for â€˜Qâ€™ queries time complexity will be O(Q).

Space Complexity
O(capacity), where â€˜capacityâ€™ is the maximum number of keys LRU Cache can store.

 

In the worst case, we will only be maintaining the capacity number of keys in storage.


/*
    Time Complexity: O(Q) 
    Space Complexity: O(capacity)
    
    where Q is the number of the given queries and 
    capacity is the maximum number of keys LRU Cache can store.
*/

import java.util.HashMap;

class Node
{
    Node left, right;
    int key, val;

    Node(int key, int val)
    {
        this.key = key;
        this.val = val;
        left = null;
        right = null;
    }
}

public class LRUCache
{
    HashMap<Integer, Node> map;
    Node tail, head;
    int capacity, size;
    
    // Initialize LRUCache
    public LRUCache(int capacity)
    {
        map = new HashMap();
        this.capacity = capacity;
        size = 0;
        head = null;
        tail = null;
    }

    public void deleteNode(Node nod)
    {
        if (nod.left != null)
        {
            nod.left.right = nod.right;
        }
        else
        {
            head = head.right;
        }

        if (nod.right != null)
        {
            nod.right.left = nod.left;
        }
        else
        {
            tail = tail.left;
        }

        nod.right = null;
        nod.left = null;
    }
    
    // Add node at rear of linked list,
    public void addToRear(Node nod)
    {
        if (head == null)
        {
            head = nod;
            tail = nod;
            return;
        }

        tail.right = nod;
        nod.left = tail;
        tail = nod;
    }
    
    // Return the value of the given key
    public int get(int key)
    {
        if (!map.containsKey(key))
        {
            return -1;
        }
        Node nod = map.get(key);

        deleteNode(nod);
        addToRear(nod);

        return nod.val;
    }
    
    // Inserts a key and it's value into the LRUCache
    public void put(int key, int value)
    {
        if (map.containsKey(key))
        {
            Node nod = map.get(key);
            nod.val = value;

            deleteNode(nod);
            addToRear(nod);
        }
        else
        {
            Node nod = new Node(key, value);
            map.put(key, nod);

            if (size == capacity)
            {
                map.remove(head.key);
                deleteNode(head);
                addToRear(nod);
            }
            else
            {
                addToRear(nod);
                size++;
            }
        }
    }
}


