You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

 

Example 1:


Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4
Example 2:

Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.
Example 3:

Input: grid = [[0,2]]
Output: 0
Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 10
grid[i][j] is 0, 1, or 2.


MY_SOLUTION


Intuition: 

The idea is that for each rotten orange, we will find how many fresh oranges there are in its 4 directions. If we find any fresh orange we will make it into a rotten orange. One rotten orange can rotten up to 4 fresh oranges present in its 4 directions. For this problem,  we will be using the BFS ( Breadth-First Search ) technique.





Approach: 

-> First of all we will create a Queue data structure to store coordinate of Rotten Oranges

    We will also have variables as:

Total_oranges – It will store total number of oranges in the grid ( Rotten + Fresh )
Count – It will store the total number of oranges rotten by us . 
Total_time – total time taken to rotten.
-> After this, we will traverse the whole grid and count the total number of oranges in the grid and store it in Total_oranges. 
Then we will also push the rotten oranges in the Queue data structure as well.

-> Now while our queue is not empty,  we will pick up each Rotten Orange and check in all its 4 directions whether a Fresh orange is present or not. 
If it is present we will make it rotten and push it in our queue data structure and pop out the Rotten Orange which we took up as its work is done now.

-> Also we will keep track of the count of rotten oranges we are getting.

-> If we rotten some oranges, then obviously our queue will not be empty. In that case, we will increase our total time. This goes on until our queue becomes empty. 

-> After it becomes empty, We will check whether the total number of oranges initially is equal to the current count of oranges.
If yes, we will return the total time taken, else will return -1 because some fresh oranges are still left and can’t be made rotten.

Code:

import java.util.*;
class TUF{
public static int orangesRotting(int[][] grid) {
        if(grid == null || grid.length == 0) return 0;
        int rows = grid.length;
        int cols = grid[0].length;
        Queue<int[]> queue = new LinkedList<>();
        int count_fresh = 0;
        //Put the position of all rotten oranges in queue
        //count the number of fresh oranges
        for(int i = 0 ; i < rows ; i++) {
            for(int j = 0 ; j < cols ; j++) {
                if(grid[i][j] == 2) {
                    queue.offer(new int[]{i , j});
                }
                if(grid[i][j] != 0) {
                    count_fresh++;
                }
            }
        }
       
        if(count_fresh == 0) return 0;
        int countMin = 0, cnt = 0;
        int dx[] = {0, 0, 1, -1};
        int dy[] = {1, -1, 0, 0};
        
        //bfs starting from initially rotten oranges
        while(!queue.isEmpty()) {
            int size = queue.size();
            cnt += size; 
            for(int i = 0 ; i < size ; i++) {
                int[] point = queue.poll();
                for(int j = 0;j<4;j++) {
                    int x = point[0] + dx[j];
                    int y = point[1] + dy[j];
                    
                    if(x < 0 || y < 0 || x >= rows || y >= cols || grid[x][y] == 0 || 
                    grid[x][y] == 2) continue;
                    
                    grid[x][y] = 2;
                    queue.offer(new int[]{x , y});
                }
            }
            if(queue.size() != 0) {
                countMin++;
            }
        }
        return count_fresh == cnt ? countMin : -1;
    }
    public static void main(String args[])
    {
        int arr[][]={ {2,1,1} , {1,1,0} , {0,1,1} };
        int rotting = orangesRotting(arr);
        System.out.println("Minimum Number of Minutes Required "+rotting);
    }
}
Output:

Minimum Number of Minutes Required 4

Time Complexity: O ( n x n ) x 4    

Reason: Worst-case – We will be making each fresh orange rotten in the grid and for each rotten orange will check in 4 directions

Space Complexity: O ( n x n )

Reason: worst-case –  If all oranges are Rotten, we will end up pushing all rotten oranges into the Queue data structure


===============================================================================================================================================
We iterate throught the collection of orages rotting adjacent oranges each passthrough.
O(N x M) Where M is the "minutes" it takes to rot all the oranges if possible.
I've seen a lot of other soltutions that utilize the stack through multiple method calls and wanted to post my solution.

class Solution {
    public int orangesRotting(int[][] grid) {
        
        int count = 2;
        boolean rot = true;
        int toRot = 0;
        while(rot){
            toRot = 0;
            rot=false;
            for(int r = 0; r < grid.length; r++){
                for(int c = 0; c < grid[0].length; c++){
                    if(grid[r][c] == 1){
                        // attempt rot
						
						// check left
                        if(c > 0 && grid[r][c-1] == count)
                            grid[r][c] = count+1;
						// check right
                        else if(c < grid[r].length - 1 && grid[r][c+1] == count)
                            grid[r][c] = count+1;
						// check up
                        else if(r > 0 && grid[r-1][c] == count)
                            grid[r][c] = count+1;
						// check down
                        else if(r < grid.length - 1 && grid[r+1][c] == count)
                            grid[r][c] = count+1;
						// if we rotted an orange this passthrough, there's a chance to rot on another passthrough
                        if(grid[r][c] == count+1)
                            rot=true;
						// track not rotted 
                        if(grid[r][c] == 1)
                            toRot++;
                    }
                }
            }
            count++;
        }
        
        return toRot == 0 ? count-3 : -1;
    }
}
=================================================================================================================

DFS SOLUTION
class Solution {

private int row;
private int col;
public int orangesRotting(int[][] grid) {
    
    //time ++ => 1 -> time
    //grid[i][j] < time ==> not change
    //DFS after grid[i][j] == 1 => -1 else time - 2;
    //time == result
    
    int result = 2; //Integer.MIN_VALUE;
    row = grid.length;
    col = grid[0].length;

    for(int i = 0; i < row; i++) {
        for(int j = 0; j < col; j++) {
            if(grid[i][j] == 2) {
                DFS(i, j, grid, 2);
            }
        }
    }
    
    for(int i = 0; i < row; i++) {
        for(int j = 0; j < col; j++) {     
            if(grid[i][j] == 1) {
                return -1;
            }
            result = Math.max(result, grid[i][j]);
        }
    }
    return result-2;
}

public void DFS(int i, int j, int[][] grid, int minute) {
    
    if(i < 0 || i>=row || j < 0 || j >= col || grid[i][j] == 0) return;
    
    if(grid[i][j] > 1 &&  grid[i][j]< minute) return;
    
    grid[i][j] = minute;           
    minute++;
    
    DFS(i+1, j, grid, minute);
    DFS(i-1, j, grid, minute);
    DFS(i, j+1, grid, minute);
    DFS(i, j-1, grid, minute);
}
}
==============================================================================================
class Solution {
    public int orangesRotting(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
       
        
        Queue<int[]> q = new LinkedList<>();
        
        for(int i =0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==2){
                    q.add(new int[]{i,j,0});
                }
            }
        }
       
        int level =0;
        while(!q.isEmpty()){
            int size = q.size();
            
            for(int i =0;i<size;i++){
                int[] top = q.poll();
                int r = top[0];
                int c = top[1];
                
                
                int[][] dirs = {{1,0},{-1,0},{0,1},{0,-1}};
                for(int[] dir : dirs){
                    int nr = r+dir[0];
                    int nc = c+dir[1];
                    
                    if(nr<0 || nc<0 || nr>=m || nc>=n || grid[nr][nc]==0 || grid[nr][nc]==2 ){
                        continue;
                    }
                    if( grid[nr][nc]==1){
                        grid[nr][nc] = 2;
                        q.add(new int[]{nr,nc});
                    }
                }
            }
            if(!q.isEmpty()){
                level++;
            }
        }
        
         for(int i =0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    return -1;
                }
            }
                
            }
        return level;
    }
}
=====================================================================================================================
class Solution {
    int[][] directions = new int[][]{{-1,0}, {0,1}, {1,0}, {0,-1}};

    public int orangesRotting(int[][] grid) {
        int minutes = 0;
        Queue < int[] > queue = new LinkedList();
        int fresh = 0;
        for (int row = 0; row < grid.length; row++) {
            for (int col = 0; col < grid[0].length; col++) {
                if (grid[row][col] == 2) {
                    queue.add(new int[] { row, col });
                } else if (grid[row][col] == 1) {
                    fresh++;
                }
            }
        }
        if (fresh == 0) {
            return 0;
        }
        if (queue.isEmpty()) {
            return -1;
        }
        int end = queue.size();
        while (!queue.isEmpty()) {
            if (end == 0) {
                minutes++;
                end = queue.size();
            }
            end--;
            int[] oranges = queue.remove();
            for (int[] direction: directions) {
                int newRow = oranges[0] + direction[0];
                int newCol = oranges[1] + direction[1];
                if (!isCellInvalid(grid, newRow, newCol)) {
                    grid[newRow][newCol] = 2;
                    queue.add(new int[] { newRow,  newCol });
                    fresh--;
                }
            }
        }
        return fresh == 0 ? minutes : -1;
    }
    public boolean isCellInvalid(int[][] grid, int row, int col) {
        return row < 0 || row >= grid.length || col < 0 || col >= grid[0].length ||
                    grid[row][col] == 0 || grid[row][col] == 2;
    }
}
