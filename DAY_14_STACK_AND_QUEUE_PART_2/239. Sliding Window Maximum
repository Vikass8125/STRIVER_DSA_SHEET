You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right.
You can only see the k numbers in the window. Each time the sliding window moves right by one position.

Return the max sliding window.

 

Example 1:

Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Example 2:

Input: nums = [1], k = 1
Output: [1]
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
1 <= k <= nums.length

HINTS:
How about using a data structure such as deque (double-ended queue)?

The queue size need not be the same as the window’s size.

Remove redundant elements and the queue should store only elements that need to be considered.

MY_SOLUTION

Solution 1(Brute Force):

Intuition: We want to look for a window of size k at a time and then shift to the next window. 
So why not do exactly what we are asked to! We fix our window of size k at first and then calculate the maximum element in it.
We then shift our window to the next position and do the same process until we exhaust all possibilities i.e we reach the end of the array.

Approach: We initially keep a left and right pointer to fix our window to a size of k. 
We compute the maximum element present in this window using the GetMax function.
Further, update the left and right pointer by left++ and right++ every time to get to a new window of size k using a while loop. 
For every new window we encounter, we add the maximum element using the GetMax function to our data structure.

Code:

import java.util.*;
class TUF {
    static void GetMax(int arr[], int l, int r, ArrayList < Integer > maxx) {
        int i, maxi = Integer.MIN_VALUE;
        for (i = l; i <= r; i++)
            maxi = Math.max(maxi, arr[i]);
        maxx.add(maxi);
    }
    static ArrayList < Integer > maxSlidingWindow(int arr[], int k) {
        int left = 0, right = 0;
        int i, j;
        ArrayList < Integer > maxx = new ArrayList < > ();
        while (right < k - 1) {
            right++;
        }
        while (right < arr.length) {
            GetMax(arr, left, right, maxx);
            left++;
            right++;
        }
        return maxx;
    }
    public static void main(String args[]) {
        int i, j, n, k = 3, x;
        int arr[]={4,0,-1,3,5,3,6,8};
        ArrayList < Integer > ans;
        ans = maxSlidingWindow(arr, k);
        System.out.println("Maximum element in every " + k + " window ");
        for (i = 0; i < ans.size(); i++)
            System.out.print(ans.get(i) + "  ");

    }
}
Output:

Maximum element in every 3 window
4 3 5 5 6 8

Time Complexity: O(N^2)

Reason: One loop for traversing and another to findMax

Space Complexity: O(K) 

Reason: No.of windows

Solution 2: Optimized Solution

Intuition : Can we do something better?
To understand this, we would first need to check whether we are doing any repetitions. To understand this, consider the following scenario:

Window : [1,2,3]  and the next incoming value is 2

For this state, we get a maximum of 3. However, when our state changes to, [2,3,2] we again check what is the largest element even though 
we know that the outgoing element is not the largest one. Hence, the point of concern lies only when the outgoing element was the largest. 

Approach
We address this problem with the help of a data structure that keeps checking whether the incoming element is larger than the already present elements. 
This could be implemented with the help of a de-queue. When shifting our window, we push the new element in from the rear of our de-queue. 
Following is a sample representation of our dequeue:



Every time before entering a new element, we first need to check whether the element present at the front is out of bounds of our present window size. 
If so, we need to pop that out. Also, we need to check from the rear that the element present is smaller than the incoming element. 
If yes, there’s no point storing them and hence we pop them out. Finally, the element present at the front would be our largest element.

Code:

import java.util.*;
class TUF {
    public static int[] maxSlidingWindow(int[] a, int k) {
        int n = a.length;
        int[] r = new int[n - k + 1];
        int ri = 0;
        // store index
        Deque < Integer > q = new ArrayDeque < > ();
        for (int i = 0; i < a.length; i++) {
            // remove numbers out of range k
            if (!q.isEmpty() && q.peek() == i - k) {
                q.poll();
            }
            // remove smaller numbers in k range as they are useless
            while (!q.isEmpty() && a[q.peekLast()] < a[i]) {
                q.pollLast();
            }

            q.offer(i);
            if (i >= k - 1) {
                r[ri++] = a[q.peek()];
            }
        }
        return r;
    }
    public static void main(String args[]) {
        int i, j, n, k = 3, x;
        int arr[]={4,0,-1,3,5,3,6,8};
        int ans[] = maxSlidingWindow(arr, k);
        System.out.println("Maximum element in every " + k + " window ");
        for (i = 0; i < ans.length; i++)
            System.out.print(ans[i] + "  ");

    }
}
Output:

Maximum element in every 3 window
4 3 5 5 6 8

Time Complexity: O(N)

Space Complexity: O(K)


=======================================================================================================================
class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int [] ans = new int [nums.length - k + 1];
        
        //finding next greater element
        int nge [] = new int [nums.length];
        Stack<Integer> st = new Stack<>();
        
        for(int i = nums.length-1; i >=0; i--){
            while(st.size() != 0 && nums[st.peek()] <= nums[i]){
                st.pop();
            }
            if(st.size() == 0){
                nge[i] = nums.length;
            }
            else{
                nge[i] = st.peek();
            }
            st.push(i);
        }
        
        int j = 0;
        for(int i = 0; i <= nums.length-k; i++){
            if(j < i){
                j = i;
            }
            while(nge[j] < i+k){
                j = nge[j];
            }
            ans[i] = nums[j];
        }
        return ans;
    }
}
==============================================================================
class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        
        Deque<Integer> dq = new ArrayDeque<>();
        int i = 0, j = 0, p = 0;
        int[] ans = new int[nums.length - k +1];
        while(j < nums.length) {
		
            // Calculation
            while(dq.size() > 0 && dq.peekLast() < nums[j]) {
                dq.pollLast();
            }
            dq.addLast(nums[j]);
            
		    // when window size is not reached just increment j
            if(j-i+1 < k)
                j++;
            
			// when  the window size is equal to K
            else if(j-i+1 == k) {
			
				// Using the Calculation to get  ans 
                ans[p++] = dq.peekFirst();
                if(dq.peekFirst() == nums[i]) 
                    dq.pollFirst(); 
					
				// sliding window after getting ans
                i++; j++;
            }
        }
		
        return ans;         
    }
}

===========================================================================
We'll use a deque here in order to keep track of elements that we can consider in our answer and a sliding window with a starting and an ending index. 
The approach goes like this:

Starting index of our window is start index + 1 and end index of answer lies in the range: [k - 1, n - 1] where start index + 1 = end index - k simply 
because size of window = end index - start index + 1.
Check if we should not consider start index and remove it from the front of the deque while moving the window as we will be standing at start index + 1.
Check if we can remove more elements from the back of the deque if the current element is greater than it. 
This is done as to make sure we consider the greater one in our answer.
After these considerations, you can add element's index (or the element) inside the deque from the back.
Add the element whose index is at the front of the deque into the max sliding window answer.
1 , 3, -1, -3, 5, 3, 6, 7 <- at the start
e

1 , 3, -1, -3, 5, 3, 6, 7 <- from here we'll start adding elements into answer
s _____e

✔ Time complexity: O(n)
✔ Space complexity: O(k)


class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int n = nums.length;
        if(n == 1 || k == 1) return nums;
        
        int[] maxInWindow = new int[n - k + 1];
        Deque<Integer> dq = new ArrayDeque<>();
        
        // our sliding window exists in the range [startIdx + 1, endIdx]
        for(int endIdx = 0; endIdx < n; ++endIdx) {
            int startIdx = endIdx - k;
            // slide the window forward and hence remove it from the front of the deque
            if(!dq.isEmpty() && dq.getFirst() == startIdx)
                dq.removeFirst();
            // before adding any index check if we can remove some elements in the deque from the end which 
            // are smaller than this element that is to be added and can be a potential entry in our array
            while(!dq.isEmpty() && nums[endIdx] > nums[dq.getLast()])
                dq.removeLast();
            // having taken all the above conditions into account now we can add the index inside our deque
            dq.add(endIdx);
            // start adding the candidates as answer 
            // whichever element's index is there on the front in deque is our answer now
            if(endIdx >= k - 1)
                maxInWindow[endIdx - k + 1] = nums[dq.getFirst()];
        }
        return maxInWindow;
    }
}
