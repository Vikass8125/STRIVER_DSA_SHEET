Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.

 

Example 1:


Input: heights = [2,1,5,6,2,3]
Output: 10
Explanation: The above is a histogram where width of each bar is 1.
The largest rectangle is shown in the red area, which has an area = 10 units.
Example 2:


Input: heights = [2,4]
Output: 4
 

Constraints:

1 <= heights.length <= 105
0 <= heights[i] <= 104

MY_SOLUTION

Solution 1: Brute Force Approach

Intuition: The intuition behind the approach is taking different bars and finding the maximum width possible using the bar.



Similarly for other bars, we will find the areas possible:-

Considering the width of each bar as 1 unit.

For first bar, area possible = 2* 1 =2 sq . units

For second  bar, area possible = 1 * 6 =6 sq . units

For third bar , area possible = 5 *2 = 10 sq . units

For fourth bar , area possible = 6 * 1 = 6 sq . units

For Fifth bar , area possible = 2 * 4 = 8 sq . units

For Sixth bar , area possible = 3 * 1 =3 sq . units

So, the maximum area possible = 10 sq units.

Approach:

The approach is to find the right smaller and left smaller element and find the largest Rectangle area in Histogram.



Code:

import java.util.*;
// Brute Force Approach to find largest rectangle area in Histogram
public class Main {
    static int largestarea(int arr[], int n) {
        int maxArea = 0;
        for (int i = 0; i < n; i++) {
            int minHeight = Integer.MAX_VALUE;
            for (int j = i; j < n; j++) {
                minHeight = Math.min(minHeight, arr[j]);
                maxArea = Math.max(maxArea, minHeight * (j - i + 1));
            }
        }
        return maxArea;
    }
    public static void main(String args[]) {
        int arr[] = {2, 1, 5, 6, 2, 3, 1};
        int n = 7;
        System.out.println("The largest area in the histogram is " + largestarea(arr, n)); // Printing the largest rectangle area

    }
}
Output: The largest area in the histogram is 10

Time Complexity: O(N*N ) 

Space Complexity: O(1)

Solution 2: Optimised Approach 1

Intuition: The intuition behind the approach is the same as finding the smaller element on both sides but in an optimized way using the concept of the next greater element and the next smaller element.

Approach: 

Steps to be done for finding Left smaller element






2. Steps to be done for finding the Right smaller element



After finding the right smaller and left smaller of each subsequent array elements, we



Area for first index – ( 0 – 0 +1 ) * 2 = 2

Area for second index – (6 – 0 + 1) * 1 = 6

Area for third index – (3 – 2 +1 ) * 5 = 10

Area for fourth index – (3 – 3 + 1 ) * 6 = 6

Area for fifth index – (5 – 2 +1 ) * 2 = 8

Area for sixth index – (5 – 5  + 1) * 3 = 3

Area for seventh index – (6 – 0 +1) * 1  = 7

So, the maximum area out of these is 10 sq units.

Code:

import java.util.*;
// Brute Force Approach to find largest rectangle area in Histogram
public class Main {
    public static int largestRectangleArea(int[] heights) {
        int n = heights.length;
        Stack < Integer > st = new Stack < > ();
        int leftSmall[] = new int[n];
        int rightSmall[] = new int[n];
        for (int i = 0; i < n; i++) {
            while (!st.isEmpty() && heights[st.peek()] >= heights[i]) {
                st.pop();
            }

            if (st.isEmpty()) leftSmall[i] = 0;
            else leftSmall[i] = st.peek() + 1;
            st.push(i);
        }

        // clear the stack to be re-used
        while (!st.isEmpty()) st.pop();

        for (int i = n - 1; i >= 0; i--) {
            while (!st.isEmpty() && heights[st.peek()] >= heights[i]) {
                st.pop();
            }

            if (st.isEmpty()) rightSmall[i] = n - 1;
            else rightSmall[i] = st.peek() - 1;

            st.push(i);
        }

        int maxA = 0;
        for (int i = 0; i < n; i++) {
            maxA = Math.max(maxA, heights[i] * (rightSmall[i] - leftSmall[i] + 1));
        }
        return maxA;

    }
    public static void main(String args[]) {
        int arr[] = {2, 1, 5, 6, 2, 3, 1};
        int n = 7;
        System.out.println("The largest area in the histogram is " + 
        largestRectangleArea(arr)); 

    }
}
Output: The largest area in the histogram is 10

Time Complexity: O( N )

Space Complexity: O(3N) where 3 is for the stack, left small array and a right small array

Solution 3: Optimised approach 2

Intuition:

This approach is a single pass approach instead of a two-pass approach. When we traverse the array by finding the next greater element, we found that some elements were inserted into the stack which signifies that after them the smallest element is themselves

So we can find the area of the rectangle by using arr[i] * (right smaller – left smaller -1 ).



Approach:







Code:

import java.util.*;
public class TUF {
    static int largestRectangleArea(int histo[]) {
        Stack < Integer > st = new Stack < > ();
        int maxA = 0;
        int n = histo.length;
        for (int i = 0; i <= n; i++) {
            while (!st.empty() && (i == n || histo[st.peek()] >= histo[i])) {
                int height = histo[st.peek()];
                st.pop();
                int width;
                if (st.empty())
                    width = i;
                else
                    width = i - st.peek() - 1;
                maxA = Math.max(maxA, width * height);
            }
            st.push(i);
        }
        return maxA;
    }

    public static void main(String args[]) {
        int histo[] = {3, 1, 5, 6, 2, 3};
        System.out.println("The largest area in the histogram is " + largestRectangleArea(histo));
    }
}
Output: The largest area in the histogram is 10

Time Complexity: O( N ) + O (N)

Space Complexity: O(N)

=========================================================================
ntitution: Find the closest height (smaller or equal to) before the current element height for left array while traversing from left to right.
Similarly find the closest height (smaller or equal to) after the current element for right array while traversing from right to left.
Now find width using right and left subarray and then calculate the area using height * width.

Based on same concept
Another problem: Maximal Rectangle: https://leetcode.com/problems/maximal-rectangle/discuss/2387327/java-easy-to-implement-dp

class Solution {
    public int largestRectangleArea(int[] heights) {
        Stack<Integer> stack1 = new Stack<>();
        Stack<Integer> stack2 = new Stack<>();
        int n = heights.length;
        int[] left = new int[n];
        int[] right = new int[n];
        int[] width = new int[n];
        
        for(int i=0; i<n; i++){
            while(!stack1.isEmpty() && heights[stack1.peek()] >= heights[i])
                stack1.pop();
            if(!stack1.isEmpty())
                left[i] = stack1.peek();
            else
                left[i] = -1;
            stack1.push(i);
        }
        
        for(int i=n-1; i>=0; i--){
            while(!stack2.isEmpty() && heights[stack2.peek()] >= heights[i])
                stack2.pop();
            if(!stack2.isEmpty())
                right[i] = stack2.peek();
            else
                right[i] = n;
            stack2.push(i);
        }
        
        for(int i=0; i<n; i++){
            width[i] = right[i] - left[i] - 1;
        }
        int mxArea = 0;
        for(int i=0; i<n; i++){
            mxArea = Math.max(mxArea, width[i] * heights[i]);
        }        
        return mxArea;
    }
}
===========================================================================
class Solution {
    public int largestRectangleArea(int[] heights) {
        int [] nsol = nextSmallerOnLeft(heights);
        int [] nsor = nextSmallerOnRight(heights);
        int max = 0;
        for(int i = 0; i < heights.length; i++){
            int weight = nsor[i] - nsol[i] - 1;
            int area = heights[i] * weight;
            max = Math.max(max, area);
        }
        return max;
    }
    
    public static int [] nextSmallerOnRight(int [] arr){
        int [] ans = new int [arr.length];
        Stack<Integer> st = new Stack<>();
        for(int i = 0; i < arr.length; i++){
            while(st.size() != 0 && arr[st.peek()] > arr[i]){
                int idx = st.pop();
                ans[idx] = i;
            }
            st.push(i);
        }
        while(st.size() != 0){
            int idx = st.pop();
            ans[idx] = arr.length;
        }
        return ans;
        
    }
    
    public static int [] nextSmallerOnLeft(int [] arr){
        int [] ans = new int [arr.length];
        Stack<Integer> st = new Stack<>();
        for(int i = arr.length-1; i >= 0; i--){
            while(st.size() != 0 && arr[st.peek()] > arr[i]){
                int idx = st.pop();
                ans[idx] = i;
            }
            st.push(i);
        }
        while(st.size() != 0){
            int idx = st.pop();
            ans[idx] = -1;    
        }
        return ans;
    }
}
============================================================================================
class Solution {
    public int largestRectangleArea(int[] heights) {
        
        int n = heights.length;
        List<Integer> nsl, nsr;
        int[] width = new int[n];
        
        nsl = NSL(heights, n);
        nsr = NSR(heights, n);
        for(int i=0; i<n; i++) 
            width[i] = nsr.get(i) - nsl.get(i) - 1;
        
        int area = Integer.MIN_VALUE;
        
        for(int i=0; i<n; i++) {  
            int l = heights[i];
            int b = width[i];
            int calArea = l * b;
            area = Math.max(area, calArea);            
        }
        
        return area;
    }
    
    private List<Integer> NSR(int[] heights, int n) {
        
        Stack<int[]> st = new Stack<>();
        List<Integer> nums = new ArrayList<>(n);
        
        for(int i=n-1; i>= 0; i--) {
            int curr = heights[i];
            while(!st.isEmpty() && st.peek()[0] >= curr) 
            { st.pop(); }
            if(st.isEmpty()) nums.add(n);
            else nums.add(st.peek()[1]);
            st.push(new int[] { curr, i });
        }
        Collections.reverse(nums);
        return nums;
    }
    
    private List<Integer> NSL(int[] heights, int n) {
        
        Stack<int[]> st = new Stack<>();
        List<Integer> nums = new ArrayList<>(n);
        
        for(int i=0; i<n; i++) {
            int curr = heights[i];
            while(!st.isEmpty() && st.peek()[0] >= curr) 
            { st.pop(); }
            if(st.isEmpty()) nums.add(-1);
            else nums.add(st.peek()[1]);
            st.push(new int[] { curr, i });
        }
        return nums;
    }
        
=================================================================================================
Approach 1

class Solution {
    public int largestRectangleArea(int[] heights) {
        int n = heights.length;
        Stack<Integer> st = new Stack<>();
        int[] left_small = new int[n];
        int[] right_small = new int[n];
        
        for(int i=0; i<n; i++){
            while(!st.isEmpty() && heights[st.peek()] >= heights[i]){
                st.pop();
            }
            if(st.isEmpty()) left_small[i] = 0;
            else left_small[i] = st.peek() + 1;
            st.push(i);
        }
        
        while(!st.isEmpty()) st.pop();
        
        for(int i=n-1; i>=0; i--){
            while(!st.isEmpty() && heights[st.peek()] >= heights[i]){
                st.pop();
            }
            if(st.isEmpty()) right_small[i] = n-1;
            else right_small[i] = st.peek() - 1;
            st.push(i);
        }
        
        int result = 0;
        for(int i=0; i<n; i++){
            int area = heights[i] * (right_small[i] - left_small[i] + 1);
            result = Math.max(result, area);
        }
        return result;
    }
}
Approach 2 (Optimal)

class Solution {
    public int largestRectangleArea(int[] heights) {
        int n = heights.length;
        Stack<Integer> st = new Stack<>();
        int result = 0;
        for(int i=0; i<=n; i++){
            while(!st.isEmpty() && (i == n || heights[st.peek()] >= heights[i])){
                int height = heights[st.peek()];
                st.pop();
                int width = 0;
                if(st.isEmpty()) width = i;
                else width = i - st.peek() - 1;
                result = Math.max(result, width * height);
            }
            st.push(i);
        }
        return result;
    }
}
