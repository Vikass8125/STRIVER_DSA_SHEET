Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

You must write an algorithm that runs in O(n) time.

 

Example 1:

Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.
Example 2:

Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109

MY_SOLUTION

class Solution {
    public int longestConsecutive(int[] nums) {
       //BRUTE FORCE
        /*
        if (nums.length == 0) {
            return 0;
        }

        Arrays.sort(nums);

        int longestStreak = 1;
        int currentStreak = 1;

        for (int i = 1; i < nums.length; i++) {
            if (nums[i] != nums[i-1]) { // IF BOTH NUMBERS ARE NOT EQUAL
                if (nums[i] == nums[i-1]+1) {
                    currentStreak += 1;
                }
                else { // THE ABOVE CONDITION IS BROKEN THEN RESET
                    longestStreak = Math.max(longestStreak, currentStreak);
                    currentStreak = 1;
                }
            }
        }

        return Math.max(longestStreak, currentStreak);
        */
        
        //OPYIMISED -> HASHSET
        
        int len = nums.length;
        Set<Integer> set = new HashSet<Integer>();
        
        for(int num : nums){
            set.add(num);
        }
        
        int longestStreak = 0;
        
        for(int num : set){
            if(!set.contains(num-1)){
                int curNum = num;
                int count = 1;
                
                
                while(set.contains(curNum + 1)){
                    curNum += 1;
                    count += 1;
                }
                
                longestStreak = Math.max(longestStreak, count);
                
            }
        }
        
        return longestStreak;
    }
}



// BRUTE FORCE
Approach 1: Brute Force
Intuition

Because a sequence could start at any number in nums, we can exhaust the entire search space by building as long a sequence as possible from every number.

Algorithm

The brute force algorithm does not do anything clever - it just considers each number in nums, attempting to count as high as possible from that number using
only numbers in nums. After it counts too high (i.e. currentNum refers to a number that nums does not contain), it records the length of the sequence if it is 
larger than the current best. The algorithm is necessarily optimal because it explores every possibility.

class Solution {
    private boolean arrayContains(int[] arr, int num) {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == num) {
                return true;
            }
        }

        return false;
    }
    public int longestConsecutive(int[] nums) {
        int longestStreak = 0;

        for (int num : nums) {
            int currentNum = num;
            int currentStreak = 1;

            while (arrayContains(nums, currentNum + 1)) {
                currentNum += 1;
                currentStreak += 1;
            }

            longestStreak = Math.max(longestStreak, currentStreak);
        }

        return longestStreak;
    }
}
Complexity Analysis

Time complexity : O(n^3)
The outer loop runs exactly nn times, and because currentNum increments by 1 during each iteration of the while loop, it runs in O(n) time. 
Then, on each iteration of the while loop, an O(n) lookup in the array is performed.
Therefore, this brute force algorithm is really three nested O(n) loops, which compound multiplicatively to a cubic runtime.

Space complexity : O(1).

The brute force algorithm only allocates a handful of integers, so it uses constant additional space.

============================================================================================================================================================

Solution 1: (Brute force)
Approach: We can simply sort the array and run a for loop to find the longest consecutive sequence.
/*
The longest sequence in an empty array is, of course, 0, so we can simply return that. 
For all other cases, we sort nums and consider each number after the first (because we need to compare each number to its previous number). 
If the current number and the previous are equal, then our current sequence is neither extended nor broken, so we simply move on to the next number. 
If they are unequal, then we must check whether the current number extends the sequence (i.e. nums[i] == nums[i-1] + 1). 
If it does, then we add to our current count and continue. 
Otherwise, the sequence is broken, so we record our current sequence and reset it to 1 (to include the number that broke the sequence). 
It is possible that the last element of nums is part of the longest sequence, so we return the maximum of the current sequence and the longest one.
*/
class Solution {
    public int longestConsecutive(int[] nums) {
        if (nums.length == 0) {
            return 0;
        }

        Arrays.sort(nums);

        int longestStreak = 1;
        int currentStreak = 1;

        for (int i = 1; i < nums.length; i++) {
            if (nums[i] != nums[i-1]) {
                if (nums[i] == nums[i-1]+1) {
                    currentStreak += 1;
                }
                else {
                    longestStreak = Math.max(longestStreak, currentStreak);
                    currentStreak = 1;
                }
            }
        }

        return Math.max(longestStreak, currentStreak);
    }
}



============================================================================================================================================================

Solution 2: (Optimal Approach)
Approach: We will first push all are elements in the HashSet. 
Then we will run a for loop and check for any number(x) if it is the starting number of the consecutive sequence by checking if the HashSet contains (x-1) or not. 
If ‘x’ is the starting number of the consecutive sequence we will keep searching for the numbers y = x+1, x+2, x+3, ….. And stop at the first ‘y’ which is not 
present in the HashSet. Using this we can calculate the length of the longest consecutive subsequence. 

Intuition

It turns out that our initial brute force solution was on the right track, but missing a few optimizations necessary to reach O(n)O(n) time complexity.

Algorithm

This optimized algorithm contains only two changes from the brute force approach: the numbers are stored in a HashSet (or Set, in Python) 
to allow O(1)O(1) lookups, and we only attempt to build sequences from numbers that are not already part of a longer sequence. 
This is accomplished by first ensuring that the number that would immediately precede the current number in a sequence is not present, as that 
number would necessarily be part of a longer sequence.

class Solution {
    public int longestConsecutive(int[] nums) {
        Set<Integer> num_set = new HashSet<Integer>();
        for (int num : nums) {
            num_set.add(num);
        }

        int longestStreak = 0;

        for (int num : num_set) {
            if (!num_set.contains(num-1)) {
                int currentNum = num;
                int currentStreak = 1;

                while (num_set.contains(currentNum+1)) {
                    currentNum += 1;
                    currentStreak += 1;
                }

                longestStreak = Math.max(longestStreak, currentStreak);
            }
        }

        return longestStreak;
    }
}

Time Complexity: The time complexity of the above approach is O(N) because we traverse each consecutive subsequence only once.
Space Complexity: The space complexity of the above approach is O(N) because we are maintaining a HashSet.
