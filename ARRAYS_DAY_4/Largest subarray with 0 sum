Given an array having both positive and negative integers. The task is to compute the length of the largest subarray with sum 0.

Example 1:

Input:
N = 8
A[] = {15,-2,2,-8,1,7,10,23}
Output: 5
Explanation: The largest subarray with
sum 0 will be -2 2 -8 1 7.
Your Task:
You just have to complete the function maxLen() which takes two arguments an array A and n, where n is the size of the array A and returns 
the length of the largest subarray with 0 sum.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(N).

Constraints:
1 <= N <= 105
-1000 <= A[i] <= 1000, for each valid i


MY_SOLUTION

Naive Approach: This involves the use of brute force where two nested loops are used. 
The outer loop is used to fix the starting position of the sub-array, and the inner loop is used for the ending position of the 
sub-array and if the sum of elements is equal to zero, then increase the count.

Algorithm: 
Consider all sub-arrays one by one and check the sum of every sub-array.
Run two loops: the outer loop picks the starting point i and the inner loop tries all sub-arrays starting from i.

Complexity Analysis:  
Time Complexity: O(n^2) due to the use of nested loops.
Space complexity: O(1) as no extra space is used


=====================================================================
Approach :  

Initialize a variable max = 0, which stores the length of the longest subarray with sum 0.
Traverse the array from start and initialize a variable sum = 0 which stores the sum of the subarray starting with the current index
Traverse from the next element of current_index up to the end of the array, each time add the element to the sum and check if it is equal to 0.
If sum = 0, check if the length of the subarray so far is > max and if yes update max
Now keep adding elements and repeat step 3 a.
After the outer loop traverses all elements return max
===========================================================



Efficient Approach: The brute force solution is calculating the sum of each and every sub-array and checking whether the sum is zero or not. 
Let's now try to improve the time complexity by taking an extra space of 'n' length. The new array will store the sum of all the elements up to that index. 
The sum-index pair will be stored in a hash-map. A Hash map allows insertion and deletion of key-value pair in constant time. 
Therefore, the time complexity remains unaffected. So, if the same value appears twice in the array, it will be guaranteed that the particular array 
will be a zero-sum sub-array. 

Algorithm:  


Create an extra space, an array of length n (prefix), a variable (sum), length (max_len), and a hash map (hm) to store the sum-index pair as a key-value pair.
Move along the input array from the start to the end.
For every index, update the value of sum = sum + array[i].
Check every index, if the current sum is present in the hash map or not.
If present, update the value of max_len to a maximum difference of two indices (current index and index in the hash-map) and max_len.
Else, put the value (sum) in the hash map, with the index as a key-value pair.
Print the maximum length (max_len).

Complexity Analysis: 
Time Complexity: O(n), as use of the good hashing function, will allow insertion and retrieval operations in O(1) time.
Space Complexity: O(n), for the use of extra space to store the prefix array and hashmap.


=====================================================================
Intuition:  Now let’s say we know that the sum of subarray(i, j) = S, and we also know that sum of subarray(i, x) = S where i < x < j. 
We can conclude that the sum of subarray(x+1, j) = 0.

Let us understand the above statement clearly


So in this problem, we’ll store the prefix sum of every element, and if we observe that 2 elements have same prefix sum, we can conclude that the 2nd 
part of this subarray sums to zero

Now let’s understand the approach

Approach: 

First let us initialise a variable say sum = 0 which stores the sum of elements traversed so far and another variable say max = 0 which stores the length of 
longest subarray with sum zero.
Declare a HashMap<Integer, Integer> which stores the prefix sum of every element as key and its index as value.
Now traverse the array, and add the array element to our sum. 
 (i)  If sum = 0, then we can say that the subarray until the current index has a sum = 0,      so we update max with the maximum value of (max, current_index+1)

(ii)  If sum is not equal to zero then we check hashmap if we’ve seen a subarray with this sum before

if HashMap contains sum -> this is where the above-discussed case occurs (subarray with equal sum), so we update our max 

else -> Insert (sum, current_index) into hashmap to store prefix sum until current index

After traversing the entire array our max variable has the length of longest substring having sum equal to zero, so return max.



=====================================================================

class GfG
{
    int maxLen(int arr[], int n)
    {
        // Your code here
        //Brute Force: T.C -> o(n^2)
        /*
        int max = 0;
        
        for(int i = 0; i < n; i++){
            int sum = 0;
            for(int j = i; j < n; j++){
                sum += arr[j];
                if(sum == 0){
                    max = Math.max(max,j-i+1);
                }
            }
        }
        return max;
        */
        // Optimised -> 
        int max = 0;
        int sum = 0;
        
        HashMap<Integer,Integer> map = new HashMap<Integer,Integer>();
        
        for(int i = 0; i < n; i++){
            sum += arr[i];
            if(sum == 0) max = i+1;
            
            else{
                if(map.get(sum) != null){
                    max = Math.max(max, i - map.get(sum));
                }
                else{
                    map.put(sum,i);
                }
            }
        }
        return max;
    }
}

