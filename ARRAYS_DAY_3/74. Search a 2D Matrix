Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
 

Example 1:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true
Example 2:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-104 <= matrix[i][j], target <= 104


MY_SOLUTION


class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        
        int row = 0;
        int column = matrix[0].length -1;
        //Approach: Start from the last column of a row
        // If target is less than the last element of the row
        // It means, row contains the target, so search it by doing column--;
        
        //If target is greater than the last element of the row
        // It means the row doesn't contains the target
        // So, increase the row by doing row++
        
        
        while(row < matrix.length && column >= 0){
            if(matrix[row][column] == target) return true;
            
            
            //If target is smaller than the last element of row
            if(target < matrix[row][column]){
                column--;
            }else{
                row++; // If target is greater than the last element of row;
            }
        }
        return false;
        
    }
}


/**
 * Optimized binary search solution
 *
 * Time Complexity: O(log(R * C))
 *
 * Space Complexity: O(1)
 *
 * R = Number of rows. C = Number of columns.
 */
 
 Approach: 

i) Initially have a low index as the first index of the considered 1D matrix(i.e: 0) and high index as the last index of the considered 1D matrix(i.e: (m*n)-1).

int low = 0;
int  high = (m*n)-1;
ii) Now apply binary search. Run a while loop with the condition low<=high. Get the middle index as (low+high)/2.
We can get the element at middle index using matrix[middle/m][middle%m].

while(low<=high)
    int middle = (low+high)/2;
iii) If the element present at the middle index is greater than the target, then it is obvious that the target element will not exist beyond the middle index. 
So shrink the search space by updating the high index to middle-1. 

if(matrix[middle/m][middle%m]<target)
    high = middle-1;
iv) If the middle index element is lesser than the target, shrink the search space by updating the low index to middle+1.

if(matrix[middle/m][middle%m]>target)
    low = middle+1;
v) If the middle index element is equal to the target integer, return true.

if(matrix[middle/m][middle%m]==target)
    return true;
vi) Once the loop terminates we can directly return false as we did not find the target element.


class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
    if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
        return false;
    }
    int row = matrix.length;
    int col = matrix[0].length;

    int low = 0;
    int high = (row*col) - 1;
    while (low <= high) {
        int mid = low + (high - low)/2;
        
        int row_mat = mid/col;
        int col_mat = mid%col;
        
        if (matrix[row_mat][col_mat] == target) {
            return true;
        }
        if (matrix[row_mat][col_mat] < target) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    return false;
}
}








==========================================================================================================================================================

// TC: O(log(mn)), SC: O(1)
    public boolean searchMatrix_BinarySearch(int[][] matrix, int target) {
        if (matrix.length == 0) return false;
        int rows = matrix.length, cols = matrix[0].length;

        int lo = 0, hi = rows * cols - 1;
        while (lo <= hi) {
            int mid = lo + (hi - lo) / 2;
            int num = matrix[mid / cols][mid % cols];
            if (num == target) return true;
            else if (num < target) lo = mid + 1;
            else hi = mid - 1;
        }
        return false;
    }

    // TC: O(mn + log(mn)), SC: O(mn)
    public boolean searchMatrix_ConstructAnArray(int[][] matrix, int target) {
        List<Integer> res = new ArrayList<>();
        int rows = matrix.length, cols = matrix[0].length;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) res.add(matrix[i][j]);
        }
        return Collections.binarySearch(res, target) >= 0;
    }

    // TC: O(m+n), SC: O(1)
    public boolean searchMatrix_BottomLeft(int[][] matrix, int target) {
        int rows = matrix.length, cols = matrix[0].length, i = rows - 1, j = 0;
        while (i >= 0 && i < rows && j >= 0 && j < cols) {
            int num = matrix[i][j];
            if (num == target) return true;
            if (num < target) j++;
            else i--;
        }
        return false;
    }

    // TC: O(m+n), SC: O(1)
    public boolean searchMatrix_TopRight(int[][] matrix, int target) {
        int rows = matrix.length, cols = matrix[0].length, i = 0, j = cols - 1;
        while (i >= 0 && i < rows && j >= 0 && j < cols) {
            int num = matrix[i][j];
            if (num == target) return true;
            if (num < target) i++;
            else j--;
        }
        return false;
    }

    // TC: O(mn), SC: O(1)
    public boolean searchMatrix_BruteForce(int[][] matrix, int target) {
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                if (matrix[i][j] == target) return true;
            }
        }
        return false;
    }

    // TC: O(mn), SC: O(1)
    public boolean searchMatrix_BruteForce_EnhancedForLoop(int[][] matrix, int target) {
        for (int[] rows : matrix) {
            for (int num : rows) {
                if (num == target) return true;
            }
        }
        return false;
    }
