There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). 
The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 109.

 

Example 1:


Input: m = 3, n = 7
Output: 28
Example 2:

Input: m = 3, n = 2
Output: 3
Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down
 

Constraints:

1 <= m, n <= 100


MY_SOLUTION

BRUTE FORCE -> TLE
class Solution {
    
    public int uniquePaths(int m, int n) {
        int row = m;
        int col = n;
        int[][] dp = new int[m+1][n+1];
        return count(dp,row,col);
        
    }
     static int count(int[][] dp,int row , int col){
         if(row == 1 || col == 1) return 1;
         if (row < 1 || col < 1) {
			return 0;
		}
         if(dp[row][col] != 0) return dp[row][col];
         int left = count(dp,row-1,col);
         int right = count(dp,row, col-1);
         return left+right;

     }
}


DP_SOLUTION
class Solution {
    
    public int uniquePaths(int m, int n) {
       /*
        int row = m;
        int col = n;
        int[][] dp = new int[m+1][n+1];
        return count(dp,row,col);
        
    }
     static int count(int[][] dp,int row , int col){
         if(row == 1 || col == 1) return 1;
         if (row < 1 || col < 1) {
			return 0;
		}
         if(dp[row][col] != 0) return dp[row][col];
         int left = count(dp,row-1,col);
         int right = count(dp,row, col-1);
         return dp[row][col] = left+right;
         */

        // Optimised -> Combinations Ncr = N-r!/r!
        
        int N = m+n-2;
        int r = m-1;
        double result = 1;
        
        for(int i = 1; i <= r; i++){
            result = result * (N-r+i)/i;
        }
        return (int)result;
     }
}

OPTIMISED  -> O(M-1), O(1)
class Solution {
    public int uniquePaths(int m, int n) {
        int N = m+n-2; //total step to reach to goal
        int r = m-1; //how many down step will be taken
        double res = 1; //result will be stored here
        for(int i=1; i<=r; i++){
            res = res*(N-r+i)/i;// finding combination of ncr
        }
        return (int)res;
    }
}

==================================================================================================================================================
If we start from m * n, then for every step we have two choice either go up or left. till both m and n reaches 0.
so keep on calling both and if m and n=0 return 1

Brute Force -

public int bruteForce(int m, int n) {
		if (m == 1 && n == 1) {
			return 1;
		}
		if (m < 1 || n < 1) {
			return 0;
		}
		return bruteForce(m - 1, n) + bruteForce(m, n - 1);
	}
Top Down

	public int topDown(int m, int n) {
		return helper(m, n, new Integer[m + 1][n + 1]);
	}

	private int helper(int m, int n, Integer[][] memo) {
		if (m == 1 && n == 1) {
			return 1;
		}
		if (m < 1 || n < 1) {
			return 0;
		}
		if (memo[m][n] != null) {
			return memo[m][n];
		}
		return memo[m][n] = helper(m - 1, n, memo) + helper(m, n - 1, memo);
	}
Bottom UP ->

public int bottomUp(int m, int n) {
		int[][] dp = new int[m + 1][n + 1];
		for (int i = 1; i <= m; i++) {
			for (int j = 1; j <= n; j++) {
				if (i == 1 || j == 1) {
					dp[i][j] = 1;
				} else {
					dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
				}
			}
		}
		return dp[m][n];
	}
