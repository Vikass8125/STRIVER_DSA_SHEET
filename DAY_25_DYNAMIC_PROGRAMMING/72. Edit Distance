Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')
 

Constraints:

0 <= word1.length, word2.length <= 500
word1 and word2 consist of lowercase English letters.


MY_SOLUTION


Intuition: 
For every index of string S1, we have three options to match that index with string S2, i.e replace the character, 
remove the character or insert some character at that index. Therefore, we can think in terms of string matching path as we have done already in previous questions.

As there is no uniformity in data, there is no other way to find out than to try out all possible ways. To do so we will need to use recursion.

Steps to form the recursive solution: 

We will first form the recursive solution by the three points mentioned in the Dynamic Programming Introduction. 

Step 1: Express the problem in terms of indexes.
We are given two strings. We can represent them with the help of two indexes i and j. Initially, i=n-1 and j=m-1, 
where n and m are lengths of strings S1 and S2. Initially, we will call f(n-1,m-1), 
which means the minimum number of operations required to convert string S1[0…n-1] to string S2[0…m-1].

We can generalize this as follows:



Step 2: Try out all possible choices at a given index.
Now, i and j represent two characters from strings S1 and S2 respectively. 
There are only two options that make sense: either the characters represented by i and j match or they don’t.

(i) When the characters match

if(S1[i]==S2[j]), 

If this is true, now as the characters at i and j match, we would not want to do any operations to make them match,
so we will just decrement both i and j by 1 and recursively find the answer for the remaining string portion. 
We return 0+f(i-1,j-1). The following figure makes it clear.



(ii) When the characters don’t match

if(S1[i] != S2[j]) is true, then we have to do any of three operations to match the characters. We have three options, we will analyze each of them one by one.

Case 1: Inserting a character

Consider this example,



Now if we have to match the strings by insertions, what would we do?: 

We would have placed an ‘s’ at index 5 of S1.
Suppose i now point to s at index 5 of S1 and j points are already pointing to s at index j of S2.
Now, we hit the condition, where characters do match. (as mentioned in case 1).
Therefore, we will decrement i and j by 1. They will now point to index 4 and 1 respectively.


Now, the number of operations we did were only 1 (inserting s at index 5) but do we need to really insert the ‘s’ at index 5 and modify the string? 
The answer is simply NO. As we see that inserting a character (here ‘s’ at index 5), we will eventually get to the third step. 
So we can just return 1+ f(i,j-1) as i remains there only after insertion and j decrements by 1. We can say that we have hypothetically inserted character s.

Case 2: Deleting a character 

Consider the same example,



We can simply delete the character at index 4 and check from the next index.



Now, j remains at its original index and we decrement i by 1. We perform 1 operation, therefore we will recursively call 1+f(i-1,j).

Case 3: Replacing a character 

Consider the same example,



If we replace the character ‘e’ at index 4 of S1 with ‘s’, we have matched both the characters ourselves.
We again hit the case of character matching, therefore we decrement both i and j by 1. As the number of operations performed is 1, we will return 1+f(i-1,j-1).

To summarise, these are the three choices we have in case characters don’t match:

return 1+f(i-1,j) // Insertion of character.
return 1+f(i,j-1) // Deletion of character.
return 1+f(i-1,j-1) // Replacement of character.
Step 3: Return the minimum of all choices.
As we have to return the minimum number of operations, we will return the minimum of all operations.

Base Cases:

We are reducing i and j in our recursive relation, there can be two possibilities, either i becomes -1 or j becomes -1., i,e we exhaust either S1 or S2 respectively.



The final pseudocode after steps 1, 2, and 3:



Steps to memoize a recursive solution:

If we draw the recursion tree, we will see that there are overlapping subproblems. In order to convert a recursive solution the following steps will be taken:

Create a dp array of size [n][m]. The size of S1 and S2 are n and m respectively, 
so the variable i will always lie between ‘0’ and ‘n-1’ and the variable j between ‘0’ and ‘m-1’.
We initialize the dp array to -1.
Whenever we want to find the answer to particular parameters (say f(i,j)), we first check whether the answer is already calculated using
the dp array(i.e dp[i][j]!= -1 ). If yes, simply return the value from the dp array.
If not, then we are finding the answer for the given value for the first time, we will use the recursive relation as usual but 
before returning from the function, we will set dp[i][j] to the solution we get.
Code: 

import java.util.*;

class TUF{
static int editDistanceUtil(String S1, String S2, int i, int j, int[][] dp){
    
    if(i<0)
        return j+1;
    if(j<0)
        return i+1;
        
    if(dp[i][j]!=-1) return dp[i][j];
        
    if(S1.charAt(i)==S2.charAt(j))
        return dp[i][j] =  0+editDistanceUtil(S1,S2,i-1,j-1,dp);
        
    // Minimum of three choices
    else return dp[i][j] = 1+Math.min(editDistanceUtil(S1,S2,i-1,j-1,dp),
    Math.min(editDistanceUtil(S1,S2,i-1,j,dp),editDistanceUtil(S1,S2,i,j-1,dp)));
    
}

static int editDistance(String S1, String S2){
    
    int n = S1.length();
    int m = S2.length();
    
    int[][] dp=new int[n][m];
    for(int row[]: dp)
    Arrays.fill(row,-1);
    return editDistanceUtil(S1,S2,n-1,m-1,dp);
    
}

public static void main(String args[]) {

  String s1 = "horse";
  String s2 = "ros";

  System.out.println("The minimum number of operations required is: "+
  editDistance(s1,s2));
}
}
Output: The minimum number of operations required is: 3

Time Complexity: O(N*M)

Reason: There are N*M states therefore at max ‘N*M’ new problems will be solved.

Space Complexity: O(N*M) + O(N+M)

Reason: We are using a recursion stack space(O(N+M)) and a 2D array ( O(N*M)).

Steps to convert Recursive Solution to Tabulation one.

In the recursive logic, we set the base case too if(i<0 ) and if(j<0) but we can’t set the dp array’s index to -1. 
Therefore a hack for this issue is to shift every index by 1 towards the right.



First we initialise the dp array of size [n+1][m+1] as zero.
Next, we set the base condition (keep in mind 1-based indexing), we set the first column’s value as i and the first row as j( 1-based indexing).
Similarly, we will implement the recursive code by keeping in mind the shifting of indexes, therefore S1[i] will be converted to S1[i-1]. Same for S2.
At last, we will print dp[N][M] as our answer.
Code:

import java.util.*;

class TUF{

static int editDistance(String S1, String S2){
    
    int n = S1.length();
    int m = S2.length();
    
    int[][] dp=new int[n+1][m+1];
     for(int i=0;i<=n;i++){
        dp[i][0] = i;
    }
    for(int j=0;j<=m;j++){
        dp[0][j] = j;
    }
    
    for(int i=1;i<n+1;i++){
        for(int j=1;j<m+1;j++){
            if(S1.charAt(i-1)==S2.charAt(j-1))
                dp[i][j] = 0+dp[i-1][j-1];
            
            else dp[i][j] = 1+Math.min(dp[i-1][j-1],Math.min(dp[i-1][j],dp[i][j-1]));
        }
    }
    
    return dp[n][m];
}

public static void main(String args[]) {

  String s1 = "horse";
  String s2 = "ros";

  System.out.println("The minimum number of operations required is: "+
  editDistance(s1,s2));
}
}
Output: The minimum number of operations required is: 3

Time Complexity: O(N*M)

Reason: There are two nested loops

Space Complexity: O(N*M)

Reason: We are using an external array of size ‘N*M’. Stack Space is eliminated.

Part 3: Space Optimization

If we closely look the relation,

dp[i][j] =  min(dp[i-1][j-1],dp[i-1][j],dp[i][j-1])

We see that to calculate a value of a cell of the dp array, we need only the previous row values (say prev). 
So, we don’t need to store an entire array. Hence we can space optimize it.

Approach:
We will space optimize in the following way:

We take two rows ‘prev’ and ‘cur’.
We initialize it to the base condition. Now, at starting the prev row needs to be initialized with its column value. 
Moreover, the cur variable whenever declared should have its first cell as a row value. (See the code).
Next, we implement the memoization logic. We replace dp[i-1] with prev and dp[i] by cur.
After every inner loop execution, we set prev=cur, for the next iteration.
At last, we return prev[m] as our answer.
Code:

import java.util.*;

class TUF{

static int editDistance(String S1, String S2){
    
    int n = S1.length();
    int m = S2.length();
    
    int[] prev=new int[m+1];
    int[] cur=new int[m+1];
    
    for(int j=0;j<=m;j++){
        prev[j] = j;
    }
    
    for(int i=1;i<n+1;i++){
        cur[0]=i;
        for(int j=1;j<m+1;j++){
            if(S1.charAt(i-1)==S2.charAt(j-1))
                cur[j] = 0+prev[j-1];
            
            else cur[j] = 1+Math.min(prev[j-1],Math.min(prev[j],cur[j-1]));
        }
        prev = (int[])(cur.clone());
    }
    
    return prev[m];
    
}

public static void main(String args[]) {

  String s1 = "horse";
  String s2 = "ros";

  System.out.println("The minimum number of operations required is: "+
  editDistance(s1,s2));
}
}
Output: The minimum number of operations required is: 3

Time Complexity: O(N*M)

Reason: There are two nested loops.

Space Complexity: O(M)

Reason: We are using an external array of size ‘M+1’ to store two rows.


===========================================================================
Recursive Approach
We will write a recursive approach.
The base case would be if the length of the first string is 0 then we need to add all the characters of the second string to the first string
hence return the length of the second string. Similarly, if the length of the second string is 0 return length of the first string.
Now the recurrence relation is as follows:
If the last characters of two strings are not the same, try all operations and it will cost 1. 
Here i is initially the last index of s1 and j is initially the last index of s2 and f(i, j) is the edit distance of str1(0, i) to str2(0, j). 
str(i, j) denotes the substring formed by taking the characters at index i through index j.
f(i, j) = 1 + min(f(i - 1, j), f(i, j - 1), f(i - 1, j - 1)) 
Here the three recursive calls are for the insert, remove and replace respectively and s1, s2 will be parameters of all function calls. 
If the last characters of two strings are the same (s1[i] == s2[j]) then the relationship would be:
f(i, j) = f(i - 1, j - 1)
Time Complexity
O(3 ^ (N * M)), Where N is the size of the first string and M is the size of the second string.

 

Since we are making 3 recursive calls each time, therefore the time complexity is O(3 ^ (N * M)).

Space Complexity
O(N + M), Where N is the size of the first string and M is the size of the second string.

Since we are making recursive calls that require the recursion stack. Therefore the space complexity is O(N + M).

/*
    Time Complexity : O(3 ^ (N * M))
    Space Complexity : O(N + M)

    Where N is the size of first string and M is the size of second string.
*/

public class Solution 
{

	private static int editDistanceHelper(int i, int j, String str1, String str2) 
	{
		// insert all characters of second string into first
		if (i == 0) 
		{
			return j;
		}

		// If second string is empty, the only option is to
		// remove all characters of first string
		if (j == 0) 
		{
			return i;
		}

		// If last characters are not same, consider all three
		// operations on last character of first string, recursively
		// compute minimum cost for all three operations and take
		// minimum of three values.
		int ans = 1 + Math.min(Math.min(
		                           editDistanceHelper(i, j - 1, str1, str2),	// Insert
		                           editDistanceHelper(i - 1, j, str1, str2)),	// Remove
		                       editDistanceHelper(i - 1, j - 1, str1, str2) 	// Replace
		                      );


		// If last characters of two strings are same, nothing
		// much to do. Ignore last characters and get count for
		// remaining strings.
		if (str1.charAt(i - 1) == str2.charAt(j - 1)) 
		{
			ans = Math.min(ans, editDistanceHelper(i - 1, j - 1, str1, str2));
		}

		return ans;
	}

	public static int editDistance(String str1, String str2) 
	{

		int n = str1.length(), m = str2.length();
		int ans = editDistanceHelper(n, m, str1, str2);

		return ans;
	}
}

=======================================
Memoization
We will write a recursive approach and memoize it. So first make a 2D array of size (N + 1) x (M + 1) where N and M are lengths of the two strings and fill it with -1.
-1 means that we don’t know the answer for that state.
The base case would be if the length of the first string is 0 then we need to add all the characters of the second string to the first string hence return the
length of the second string. Similarly, if the length of the second string is 0 return the length of the first string. Else check the value of the dp array at 
index i, j. If it's not equal to -1, simply return its value. Otherwise, go the following step
The recurrence relation is as follows:
If the last characters of two strings are not the same, try all operations and it will cost 1. Here i is initially the last index of s1 and j is initially
the last index of s2. f(i, j) is the edit distance of str1(0, i) and str2(0, j).
str(i, j) denotes the substring formed by taking the characters at index i through index j.
f(i, j) = 1 + min(f(i - 1, j), f(i, j - 1), f(i - 1, j - 1)) 
Here the three recursive calls are for the insert, remove and replace respectively and s1, s2 will be parameters of all function calls.
If the last characters of two strings are the same (s1[i] == s2[j]) then the relationship would be:
f(i, j) = f(i - 1, j - 1)
Before returning the result, store it in the array at index i, j.  This will save the overlapping subproblems.
Time Complexity
O(N * M), where N is the length of the first string and M is the length of the second string.

 

Since we fill the entire memoization array and we visit each cell just once via recursion. Therefore the time complexity is O(N * M).

Space Complexity
O(N * M), where N is the length of the first string and M is the length of the second string

 

Since we are making a 2-dimensional array of size N * M. Therefore the space complexity is O(N * M).

/*
    Time Complexity : O(M * N)
    Space Complexity : O(M * N)

    Where N is the size of first string and M is the size of second string
*/

public class Solution {

    private static int editDistanceHelper(int i, int j, String str1, String str2, int[][] dp) {
        // insert all characters of second string into first
        if (i == 0)
        {
            return j;
        }

        // If second string is empty, the only option is to
        // remove all characters of first string
        if (j == 0) {
            return i;
        }

        if (dp[i][j] != -1) {
            return dp[i][j];
        }

        // If last characters are not same, consider all three
        // operations on last character of first string, recursively
        // compute minimum cost for all three operations and take
        // minimum of three values.
        int ans = 1 + Math.min(Math.min(
                          editDistanceHelper(i, j - 1, str1, str2, dp),    // Insert
                          editDistanceHelper(i - 1, j, str1, str2, dp)),   // Remove
                          editDistanceHelper(i - 1, j - 1, str1, str2, dp) // Replace
                      );

        /*
        // If last characters of two strings are same, nothing
        // much to do. Ignore last characters and get count for
        // remaining strings.
        */
        if (str1.charAt(i - 1) == str2.charAt(j - 1)) {
            ans = Math.min(ans, editDistanceHelper(i - 1, j - 1, str1, str2, dp));
        }

        dp[i][j] = ans;
        return ans;
    }

    public static int editDistance(String str1, String str2) {
        int n = str1.length(), m = str2.length();
        
        int[][] dp = new int[n + 1][m + 1];

        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= m; j++) {
                dp[i][j] = -1;
            }
        } 

        int ans = editDistanceHelper(n, m, str1, str2, dp);
      
        return ans;
    }
}

==========================================
Iterative DP
We will use the dynamic programming approach here and will have a 2-dimensional array, dp where

dp[i][j] stores the edit distance of the (i+1)th length substring of str1 and (j+1)th length substring of str2 starting from index 0

 

The base case would be when the size of first-string is 0 then edit distance will be equal to the size of other string i.e when i = 0 then dp[i][j] = j and
similarly vice versa, so if j = 0 then dp[i][j] = i.

 

Now we will use our recurrence relation  

// If str1[i - 1] == str2[j - 1]
dp[i][j] = dp[i-1][j-1]
// Otherwise
dp[i][j] = 1 + min(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1])
Time Complexity
O(N * M), where N is the length of the first string and M is the length of the second string.

 

Since we are running two nested loops of sizes N and M. Therefore the time complexity is O(N * M).

Space Complexity
O(N * M), where N is the length of the first string and M is the length of the second string.

 

Since we are making a 2-dimensional array of size N * M. Therefore the space complexity is O(N * M).

/*
    Time Complexity : O(N * M)
    Space Complexity : O(N * M)

    Where N is the size of first string and M is the size of second string
*/

public class Solution 
{

	public static int editDistance(String str1, String str2) 
	{

		int n = str1.length(), m = str2.length();
		int[][] dp = new int [n + 1][m + 1];

		// dp[i][j] stores the edit distance of the i+1th length substring of str1 and
		// and j+1th length substring of str2 starting from 0 index
		// Dynamically allocate memory of size N for each row
		for (int i = 0; i <= n; i++) 
		{
			for (int j = 0; j <= m; j++) 
			{
				// If first string is empty, only option is to
				// insert all characters of second string considering other string of j length
				// so min operation would be j

				if (i == 0) 
				{
					dp[i][j] = j;
				}

				else if (j == 0) 
				{
					dp[i][j] = i;
				}

				// If last characters are same, then it doesnt cost anything
				else if (str1.charAt(i - 1) == str2.charAt(j - 1)) 
				{
					dp[i][j] = dp[i - 1][j - 1];
				}

				// If the last character is different, consider all
				// possibilities and find the minimum
				else 
				{
					dp[i][j] = 1 + Math.min(Math.min(dp[i][j - 1], dp[i - 1][j]), dp[i - 1][j - 1]);
				}
			}
		}

		int ans = dp[n][m];

		return ans;
	}
}
==============================================================================================

Let following be the function definition :-

f(i, j) := minimum cost (or steps) required to convert first i characters of word1 to first j characters of word2

Case 1: word1[i] == word2[j], i.e. the ith the jth character matches.

f(i, j) = f(i - 1, j - 1)

Case 2: word1[i] != word2[j], then we must either insert, delete or replace, whichever is cheaper

f(i, j) = 1 + min { f(i, j - 1), f(i - 1, j), f(i - 1, j - 1) }

f(i, j - 1) represents insert operation
f(i - 1, j) represents delete operation
f(i - 1, j - 1) represents replace operation
Here, we consider any operation from word1 to word2. It means, when we say insert operation, we insert a new character after word1 that matches the jth character of word2. So, now have to match i characters of word1 to j - 1 characters of word2. Same goes for other 2 operations as well.

Note that the problem is symmetric. The insert operation in one direction (i.e. from word1 to word2) is same as delete operation in other. So, we could choose any direction.

Above equations become the recursive definitions for DP.

Base Case:

f(0, k) = f(k, 0) = k

Below is the direct bottom-up translation of this recurrent relation. It is only important to take care of 0-based index with actual code :-

public class Solution {
    public int minDistance(String word1, String word2) {
        int m = word1.length();
        int n = word2.length();
        
        int[][] cost = new int[m + 1][n + 1];
        for(int i = 0; i <= m; i++)
            cost[i][0] = i;
        for(int i = 1; i <= n; i++)
            cost[0][i] = i;
        
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(word1.charAt(i) == word2.charAt(j))
                    cost[i + 1][j + 1] = cost[i][j];
                else {
                    int a = cost[i][j];
                    int b = cost[i][j + 1];
                    int c = cost[i + 1][j];
                    cost[i + 1][j + 1] = a < b ? (a < c ? a : c) : (b < c ? b : c);
                    cost[i + 1][j + 1]++;
                }
            }
        }
        return cost[m][n];
    }
}
Time complexity : If n is the length of word1, m of word2, because of the two indented loops, it is O(nm)


=====================================================================================
public class Solution {
    int[][] dp;
    
    public int minDistance(String word1, String word2) {
	dp = new int[word1.length()][word2.length()];
	    
        return minDistanceHelper(word1, word2, 0, 0);
    }
    
    private int minDistanceHelper(String word1, String word2, int index1, int index2) {
        if (index1 == word1.length()) return word2.length() - index2;
        if (index2 == word2.length()) return word1.length() - index1;
	    
	if (dp[index1][index2] > 0) return dp[index1][index2];
        
        int result;
        if (word1.charAt(index1) == word2.charAt(index2)) {
            result = minDistanceHelper(word1, word2, index1+1, index2+1);
        } else {
            // replace char
            result = 1 + minDistanceHelper(word1, word2, index1+1, index2+1);
            
            // delete char from word1
            result = Math.min(result, 1 + minDistanceHelper(word1, word2, index1+1, index2));
            
            // delete char from word2
            result = Math.min(result, 1 + minDistanceHelper(word1, word2, index1, index2+1));
        }
        
	dp[index1][index2] = result;
	return result;
    }
}

=============================================================================
We only need to edit one word because insert a char to word1 is equivalent to delete a char in word2 and vise versa. Replace a char in word1 is equivalent to replace a char in word2.

O(3^max(n1,n2)) We edit word 1 only and there are 3 operations
c++
    int minDistance(string word1, string word2) {
        return minDistance(0,0,word1,word2);
    }
    int minDistance(int p1, int p2, string &word1, string &word2) {
        if(p1==word1.size()) return word2.size()-p2; //dist between a string and an empty string
        if(p2==word2.size()) return word1.size()-p1;
        if(word1[p1]==word2[p2]) return minDistance(p1+1,p2+1,word1,word2);
        int ins = minDistance(p1,p2+1,word1,word2);
        int del = minDistance(p1+1,p2,word1,word2);
        int rpl = minDistance(p1+1,p2+1,word1,word2);
        return min(ins,min(del,rpl))+1;
    }
java
	public int minDistance(String word1, String word2) {
        return minDist(0,0,word1,word2);  
    }
    private int minDist(int p1, int p2, String word1, String word2) {
        int s1=word1.length(),s2=word2.length();
        if(p1==s1) return s2-p2; //We only edit word1, but since both insert and delete are allowed, word1 may not finish first
        if(p2==s2) return s1-p1; //The two ternimation checks make sure both indexes are valid
        if(word1.charAt(p1)==word2.charAt(p2)) 
            return minDist(p1+1,p2+1,word1,word2);
        int ins = minDist(p1,p2+1,word1,word2);
        int del = minDist(p1+1,p2,word1,word2);
        int rep = minDist(p1+1,p2+1,word1,word2);
        return Math.min(ins, Math.min(del, rep))+1;
    }
}
O(n1n2) memorization
c++
    int minDistance(string word1, string word2) {
        vector<vector<int>> mem(word1.size(),vector<int>(word2.size(),-1));
        return minDistance(0,0,word1,word2,mem);
    }
    int minDistance(int p1, int p2, string &word1, string &word2,vector<vector<int>>& mem) {
        if(p1==word1.size()) return word2.size()-p2;
        if(p2==word2.size()) return word1.size()-p1;
        if(mem[p1][p2]>=0) return mem[p1][p2];
        if(word1[p1]==word2[p2]) return mem[p1][p2]=minDistance(p1+1,p2+1,word1,word2,mem);
        int ins = minDistance(p1,p2+1,word1,word2,mem);
        int del = minDistance(p1+1,p2,word1,word2,mem);
        int rpl = minDistance(p1+1,p2+1,word1,word2,mem);
        return mem[p1][p2] = min(ins,min(del,rpl))+1;
    }
java
	public int minDistance(String word1, String word2) {
        Integer[][] mem=new Integer[word1.length()][word2.length()];
        return minDist(0,0,word1,word2,mem);  
    }
    private int minDist(int p1, int p2, String word1, String word2, Integer[][] mem) {
        int s1=word1.length(),s2=word2.length();
        if(p1==s1) return s2-p2; //We only edit word1, but since both insert and delete are allowed, word1 may not finish first
        if(p2==s2) return s1-p1; //The two ternimation checks make sure both indexes are valid
        if(mem[p1][p2]!=null) return mem[p1][p2];
        if(word1.charAt(p1)==word2.charAt(p2)) 
            return mem[p1][p2]=minDist(p1+1,p2+1,word1,word2,mem);
        int ins = minDist(p1,p2+1,word1,word2,mem);
        int del = minDist(p1+1,p2,word1,word2,mem);
        int rep = minDist(p1+1,p2+1,word1,word2,mem);
        return mem[p1][p2]=Math.min(ins, Math.min(del, rep))+1;
    }
O(n1n2) dp
c++
    int minDistance(string word1, string word2) {
        int n1 = word1.size(),n2=word2.size();
        vector<vector<int>> dp(n1+1,vector<int>(n2+1));
        for(int i=0;i<n1;i++) dp[i][n2] = n1-i;
        for(int j=0;j<n2;j++) dp[n1][j] = n2-j;
        for(int i=n1-1;i>=0;i--)
            for(int j=n2-1;j>=0;j--) 
                dp[i][j] = word1[i]==word2[j]? dp[i+1][j+1] : min(min(dp[i][j+1],dp[i+1][j]),dp[i+1][j+1])+1;
        return dp[0][0];
    }
java
	public int minDistance(String word1, String word2) {
        int n1=word1.length(), n2=word2.length();
        int[][] dp=new int[n1+1][n2+1];
        for(int i=0;i<n1;i++) dp[i][n2]=n1-i;
        for(int i=0;i<n2;i++) dp[n1][i]=n2-i;
        for(int i=n1-1;i>=0;i--)
            for(int j=n2-1;j>=0;j--) {
                if(word1.charAt(i)==word2.charAt(j))
                    dp[i][j]=dp[i+1][j+1];
                else {
                    dp[i][j]=Math.min(dp[i][j+1],Math.min(dp[i+1][j],dp[i+1][j+1]))+1;
                }
            }
        return dp[0][0];  
    }
linear space dp
    int minDistance(string word1, string word2) {
        int s1=word1.size(),s2=word2.size();
        vector<int> dp(s1+1);
        iota(dp.rbegin(),dp.rend(),0);
        for(int i=s2-1;i>=0;i--) {
            int i1j1 = dp[s1];
            dp[s1] = s2-i;
            for(int j=s1-1;j>=0;j--) {
                int temp=dp[j];
                dp[j]=min(dp[j+1]+1,min(dp[j]+1,i1j1+(word2[i]!=word1[j])));
                i1j1=temp;
            }
        }
        return dp[0];
    }
    
    
 ====================================================
 Firstly go and read the code this is further explaination to my code you will get the explaination better after reading the code once
and this explaination is also covering the aswer to the comment .

i m just checking at every index whether that character is equal or not, if equal I just have to move further , but in case characters are not equal we can have 3 operations, ins, del, replace. and we are storing the minimum out of these three in the DP array.

let's say s1 as "abc" and s2 as "abd" ,and we are at index 2, always if found both characters are different

// Insertion (dp[i][j-1])
I m always inserting at the right of the current char

s1 - "abc" s2 - "abd"
i is at c in s1
j is at d in s2.

after insertion
s1 become "abcd", s2 remain the same "abd" ,
i is currently at c in s1
and j is currently at d in s2 , but as we have inserted a 'd' in s1 we have to decrement j , i remains the same
i = I; j = j-1;

// deletion ( dp[i-1][j] )

if I chooses to delete c , instead of inserting d , in this case if I m deleting c then I have to decrement i , but j remains the same.
s1 - "abc" s2 - "abd"
i is at c in s1
j is at d in s2

after deletion s1 - "ab" s2 - "abd"
as we have deleted c from s1 we should decrement i , but we will only decrement j once we found character equal to d in s1
I = i-1 , j = j;

// replace (dp[i-1][j-1])

if I choose to replace i m making the current characters equal then I need to decrement both indices , I, j , because current characters are equal
now we only have to check for remaining string

ex ----- s1 - "abc" s2 - "abd"
if I choose to replace 'c' by 'd' then both the strings become
s1 ---- "abd" s2 ---- "abd"
as i is at d in s1
and also j is at d in s2 , and both the characters are equal we just have to decrement both.
I = i-1 , j = j-1;

Note we are decrementing j only when both the character matches**

//	if character matches then just decrement both the index , but if they don't matches then store the minimum possibl;e value by applying
	// each operation at that particular index.
	
	Java code
		
		class Solution {
			public int minDistance(String s1, String s2) {
				int n = s1.length();
				int m = s2.length();
				int[][] dp = new int[n+1][m+1];
				
				// base cases will contain the length of string which is not empty
				//because to convert empty string to another string we need no of operations = length of string
				for(int i=0;i<=n;i++){
					dp[i][0] = i;
				}
				for(int i=0;i<=m;i++){
					dp[0][i] = i;
				}

				for(int i=1;i<=n;i++){
					for(int j=1;j<=m;j++){
						if(s1.charAt(i-1) == s2.charAt(j-1)){
						//as characters are the same we are just decreasing the index
							dp[i][j] = dp[i-1][j-1];
						}else{
						//chars are not the same now we have to put the minimum ans out of ans obtained by  insertion,deletion,replace  
							//	minimum answer              min(insertion , deletion )          min(deletion,replace)             
							dp[i][j] = 1 + Math.min( Math.min(dp[i][j-1] ,dp[i-1][j]) , Math.min(dp[i-1][j] ,dp[i-1][j-1]) );
						}
					}
				}
				return dp[n][m];
			}
		}
		
			
		//If the post was helpful please upvote , any query can be asked in the comments
		//thankyou for your upvote
C++ Code --------- Logic is same in both only difference is in syntax............

//	if character matches then just decrement both the index , but if they don't matches then store the minimum possibl;e value by applying
	// each operation at that particular index.

	class Solution {
	public:
		int minDistance(string s1, string s2) {
			int n = s1.length();
			int m = s2.length();
			int dp[n+1][m+1];

				// base cases will contain the length of string which is not empty
				//because to convert empty string to another string we need no of operations = length of string
				
			for(int i=0;i<=n;i++){
				dp[i][0] = i;
			}
			for(int i=0;i<=m;i++){
				dp[0][i] = i;
			}
			for(int i=1;i<=n;i++){
				for(int j =1;j<=m;j++){
				//as characters are the same we are just decreasing the index
					if(s1[i-1] == s2[j-1]){
						dp[i][j] = dp[i-1][j-1];
					}else{
//chars are not the same now we have to put the minimum ans out of ans obtained by  insertion,deletion,replace 
//	minimum answer    =          min(  min(insertion , deletion )  ,  min(deletion,replace)   )          
						dp[i][j] = 1+ min(min(dp[i][j-1] , dp[i-1][j]) , min(dp[i-1][j-1] , dp[i-1][j-1]));
					}
				}
			}
			return dp[n][m];

		}
	};
==============================================
