Problem Statement: 0/1 Knapsack

Problem Link: 0/1 Knapsack

A thief wants to rob a store. He is carrying a bag of capacity W. The store has ‘n’ items. 
Its weight is given by the ‘wt’ array and its value by the ‘val’ array. He can either include an item in its knapsack or exclude it 
but can’t partially have it as a fraction. We need to find the maximum value of items that the thief can steal.

Explanation:

Disclaimer: Don’t jump directly to the solution, try it out yourself first.

Pre-req: Count Subsets with Sum K

Solution :
Why a Greedy Solution doesn’t work?

The first approach that comes to our mind is greedy. A greedy solution will fail in this problem because there is no ‘uniformity’ in data.
While selecting a local better choice we may choose an item that will in long term give less value.

Let us understand this with help of an example:



A Greedy solution will be to take the most valuable item first, so we will take an item on index 2, with a value of 60, and put it in the knapsack. 
Now the remaining capacity of the knapsack will be 1. Therefore we cannot add any other item. So a greedy solution gives us the answer 60.

Now we can clearly see that a non-greedy solution of taking the first two items will give us the value of 70 (30+40) in the given capacity of the knapsack.

As the greedy approach doesn’t work, we will try to generate all possible combinations using recursion and select the combination which gives us 
the maximum value in the given constraints.

Steps to form the recursive solution: 

We will first form the recursive solution by the three points mentioned in Dynamic Programming Introduction. 

Step 1: Express the problem in terms of indexes.

We are given ‘n’ items. Their weight is represented by the ‘wt’ array and value by the ‘val’ array.
So clearly one parameter will be ‘ind’, i.e index up to which the array items are being considered.

There is one more parameter “W”. We need the capacity of the knapsack to decide whether we can pick an array item or not in the knapsack.

So, we can say that initially, we need to find f(n-1, W) where W is the overall capacity given to us. f(n-1, W) means we are finding the maximum 
value of items that the thief can steal from items with index 0 to n-1 capacity W of the knapsack.



Base Cases:

If ind==0, it means we are at the first item, so in that case we will check whether this item’s weight is less than or equal to the current 
capacity W, if it is, we simply return its value (val[0]) else we return 0.


Step 2: Try out all possible choices at a given index.

We need to generate all the subsequences. We will use the pick/non-pick technique as discussed in this video “Recursion on Subsequences”.

We have two choices:

Exclude the current element in the subsequence: We first try to find a subsequence without considering the current index item. 
If we exclude the current item, the capacity of the bag will not be affected and the value added will be 0 for the current item. 
So we will call the recursive function f(ind-1,W)
Include the current element in the subsequence: We will try to find a subsequence by considering the current item to the knapsack.
As we have included the item, the capacity of the knapsack will be updated to W-wt[ind] and the current item’s value (val[ind] will
also be added to the further recursive call answer. We will make a recursive call to f(ind-1, W- wt[ind]).
Note: We will consider the current item in the subsequence only when the current element’s weight is less than or equal to the
capacity ‘W’ of the knapsack, if it isn’t we will not be considering it.



Step 3:  Return the maximum of take and notTake

As we have to return the maximum amount of value, we will return the max of take and notTake as our answer.

The final pseudocode after steps 1, 2, and 3:



Steps to memoize a recursive solution:

If we draw the recursion tree, we will see that there are overlapping subproblems. In order to convert a recursive solution the following steps will be taken:

Create a dp array of size [n][W+1]. The size of the input array is ‘N’, so the index will always lie between ‘0’ and ‘n-1’. 
The capacity can take any value between ‘0’ and ‘W’. Therefore we take the dp array as dp[n][W+1]
We initialize the dp array to -1.
Whenever we want to find the answer of particular parameters (say f(ind,target)), we first check whether the answer is already 
calculated using the dp array(i.e dp[ind][target]!= -1 ). If yes, simply return the value from the dp array.
If not, then we are finding the answer for the given value for the first time, we will use the recursive relation as usual
but before returning from the function, we will set dp[ind][target] to the solution we get.
Code:

import java.util.*;

class TUF{
static int knapsackUtil(int[] wt,int[] val, int ind, int W,int[][] dp){

    if(ind == 0){
        if(wt[0] <=W) return val[0];
        else return 0;
    }
    
    if(dp[ind][W]!=-1)
        return dp[ind][W];
        
    int notTaken = 0 + knapsackUtil(wt,val,ind-1,W,dp);
    
    int taken = Integer.MIN_VALUE;
    if(wt[ind] <= W)
        taken = val[ind] + knapsackUtil(wt,val,ind-1,W-wt[ind],dp);
        
    return dp[ind][W] = Math.max(notTaken,taken);
}


static int knapsack(int[] wt,int[] val, int n, int W){
    
    int dp[][]= new int[n][W+1];
    for(int row[]: dp)
    Arrays.fill(row,-1);
    return knapsackUtil(wt, val, n-1, W, dp);
}

public static void main(String args[]) {

  int wt[] = {1,2,4,5};
  int val[] = {5,4,8,6};
  int W=5;
  
  int n = wt.length;
                                 
  System.out.println("The Maximum value of items, thief can steal is "+
  knapsack(wt,val,n,W));
}
}
Output:

The Maximum value of items, thief can steal is 13

Time Complexity: O(N*W)

Reason: There are N*W states therefore at max ‘N*W’ new problems will be solved.

Space Complexity: O(N*W) + O(N)

Reason: We are using a recursion stack space(O(N)) and a 2D array ( O(N*W)).

Steps to convert Recursive Solution to Tabulation one.

To convert the memoization approach to a tabulation one, create a dp array with the same size as done in memoization. We can initialize it as 0.

First, we need to initialize the base conditions of the recursive solution.

At ind==0, we are considering the first element, if the capacity of the knapsack is greater than the weight of the first item, we return val[0] as answer. 
We will achieve this using a for loop. 
Next, we are done for the first row, so our ‘ind’ variable will move from 1 to n-1, whereas our ‘cap’ variable will move from 0 to ‘W’.
We will set the nested loops to traverse the dp array.
Inside the nested loops we will apply the recursive logic to find the answer of the cell.
When the nested loop execution has ended, we will return dp[n-1][W] as our answer.
Code:

import java.util.*;

class TUF{
static int knapsack(int[] wt,int[] val, int n, int W){
    
    int dp[][] = new int[n][W+1];
    
    //Base Condition
    
    for(int i=wt[0]; i<=W; i++){
        dp[0][i] = val[0];
    }
    
    for(int ind =1; ind<n; ind++){
        for(int cap=0; cap<=W; cap++){
            
            int notTaken = 0 + dp[ind-1][cap];
            
            int taken = Integer.MIN_VALUE;
            if(wt[ind] <= cap)
                taken = val[ind] + dp[ind-1][cap - wt[ind]];
                
            dp[ind][cap] = Math.max(notTaken, taken);
        }
    }
    
    return dp[n-1][W];
}

public static void main(String args[]) {

  int wt[] = {1,2,4,5};
  int val[] = {5,4,8,6};
  int W=5;
  
  int n = wt.length;
                                 
  System.out.println("The Maximum value of items, thief can steal is " 
  +knapsack(wt,val,n,W));
}
}
Output:

The Maximum value of items, thief can steal is 13

Time Complexity: O(N*W)

Reason: There are two nested loops

Space Complexity: O(N*W)

Reason: We are using an external array of size ‘N*W’. Stack Space is eliminated.

Part 3: Space Optimization

If we closely look the relation,

dp[ind][cap] =  max(dp[ind-1][cap] ,dp[ind-1][cap-wt[ind]]

We see that to calculate a value of a cell of the dp array, we need only the previous row values (say prev). So, we don’t need to store an entire array. 
Hence we can space optimize it.

We will be space optimizing this solution using only one row.

Intuition:

If we closely observe, we fill in the following manner in two-row space optimization:

We will  initialize the first row and then using its values we will the next row.


If we clearly see the values required:  dp[ind-1][cap] and dp[ind-1][cap – wt[ind]], we can say that if we are at a column cap, 
we will only require the values shown in the green region and none in the red region shown in the below image 
( because cap – wt[ind] will always be less than the cap).


As we don’t want values from the right, we can start filling this new row from the right rather than the left.


Now here is the catch, if we are filling from the right and at any time we need the previous row’s value of the leftward columns only, 
why do we need to have two rows in the first place? We can use a single row and overwrite the new computed values on itself in order to store it.


Code:

import java.util.*;

class TUF{
static int knapsack(int[] wt,int[] val, int n, int W){
    
    int prev[]=new int[W+1];
    
    //Base Condition
    
    for(int i=wt[0]; i<=W; i++){
        prev[i] = val[0];
    }
    
    for(int ind =1; ind<n; ind++){
        for(int cap=W; cap>=0; cap--){
            
            int notTaken = 0 + prev[cap];
            
            int taken = Integer.MIN_VALUE;
            if(wt[ind] <= cap)
                taken = val[ind] + prev[cap - wt[ind]];
                
            prev[cap] = Math.max(notTaken, taken);
        }
    }
    
    return prev[W];
}

public static void main(String args[]) {

  int wt[] = {1,2,4,5};
  int val[] = {5,4,8,6};
  int W=5;
  
  int n = wt.length;
                                 
  System.out.println("The Maximum value of items, thief can steal is " +knapsack(wt,val,n,W));
}
}
Output:

The Maximum value of items, thief can steal is 13

Time Complexity: O(N*W)

Reason: There are two nested loops.

Space Complexity: O(W)

Reason: We are using an external array of size ‘W+1’ to store only one row.


==================================================

Recursion
This problem can be solved by solving its subproblems and then combining the solutions of the solved subproblems to solve the original problem. 
We will do this using recursion.

We will consider every subset of the given items and calculate the weight and value of each subset. 
We will consider only those subsets whose total weight is smaller than or equal to ‘W’. Finally, pick the subset with the maximum value. 

The base case of the recursion would be when no items are left or the remaining capacity of the knapsack is 0. 

How to generate subsets? 

The thief has two options for each item, either pick it or leave it. 

Thus, there are two cases for each item: 

Include the item in the set and recur for the remaining items with the decreased capacity of the knapsack.
Do not include the item and recur for the remaining items.
Note that we can only include an item in the set if and only if the weight of the item is less than or equal to the remaining weight of the knapsack. 

Finally, return the maximum value of the items in the knapsack obtained by including or excluding the current item. 

Time Complexity
O(2 ^ N), where N is the number of items.

There are N items available and for each item, we can either include it or exclude it. 
In the worst case, we will be generating every possible subset of the given items. Thus, the final time complexity is O(2 ^ N). 

Space Complexity
O(N), where N is the number of items.

We are not using any external data structure. Only recursion stack space of O(N) size is used by the algorithm.

/*

	Time Complexity: O(2 ^ N)
	Space Complexity: O(N)
	
	Where N is the number of items.

*/

import java.util.ArrayList;

public class Solution {
	private static int maxProfitHelper(ArrayList<Integer> values, ArrayList<Integer> weights, int currIndex, int w) {
		// Base condition
		if (currIndex == values.size() || w == 0) {
			return 0;
		}

		int result = 0;

		// If the weight of the current item is less than or equal to the capacity of
		// the knapsack
		if (weights.get(currIndex).intValue() <= w) {
			// Max profit by including the current item
			int include = values.get(currIndex)
					+ maxProfitHelper(values, weights, currIndex + 1, w - weights.get(currIndex));

			// Max Profit by excluding the current item
			int exclude = maxProfitHelper(values, weights, currIndex + 1, w);

			// Update the result
			result = Math.max(include, exclude);
		} else {
			// We can't include the current item
			result = maxProfitHelper(values, weights, currIndex + 1, w);

		}
		// Return final profit
		return result;
	}

	public static int maxProfit(ArrayList<Integer> values, ArrayList<Integer> weights, int n, int w) {
		return maxProfitHelper(values, weights, 0, w);
	}
}

=============================================
Memoization
We are solving this problem by solving its subproblems and then combining the solutions of those subproblems. 
If we analyze carefully, we will see that we are solving the same subproblems multiple times. Thus, this problem exhibits overlapping subproblems. 
Thus, in this approach, we will eliminate the need for solving the same subproblems again and again. 

Lets understand by an example:

Suppose there are 3 items with weights [2, 2, 3] and the capacity of the knapsack is 5.

The below figure shows some of the recursive calls made for the given problem. 

Representation format : N, [weights], W

As we can see, some subproblems are called multiple times. 

Same subproblems are shown by the same colour.

That’s why we are storing the solved subproblems in a lookup table so that we don’t have to solve them again. 
Whenever a call is made to the solved subproblem, we will directly return the answer of that subproblem stored in the lookup table.

 

Algorithm: 

The idea is to use memoization.
Create a 2-D lookup table of size (N + 1) * (W + 1) where N is the number of items and W is the maximum weight the thief can carry. 
Lookup table stores the solutions to the subproblems where lookUp[i][j] denotes the maximum profit the thief can earn by considering up to first 'i' 
items whose combined weight is less than or equal to 'j'.
Initialize the table by -1.
Now, we will call a recursive function 'maxProfitHelper’ that takes the items, weights, and capacity of the knapsack.
This function will generate all possible subsets and will return the maximum profit the thief can earn.
Algorithm for the maxProfitHelper function:

Base condition:  When no items are left or the remaining capacity of the knapsack is 0.
If the current subproblem has been solved already, return the value stored in the lookUp table.
Means, if lookUp[i][W] != -1, return lookUp[i][W].
Now recursively generate all subsets and find the maximum profit by,
Including the item in the set and recur for the remaining items with the decreased capacity of the knapsack.
Not including the item and recur for the remaining items.
Note that we can only include an item in the set if and only if the weight of the item is less than or equal to the remaining weight of the knapsack.
'result' is the maximum profit obtained by either including the current item in the knapsack or excluding the current item.
Store the answer in the lookup table as lookUp[i][W] = result.
Finally, return the ‘answer’.
Time Complexity
O(N * W), where N is the number of items and W is the maximum capacity of the knapsack.

In the worst case, we will not have more than (N * M) distinct sequences. Thus, there will be at most (N * W) distinct calls and in each call, 
we are doing a constant amount of work. Thus, the final time complexity will be O(N * W). 

Space Complexity
O(N * W), where N is the number of items and W is the maximum capacity of the knapsack.

We are using a lookup table of size (N + 1) * (W + 1) to store the solutions of the subproblems. Also, recursion stack space of O(N) size is used.
Thus, the final space complexity is O( N * W + N) = O(N * W). 

/*

	Time Complexity: O(N * W)
	Space Complexity: O(N * W)

	Where N is the number of items and W is the capacity of the knapsack.

*/

import java.util.ArrayList;

public class Solution {
	private static int maxProfitHelper(ArrayList<Integer> values, ArrayList<Integer> weights, int currIndex, int w,
			ArrayList<ArrayList<Integer>> lookUp) {
		// Base condition
		if (currIndex == values.size() || w == 0) {
			return 0;
		}

		// If we have already solved this subproblem
		if (lookUp.get(currIndex).get(w) != -1) {
			return lookUp.get(currIndex).get(w);
		}

		int result = 0;

		// If the weight of the current item is less than or equal to the capacity of
		// the knapsack
		if (weights.get(currIndex).intValue() <= w) {
			// Max profit by including the current item
			int include = values.get(currIndex)
					+ maxProfitHelper(values, weights, currIndex + 1, w - weights.get(currIndex), lookUp);

			// Max Profit by excluding the current item
			int exclude = maxProfitHelper(values, weights, currIndex + 1, w, lookUp);

			// Update the result
			result = Math.max(include, exclude);
		} else {
			// We can't include the current item
			result = maxProfitHelper(values, weights, currIndex + 1, w, lookUp);

		}

		// Store the result
		lookUp.get(currIndex).set(w, result);

		// Return final profit
		return result;
	}

	public static int maxProfit(ArrayList<Integer> values, ArrayList<Integer> weights, int n, int w) {

		ArrayList<ArrayList<Integer>> lookUp = new ArrayList<ArrayList<Integer>>();

		for (int i = 0; i < n + 1; i++) {
			ArrayList<Integer> temp = new ArrayList<Integer>();
			for (int j = 0; j < w + 1; j++) {
				temp.add(-1);
			}

			lookUp.add(temp);
		}
		return maxProfitHelper(values, weights, 0, w, lookUp);
	}
}

============================================================================
Dynamic Programming
Initially, we were breaking the large problem into small problems but now, let us look at it in a different way. 
Can you solve the small problem first and then reach the final answer? Try to use the bottom-up approach now. 

Algorithm: 

The idea is to create a 2-D array ‘result’ of size size (N + 1) * (W + 1).
Initially, all the elements of the ‘result’ matrix will be 0.
Now, the value result[i][j] denotes the maximum profit the thief can earn considering upto first 'i' items whose combined weight is less than or equal to 'j'.
The detailed algorithm to fill the ‘result’ matrix is as follows:
L1 : Run a loop from i = 1 to N to consider all the items.
L2 : Run a loop from j = 0 to W to consider all weights from 0 to maximum capacity W.
If the weight of the current item is more than j, we can not include it. 
Thus, result[i][j] = result[i - 1][j].
Else, find the maximum profit obtained by either including the current item or excluding the current item.
i.e. result[i][j] = max(result[i - 1][j], values[i] + result[i - 1][j - weights[i]]). 
Note that, when we are including an item, the capacity of the knapsack will be reduced by the weight of the included item. 
Also note that L1, and L2 and will be two nested loops.
Return result[N][W], the final profit that the thief can make.
Time Complexity
O(N * W), where N is the number of items and W is the maximum capacity of the knapsack.

For each item [ O(N) choices ], we are considering the full capacity of the knapsack [ O(W) choices ]. 
Including and excluding an item is done in O(1) time. Thus, the final time complexity is O(N * W).

Space Complexity
O(N * W), where N is the number of items and W is the maximum capacity of the knapsack.

Since we are using a table ‘result’ of size (N) * (W), the final space complexity is O(N * W).


/*

	Time Complexity: O(N * W)
	Space Complexity: O(N * W)

	Where N is the number of items and W is the capacity of the knapsack.

*/

import java.util.ArrayList;

public class Solution {

	public static int maxProfit(ArrayList<Integer> values, ArrayList<Integer> weights, int n, int w) {

		ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();

		for (int i = 0; i < n + 1; i++) {
			ArrayList<Integer> temp = new ArrayList<Integer>();
			for (int j = 0; j < w + 1; j++) {
				temp.add(0);
			}

			result.add(temp);
		}

		// Loop to consider all items
		for (int i = 1; i <= n; i++) {

			// Loop to consider all weights from 0 to maximum capacity of the knapsack
			for (int j = 1; j <= w; j++) {

				// If the weight of the item is less than or equal to the capacity of the
				// knapsack
				if (weights.get(i - 1).intValue() <= j) {
					// Maximum profit by including or excluding the current item

					result.get(i).set(j, Math.max(result.get(i - 1).get(j),
							values.get(i - 1) + result.get(i - 1).get(j - weights.get(i - 1))));
				} else {
					// We can't include the item
					result.get(i).set(j, result.get(i - 1).get(j));
				}
			}
		}

		// Return the final profit
		return result.get(n).get(w);
	}
}


================================================================================


Space Optimized DP
Basically, in the previous approach, you can observe that:

If you include the item i with total knapsack weight being j:
You look for the previous row of the 2D matrix with the required column i.e. result[i - 1][ j - weights[ i ]].
If you exclude the item i with total knapsack weight being j:
You look for the previous row of the 2D matrix with the required column i.e. result[i - 1][ j ].
You can observe 2 things here:

We only need to know about the previously filled row.
For the jth column, we need information about columns less than j only. 
In simple terms, when we include an item, we go to the previous row and (j - weights[i])th column. It should be noted that j - weights[i] is always less than j.
Thus, we need to iterate from backwards. This point will be more clear when you see the algorithm.
Algorithm

Create an array ‘results’ of size (W + 1).
Initially, all the elements of the ‘result’ array will be 0.
Now, the final value of result[ j ] denotes the maximum profit the thief can earn considering items whose combined weight is less than or equal to 'j'.
The detailed algorithm to fill the ‘result’ array is as follows:
L1: Run a loop from i = 1 to N to consider all the items:
L2: Run a loop from j = W to (j >= weights[ i ]):
Update results[ j ] as max( results[ j ], values[ i ] + results[ j - weights[ i ]]).
Note that L1, and L2 and will be two nested loops.
Return result[ W ], the final profit that the thief can make.
Time Complexity
O(N * W), where N is the number of items and W is the maximum capacity of the knapsack.

For each item [ O(N) choices ], we are considering the full capacity of the knapsack [ O(W) choices ]. Including and excluding an item is done in O(1) time. 
Thus, the final time complexity is O(N * W).

Space Complexity
O(W), where W is the maximum capacity of the knapsack. 

Since we are using a linear array ‘result’ of size (W), the final space complexity is O(W).

/*

	Time Complexity: O(N * W)
	Space Complexity: O(W)

	Where N is the number of items and W is the capacity of the knapsack.

*/

import java.util.ArrayList;

public class Solution {

	public static int maxProfit(ArrayList<Integer> values, ArrayList<Integer> weights, int n, int w) {

		ArrayList<Integer> result = new ArrayList<Integer>();

		for (int i = 0; i < w + 1; i++) {
			result.add(0);
		}

		// Loop to consider all the items
		for (int i = 0; i < n; i++) {
			// Loop to consider all the weights
			for (int j = w; j >= weights.get(i); j--) {
				result.set(j, Math.max(result.get(j), values.get(i) + result.get(j - weights.get(i))));
			}
		}

		// Return the final maximum profit
		return result.get(w);
	}
}
