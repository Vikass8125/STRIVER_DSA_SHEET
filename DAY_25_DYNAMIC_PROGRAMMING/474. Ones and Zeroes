You are given an array of binary strings strs and two integers m and n.

Return the size of the largest subset of strs such that there are at most m 0's and n 1's in the subset.

A set x is a subset of a set y if all elements of x are also elements of y.

 

Example 1:

Input: strs = ["10","0001","111001","1","0"], m = 5, n = 3
Output: 4
Explanation: The largest subset with at most 5 0's and 3 1's is {"10", "0001", "1", "0"}, so the answer is 4.
Other valid but smaller subsets include {"0001", "1"} and {"10", "1", "0"}.
{"111001"} is an invalid subset because it contains 4 1's, greater than the maximum of 3.
Example 2:

Input: strs = ["10","0","1"], m = 1, n = 1
Output: 2
Explanation: The largest subset is {"0", "1"}, so the answer is 2.
 

Constraints:

1 <= strs.length <= 600
1 <= strs[i].length <= 100
strs[i] consists only of digits '0' and '1'.
1 <= m, n <= 100



MY_SOLUTION

class Solution {
    
    int[][][] dp;
    public int findMaxForm(String[] strs, int m, int n) {
        dp= new int[m+1][n+1][strs.length];
        return helper(strs,m,n,0);
    }
    
    int helper(String[] strs,int zero,int one,int index){
        if(index==strs.length || zero + one == 0){
            return 0;
        }
        
        if(dp[zero][one][index]>0){
            return dp[zero][one][index];
        }
        
        int[] count = count(strs[index]);
        
        //consider changes the zero ad one
        int consider=0;
        
        if(zero >=count[0] && one>=count[1]){
            consider = 1 + helper(strs,zero-count[0],one-count[1],index+1);
        }
        
        int skip = helper(strs,zero,one,index+1);
        
        //skip
        dp[zero][one][index]=Math.max(consider,skip);;
        return dp[zero][one][index];
        
    }
    
    int[] count(String s){
        int[] count=new int[2];
        for(char c: s.toCharArray()){
            count[c-'0']++;
        }
        return count;
    }
}

class Solution {
    
    int[][] dp;
    public int findMaxForm(String[] strs, int m, int n) {
        dp= new int[m+1][n+1];
        
        for(String s:strs){
            int[] count = count(s);
            //zero m-count[0]  ---- 0
            //one n - count[1] ---- 0
            for(int zero=m;zero>=count[0];zero--){
                for(int one=n; one>=count[1]; one--){
                    dp[zero][one] = Math.max(dp[zero-count[0]][one-count[1]] +1 , dp[zero][one]);
                }
            }
        }
        
        
        return dp[m][n];
    }
    
    int[] count(String s){
        int[] count=new int[2];
        for(char c: s.toCharArray()){
            count[c-'0']++;
        }
        return count;
    }
}

========================================================================================

Idea:
This problem is a variation on the 0-1 Knapsack Problem with a wrinkle: each item has a 2-dimensional weight, but a constant value.
If we were to naively attempt every single permutation of up to 600 strings, that would be 2^600 permutations.

But thankfully we're not tasked with keeping track of each permutation, but simply the maximum number of items.
This calls for the use of dynamic programming (DP) to reduce the overall complexity by instead only keeping track of the best results of 
the various subproblems encountered while working our way to the eventual answer.

For our DP array (dp), dp[i][j] will represent the largest number of items that can be added to yield i zeros and j ones. 
Thus, our answer will ultimately be dp[M][N].
We'll naturally being doing a bottom-up DP approach, as we'll be starting with no data and iterating through the input array (S), adding more data to dp as we go.

Since each string in S will require us to iterate through the entirety of dp looking for data to update,
we'll need to do this iteration in a top-down fashion, to avoid interfering with our overall bottom-up approach, which would occur if we were to
update entries that will be the basis for later updates in the same pass.

Once we reach the end, we return dp[M][N].

Implementation:
As each entry in dp will be in the range [0,200] based on the constraints for M and N, we have the option of using an 8-bit number storage array for the purpose.

Python has other, faster solutions, but this is one of the easiest, and mirrors the solutions in the other languages.

class Solution {
    public int findMaxForm(String[] S, int M, int N) {
        int[][] dp = new int[M+1][N+1];
        for (String str : S) {
            int zeros = 0, ones = 0;
            for (char c : str.toCharArray())
                if (c == '0') zeros++;
                else ones++;
            for (int i = M; i >= zeros; i--)
                for (int j = N; j >= ones; j--)
                    dp[i][j] = Math.max(dp[i][j], dp[i-zeros][j-ones] + 1);
        }
        return dp[M][N];
    }
}

===================================================

For every position in the string array we have two possible option either to take the string and update our remaining zeros and ones or to skip 
it and go to the next position . We traverse both the ways and check which one gives the maximum number .

class Solution {

    Map<String,Integer> map;
    public int findMaxForm(String[] strs, int m, int n) {
	
        if(strs.length == 0 || strs == null)return 0;
        map = new HashMap();
		
        return max(strs,m,n,0);
    }
    
    public int max(String[] strs, int m ,int n,int index){
	// If we are done with the our remaining zeros and ones return 0 as we cant get any furtherr strings.
        if(m == 0 && n == 0){
            return 0;
        }
        if(index >= strs.length)return 0;
		
        String key = m+"->"+n+"->"+index;
		
        if(map.containsKey(key)){
            return map.get(key);
        }
		
        int totalCount = 0;
		//For the current index count the required number of zeros and ones .
		
        String curr = strs[index];
        int ones = 0,zeros = 0;
		
        for(char c:curr.toCharArray()){
            if(c == '0')zeros++;
            else{
                ones++;
            }
          }
        int takenStringCount = 0;
		
		// if we have the  required number of zeros and ones  we take the current string and update the 
		// remaining zeros and ones and go to the next index;
		
        if(ones <= n && zeros <= m){
                takenStringCount = 1 + max(strs,m-zeros,n-ones,index+1);
        }
		// For every position we also the option to skip the current string ;
		
        int skippedStringNumber = max(strs,m,n,index+1);
		// We take the max of both the possible ways to get the maximum string which we can make .
		
        totalCount = Math.max(skippedStringNumber,takenStringCount);
		
        map.put(key,totalCount);
        return totalCount;
    }
}

==================================
**Recursive Solution : **

class Solution {
    public int findMaxForm(String[] strs, int m, int n) {
        return calcFindMaxForm(strs, m, n, 0);
    }
    
    private int calcFindMaxForm(String[] strs, int m, int n, int i) {
		if (i > strs.length - 1)
			return 0;

		if (m < 0 || n < 0)
			return 0;

		if (m == 0 && n == 0)
			return 0;

		int zerosCount = calcCount(strs[i], '0');
		int onesCount = strs[i].length() - zerosCount;

		if (zerosCount <= m && onesCount <= n)
			return Math.max(1 + calcFindMaxForm(strs, m - zerosCount, n - onesCount, i + 1),
					calcFindMaxForm(strs, m, n, i + 1));
		else
			return calcFindMaxForm(strs, m, n, i + 1);
	}

	private int calcCount(String str, char ch) {
		int count = 0;
		for (char tempCh : str.toCharArray()) {
			if (tempCh == ch)
				count++;
		}
		return count;
	}
}
**Dynamic Programming Solution : **

class Solution {
    public int findMaxForm(String[] strs, int m, int n) {
        int[][][] dp = new int[m + 1][n + 1][strs.length + 1];
        return calcFindMaxForm(strs, m, n, 0, dp);
    }
    
    private int calcFindMaxForm(String[] strs, int m, int n, int i, int[][][] dp) {
		if (i > strs.length - 1)
			return 0;

		if (m < 0 || n < 0)
			return 0;

		if (m == 0 && n == 0)
			return 0;

		if (dp[m][n][i] != 0)
			return dp[m][n][i];

		int zerosCount = calcCount(strs[i], '0');
		int onesCount = strs[i].length() - zerosCount;

		if (zerosCount <= m && onesCount <= n)
			return dp[m][n][i] = Math.max(1 + calcFindMaxForm(strs, m - zerosCount, n - onesCount, i + 1, dp),
					calcFindMaxForm(strs, m, n, i + 1, dp));
		else
			return dp[m][n][i] = calcFindMaxForm(strs, m, n, i + 1, dp);
	}

	private int calcCount(String str, char ch) {
		int count = 0;
		for (char tempCh : str.toCharArray()) {
			if (tempCh == ch)
				count++;
		}
		return count;
	}
}

=====================================================

Approach
This problem is similar to knapsack problem, the main difference being that instead of one bag, we have two bags of size n and m. 
The initial appraoch is the brute force approach, you pick the current string or skip it in the array. 
Then you find the answer for the rest of the array using recursion. The base case would be an empty array, where the answer is trivial, that is, 0.

The psuedo-code would look something like this:

If the array size is zero, the solution is trivial, that is 0.
Else check if the current string can be included in the solution (based on remaining m and n).
a. If it cannot be included, return the solution for the rest of the array.
b. Else return the maximum between including and skipping over the current string.
Implementations
S = size of input strs array
N = input n
M = input m
K = average string size

1. Recursion
Time complexity: O(K * 2^S)
Space complexity: O(S)

class Solution {
    
    String[] strs;
    
    public int findMaxForm(String[] strs, int m, int n) {
        this.strs = strs;
        
        // call helper function
        return recurse(strs.length, m, n);
    }
    
    private int recurse(int size, int m, int n) {
        // base case
        if (size == 0)
            return 0;
        
        // 1. skip current element
        int skip = recurse(size - 1, m, n);
        
        // update m, n with the last element
        for (char bit: strs[size - 1].toCharArray()) {
            if (bit == '0')
                m--;
            else
                n--;
        }
        
        // 2. choose current element if possible
        int choose = 0;
        if (m >= 0 && n >= 0)
            choose = 1 + recurse(size - 1, m, n);
        
        // return the optimal answer
        return Math.max(skip, choose);
    }
}
2. Top-down DP
Time complexity: O(K * S)
Space complexity: O(S * N * M)

class Solution {
    
    String[] strs;
    int[][][] memo;
    
    public int findMaxForm(String[] strs, int m, int n) {
        this.strs = strs;
        
        // initialize dp table
        memo = new int[strs.length + 1][m + 1][n + 1];
        for (int i = 0; i < strs.length + 1; i++) {
            for (int j = 0; j < m + 1; j++) {
                Arrays.fill(memo[i][j], i == 0 ? 0 : -1);
            }
        }
        
        // call helper function
        return recurse(strs.length, m, n);
    }
    
    private int recurse(int size, int m, int n) {
        // base case and dp table check
        if (memo[size][m][n] != -1)
            return memo[size][m][n];
        
        // 1. skip current element
        int skip = recurse(size - 1, m, n);
        
        // update m, n with the last element
        int newM = m, newN = n;
        for (char bit: strs[size - 1].toCharArray()) {
            if (bit == '0')
                newM--;
            else
                newN--;
        }
        
        // 2. choose current element if possible
        int choose = 0;
        if (newM >= 0 && newN >= 0)
            choose = 1 + recurse(size - 1, newM, newN);
        
        // return the optimal answer
        memo[size][m][n] = Math.max(skip, choose);
        return memo[size][m][n];
    }
}
3. Bottom-up DP
Time complexity: O(K * S)
Space complexity: O(S * N * M)

class Solution {
    public int findMaxForm(String[] strs, int m, int n) {
        // initialize dp table
        int[][][] table = new int[strs.length + 1][m + 1][n + 1];
        
        for (int i = 0; i < strs.length + 1; i++) {
            for (int j = 0; j < m + 1; j++) {
                for (int k = 0; k < n + 1; k++) {
                    // base case
                    if (i == 0) {
                        table[i][j][k] = 0;
                        continue;
                    }
                    
                    // 1. skip current element
                    table[i][j][k] = table[i - 1][j][k];

                    // count zeros and ones left after the current element
                    int zeros = j, ones = k;
                    for (char bit: strs[i - 1].toCharArray()) {
                        if (bit == '0')
                            zeros--;
                        else
                            ones--;
                    }

                    // 2. select current element if possible
                    if (zeros >= 0 && ones >= 0)
                        table[i][j][k] = Math.max(table[i][j][k], 1 + table[i - 1][zeros][ones]);
                }
            }
        }
        
        return table[strs.length][m][n];
    }
}
4. Bottom-up DP with space optimization
Time complexity: O(K * S)
Space complexity: O(N * M)

class Solution {
    public int findMaxForm(String[] strs, int m, int n) {
        // initialize dp table
        int[][] curTable = new int[m + 1][n + 1];
        
        for (int i = 0; i < strs.length + 1; i++) {
            int[][] prevTable = curTable;
            curTable = new int[m + 1][n + 1];
            
            for (int j = 0; j < m + 1; j++) {
                for (int k = 0; k < n + 1; k++) {
                    // base case
                    if (i == 0) {
                        curTable[j][k] = 0;
                        continue;
                    }
                    
                    // 1. skip current element
                    curTable[j][k] = prevTable[j][k];

                    // count zeros and ones left after the current element
                    int zeros = j, ones = k;
                    for (char bit: strs[i - 1].toCharArray()) {
                        if (bit == '0')
                            zeros--;
                        else
                            ones--;
                    }

                    // 2. select current element if possible
                    if (zeros >= 0 && ones >= 0)
                        curTable[j][k] = Math.max(curTable[j][k], 1 + prevTable[zeros][ones]);
                }
            }
        }
        
        return curTable[m][n];
    }
}

============================================
class Solution {
    public int findMaxForm(String[] strs, int m, int n) {
        
        return dp(strs,m,n,0,new HashMap<>());
    }
    
    private int dp(String[] strs, int m, int n,int i,Map<String,Integer> map){
        
        if(m==0 && n ==0 || i >= strs.length) // base condition
            return 0;
        
        StringBuilder sb = new StringBuilder();
        String key = sb.append(m).append(',').append(n).append(',').append(i).toString(); // key generation for memoization, store in a map
        // System.out.println(key);
        
        if(map.containsKey(key))
            return map.get(key);
        
        int z = 0,o=0,res;
        for(char a : strs[i].toCharArray()) // counting 0's and 1's in the str at index i
            if(a == '0') z++;
            else o++;
        
        
        
        if(z>m || o>n)
            res =  dp(strs,m,n,i+1,map); // skip the current string at index i, if it crosses the limit of m or n
        else 
            res =  Math.max(dp(strs,m,n,i+1,map),1 + dp(strs,m-z,n-o,i+1,map)); // typical knapsack condition Max(without,with)
        map.put(key,res); // memoization
        
        return res;
    }
}
