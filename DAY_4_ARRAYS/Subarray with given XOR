Problem Description

Given an array of integers A and an integer B.

Find the total number of subarrays having bitwise XOR of all elements equals to B.



Problem Constraints
1 <= length of the array <= 105

1 <= A[i], B <= 109



Input Format
The first argument given is the integer array A.

The second argument given is integer B.



Output Format
Return the total number of subarrays having bitwise XOR equals to B.



Example Input
Input 1:

 A = [4, 2, 2, 6, 4]
 B = 6
Input 2:

 A = [5, 6, 7, 8, 9]
 B = 5


Example Output
Output 1:

 4
Output 2:

 2


Example Explanation
Explanation 1:

 The subarrays having XOR of their elements as 6 are:
 [4, 2], [4, 2, 2, 6, 4], [2, 2, 6], [6]
Explanation 2:

 The subarrays having XOR of their elements as 2 are [5] and [5, 6, 7, 8, 9]
 
 
 MY_SOLUTION
 
 HINT:
 A trivial solution is to use two loops to go through all possible subarrays of array and count the number of subarrays having XOR of their elements as B.

Try using hashing to store the prefix xor and use it to count the number of subarrays having XOR of their element ass B.

Solution Approach:
A trivial solution is to use two loops to go through all possible subarrays of array and count the number of subarrays having XOR of their elements as B.
Time Complexity of the above solution is O(n2).

An Efficient Solution solves the above problem in O(n) time.

Let us call the XOR of all elements in the range [i+1, j] as x, in the range [0, i] as y, and in the range [0, j] as z.

If we do XOR of y with z, the overlapping elements in [0, i] from y and z zero out and we get XOR of all elements in the range [i+1, j], i.e. x.

Since x = y XOR z, we have y = x XOR z. Now, if we know the value of z and we take the value of x as B, we get the count of x as the 
count of all y satisfying this relation.

Essentially, we get the count of all subarrays having XOR-sum B for each z. As we take sum of this count over all z, we get our answer.

Complete Solution
public class Solution {
    public int solve(int[] A, int B) {
        HashMap<Integer,Integer> map = new HashMap<>();
        int res = 0;
        int xor = 0;
        for(int i=0;i<A.length;i++) {
            xor ^= A[i];
            if(map.get(xor ^ B) != null) res += map.get(xor ^ B);
            if(xor == B) res++;
            map.put(xor,map.getOrDefault(xor,0) + 1);
        }
        return res;
    }
}




=======================================================================================================================================
Solution 1: Brute Force

Intuition: The brute force solution is to generate all possible subarrays. For each generated subarray we get the respective XOR and then check if this XOR is equal to B. If it is then we increment the count. In the end, we will get the count of all possible subarrays that have XOR equal to B.

Approach:

Generate subarrays: To generate all possible subarrays, we use the same old technique of nested loops. For each value of the outer loop (i loop), the inner loop(j loop) runs from i till the last element. Each iteration of the inner loop gives a new subarray. 
Maintain XOR: Since each iteration of the inner loop gives a new subarray, we maintain a variable X, in which we keep the XOR of the current subarray. 
Check and Count: Before moving to the next iteration of the inner loop (that is before going to the next subarray), we check if the current XOR is equal to B, if it is then we increment the counter (counter also has to be maintained).

Time Complexity: O(N2)

Space Complexity: O(1)

=======================================================================================================================================

Solution 2: Prefix xor and map

Intuition: The main idea is to observe the prefix xor of the array. Prefix Xor is just another array, where each index contains XOR of all 
elements of the original array starting from index 0 up to that index. In other words
prefix_xor[i] = XOR(a[0], a[1], a[2],……,a[I])

Once we have made the prefix xor array, we observe a fact:

P = xor(a[0], a[1], a[2],……, a[q], a[q+1],….., a[p])
Q = xor(a[0], a[1], a[2],……, a[q])

Therefore,
P^Q = xor(a[q+1],….., a[p]) = M                                
So, now we understand that from the prefix xor array when we XOR two elements at different indices we get the xor of the 
elements (in the original array) that were between those indices.
Let’s say we did XOR(P, B) and we got Q (B is the integer given in question). What does this mean?
This means that the subarray between q and p is having xor = B. To understand this we just use simple equations:
P^B = Q
=> P^B^P = Q^P
=> B = Q^P  

And we already know by fact 1 that Q^P will give xor of all elements between q and p. Therefore, the subarray between q and p has xor = B.
Suppose we did XOR(P, B) and we got Q (B is the integer given in question). But there is more than one Q before p.

In this case, there are two subarrays that have XOR = B. Subarrays between q1 to p and q2 to p. 

IMP NOTE: although we talk about prefix xor “array”, it should be noted that at a time we need only one element of this array. 
Hence, we can just use a variable to maintain the prefix xor. 

Approach: We need to traverse the array while we maintain variables for current_perfix_xor, counter, and also a map to keep track of visited xors. 
This map will maintain the frequency count of all previous visited current_prefix_xor values. 
If for any index current_prefix_xor is equal to B, we increment the counter. 
If for any index we find that Z is present in the visited map, we increment the counter by visited[Z] (Z=current_prefi_xor^B). 
At every index, we insert the current_prefix_xor into the visited map with its frequency.

Time Complexity: O(N)

Space Complexity: O(N)

NOTE: the complexity of worst-case searching for an unordered_map can go up to O(N), hence it is safer to use ordered_map. 
But if we use ordered_map then the time complexity will be O(N logN). Space complexity will be the same in both cases.

=======================================================================================================================================

public class Solution {
    public int solve(int[] A, int B) {
        // Brute Force : T.C -> O(N^2)
        /*
        int max = 0;
        int len = A.length;
        for(int i = 0; i < len; i++){
            int xor = 0;
            for(int j = i; j < len; j++){
                xor ^= A[j];
                if(xor == B){
                    max++;
                }
            }
        }
        return max;
        */
        
        //OPTIMISED : T.C -> O(N), S.C -> O(N)
        
        int count = 0;
        int xor = 0;
        int len = A.length;
        
        HashMap<Integer,Integer> freq = new HashMap<Integer,Integer>();
        
        for(int i = 0; i < len; i++){
            xor ^= A[i];
            if(freq.get(xor^B) != null){ // Checking the the Y value
                count += freq.get(xor^B);
            }
            if(xor == B){
                count++;
            }
            if(freq.get(xor) != null){
                freq.put(xor, freq.get(xor) + 1);
            }
            else{
                freq.put(xor, 1);
            }
            
        }
        return count;
         
    }
}
