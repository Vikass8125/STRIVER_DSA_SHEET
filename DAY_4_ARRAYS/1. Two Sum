Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
 

Constraints:

2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.
 

Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?

MY_SOLUTIONS

Solution 1: Naive Approach (Brute Force)

Intuition: For each element, we try to find an element such that the sum of both elements is equal to the given target.

Approach: We traverse through the array, and for each element i, we try to find another element amongst the remaining elements, such that the 
sum of both the elements equals the target. 

First Element: i

So the required second element will be, target – i

If we find both the elements, we break the loop and return the indices.


class Solution {
    public int[] twoSum(int[] nums, int target) {
        // BRUTE FORCE 
        //T.C -> O(N^2)
        //S.C -> O(1)
        /*
        int[] ans = new int[2];
        for(int i = 0; i < nums.length; i++){
            for(int j = i+1; j < nums.length; j++){
                if(nums[i] + nums[j] == target){
                    ans[0] = i;
                    ans[1] = j;
                    break;
             
                } 
            }
        }
        return ans;
        */
  }
}



Time Complexity: O(N2)

Space Complexity: O(1)


===========================================================================================================================================================
Solution 2: Two-Pointer Approach

Intuition: Think about, what if the array is sorted? If the array is sorted, is it possible to reach a sum by traversing the array from both sides simultaneously?

We sort the array, use two variables, each will start from one end of the array, and traverse in both directions till we get the required sum.

Approach: We traverse through the array, and for each element i, we try to find another element amongst the remaining elements, such that the sum of both the elements equals the target. 

First Element: i

So the required second element will be, target – i

If we find both the elements, we break the loop and return the indices.


==============================================================================
C++ CODE

vector<int> twoSum(vector<int>& nums, int target) {

    	vector<int> res,store;
    	store = nums;

    	sort(store.begin(), store.end());

    	int left=0,right=nums.size()-1;
    	int n1,n2;

    	while(left<right){
        	if(store[left]+store[right]==target){

            	n1 = store[left];
            	n2 = store[right];

            	break;

        	}
        	else if(store[left]+store[right]>target)
            	    right--;
        	else
            	    left++;
    	}

    	for(int i=0;i<nums.size();++i){

        	if(nums[i]==n1)
            	    res.emplace_back(i);
        	else if(nums[i]==n2)
            	    res.emplace_back(i);
    	}

    	    return res;
	}
=============================================================================

Time Complexity: O(NlogN)

Space Complexity: O(N)

===========================================================================================================================================================

Solution 3: Hashing (Most efficient)

Approach: We can solve this problem efficiently by using hashing. We’ll use a hash-map to see if there’s a value target – i that can be added to the current array value i to get the sum equals to target. If target – i is found in the map, we return the current index, and index stored at target – nums[index] location in the map. 

This can be done in constant time.

class Solution {
    public int[] twoSum(int[] nums, int target) {
        
        int[] res = new int[2];
        Map<Integer,Integer> map = new HashMap<Integer,Integer>();
        int len = nums.length;
        
        for(int i = 0; i < len ; i++){
            if(map.containsKey(target - nums[i])){
                res[0] = i;
                res[1] = map.get(target - nums[i]);
                return res;
            }
            map.put(nums[i], i);
        }
        return res;
    }
}




Time Complexity: O(N)

Space Complexity: O(N)

