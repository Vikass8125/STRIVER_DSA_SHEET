Given weights and values of N items, we need to put these items in a knapsack of capacity W to get the maximum total value in the knapsack.
Note: Unlike 0/1 knapsack, you are allowed to break the item. 

 

Example 1:

Input:
N = 3, W = 50
values[] = {60,100,120}
weight[] = {10,20,30}
Output:
240.00
Explanation:Total maximum value of item
we can have is 240.00 from the given
capacity of sack. 
Example 2:

Input:
N = 2, W = 50
values[] = {60,100}
weight[] = {10,20}
Output:
160.00
Explanation:
Total maximum value of item
we can have is 160.00 from the given
capacity of sack.
 

Your Task :
Complete the function fractionalKnapsack() that receives maximum capacity , array of structure/class and size n and 
returns a double value representing the maximum value in knapsack.
Note: The details of structure/class is defined in the comments above the given function.


Expected Time Complexity : O(NlogN)
Expected Auxilliary Space: O(1)


Constraints:
1 <= N <= 10^5
1 <= W <= 10^5

MY_SOLUTION

Approach: 

The greedy method to maximize our answer will be to pick up the items with higher values. 
Since it is possible to break the items as well we should focus on picking up items having higher value /weight first. 
To achieve this, items should be sorted in decreasing order with respect to their value /weight. Once the items are sorted we can iterate. 
Pick up items with weight lesser than or equal to the current capacity of the knapsack. In the end, if the weight of an item becomes more than what
we can carry, break the item into smaller units. Calculate its value according to our current capacity and add this new value to our answer.

Let’s understand with an example:-

N = 3, W = 50, values[] = {100,60,120}, weight[] = {20,10,30}.

The value/weight of item 1 is (100/20) = 5,for item 2 is (60/10) = 6 and for item 3 is (120/30) = 4.

Initially capacity of bag(W)  = 50, value = 0

Item 1 has a weight of 10, we can pick it up. 

Current weight = 50 – 10 = 40 ,Current value = 60.00

Item 2  has a weight of 20 , we can pick it up. 

Current weight = 40 – 20 = 20 ,Current value = 60.00 + 100.00 = 160.00

Item 3 has a weight of 30 , but current knapsack capacity is 20.Only a fraction of it is chosen.

Current weight = 20 – 20 = 0 ,Final value = 160.00 + (120/30 )*20 = 240.00


/*
class Item {
    int value, weight;
    Item(int x, int y){
        this.value = x;
        this.weight = y;
    }
}
*/

//COMAPARAOR CLASS
class itemComparator implements Comparator<Item>{
    @Override
    public int compare(Item a, Item b){
        double r1 = (double)(a.value) / (double)(a.weight);
        double r2 = (double)(b.value) / (double)(b.weight);
        if(r1 < r2) return 1;
        else if(r1 > r2) return -1;
        else return 0;
    }
}

class Solution

{
    //Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int W, Item arr[], int n) 
    {
        Arrays.sort(arr, new itemComparator());
        
        int currWeight = 0;
        double finalValue = 0.0;
        
        for(int i = 0 ; i < n; i++){
            
            if(currWeight + arr[i].weight <= W){
                currWeight += arr[i].weight;
                finalValue += arr[i].value;
            }
            else{
                int remain = W - currWeight;
                finalValue += ((double) arr[i].value / arr[i].weight * (double) remain);
                break;
            }
        }
        return finalValue;
        
    }
}

Time Complexity: O(n log n + n). O(n log n) to sort the items and O(n) to iterate through all the items for calculating the answer.

Space Complexity: O(1), no additional data structure has been used.




=================================================================================================================================

A brute-force solution would be to try all possible subsets with all different fractions but that will be too much time taking. 
===================
An efficient solution is to use the Greedy approach. 
The basic idea of the greedy approach is to calculate the ratio value/weight for each item and sort the item on basis of this ratio. 
Then take the item with the highest ratio and add them until we can’t add the next item as a whole and at the end add the next item as much as we can. 
Which will always be the optimal solution to this problem.
====================

Algorithm:-

Calculate the ratio(value/weight) for each item.
Sort all the items in decreasing order of the ratio.
Initialize res =0, curr_cap = given_cap.
Do the following for every item "i" in the sorted order:
while(i.weight){

    if(i.weight<=curr_cap)

    {

        curr_cap -= i.weight;

        res += i.value;

    }

    else

    {

        res += (i.value * (curr_cap/i.weight));

        return res;

    }

}

5.Return res.

A simple code with our own comparison function can be written as follows, please see the sort function more 
closely, the third argument to the sort function is our comparison function which sorts the item according to value/weight ratio in non-decreasing order. 
After sorting we need to loop over these items and add them to our knapsack satisfying the above-mentioned criteria.
// Java program to solve fractional Knapsack Problem
import java.util.Arrays;
import java.util.Comparator;

// Greedy approach
public class FractionalKnapSack {
    // function to get maximum value
    private static double getMaxValue(int[] wt, int[] val,
                                      int capacity)
    {
        ItemValue[] iVal = new ItemValue[wt.length];

        for (int i = 0; i < wt.length; i++) {
            iVal[i] = new ItemValue(wt[i], val[i], i);
        }

        // sorting items by value;
        Arrays.sort(iVal, new Comparator<ItemValue>() {
            @Override
            public int compare(ItemValue o1, ItemValue o2)
            {
                return o2.cost.compareTo(o1.cost);
            }
        });

        double totalValue = 0d;

        for (ItemValue i : iVal) {

            int curWt = (int)i.wt;
            int curVal = (int)i.val;

            if (capacity - curWt >= 0) {
                // this weight can be picked while
                capacity = capacity - curWt;
                totalValue += curVal;
            }
            else {
                // item cant be picked whole
                double fraction
                    = ((double)capacity / (double)curWt);
                totalValue += (curVal * fraction);
                capacity
                    = (int)(capacity - (curWt * fraction));
                break;
            }
        }

        return totalValue;
    }

    // item value class
    static class ItemValue {
        Double cost;
        double wt, val, ind;

        // item value function
        public ItemValue(int wt, int val, int ind)
        {
            this.wt = wt;
            this.val = val;
            this.ind = ind;
            cost = new Double((double)val / (double)wt);
        }
    }

    // Driver code
    public static void main(String[] args)
    {
        int[] wt = { 10, 40, 20, 30 };
        int[] val = { 60, 40, 100, 120 };
        int capacity = 50;

        double maxValue = getMaxValue(wt, val, capacity);

        // Function call
        System.out.println("Maximum value we can obtain = "
                           + maxValue);
    }
}

As main time taking step is sorting, the whole problem can be solved in O(n log n) only. 

Time Complexity: O(nlogn)
Auxiliary Space: O(1)
===============================================================


class itemComparator implements Comparator<Item>
{
    //comparison function to sort items according to value/weight ratio.
    public int compare(Item a, Item b)
    {
        double r1 = (double)a.value / a.weight;
        double r2 = (double)b.value / b.weight;
        if(r1 > r2){
            return -1;
        } else if(r1 < r2) {
            return 1;
        }
        return 0;
    }
}

class Solution
{
    //Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int W, Item arr[], int n) 
    {
        //sorting items on basis of value/weight ratio.
        Arrays.sort(arr, new itemComparator());
        
        //taking variable for current weight in knapsack.
        int curWeight = 0;
        double finalvalue = 0.0;
        
        //iterating over all the items.
        for (int i = 0; i < n; i++) 
        {
            //if currweight + item's weight is less than or equal to W,
            //then we add the item's value to final value.
            if (curWeight + arr[i].weight <= W) 
            {
                curWeight += arr[i].weight;
                finalvalue += arr[i].value;
            } 
            //else we take the fraction of the that item's value 
            //based on the remaining weight in knapsack.
            else 
            {
                int remain = W - curWeight;
                finalvalue += arr[i].value * ((double) remain / arr[i].weight);
                break;
            }
        }
         //returning final value.
        return finalvalue;
    }
}
