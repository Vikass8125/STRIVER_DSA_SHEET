There is one meeting room in a firm. There are N meetings in the form of (start[i], end[i]) where start[i] is start time of meeting i and end[i] is finish time of meeting i.
What is the maximum number of meetings that can be accommodated in the meeting room when only one meeting can be held in the meeting room at a particular time?

Note: Start time of one chosen meeting can't be equal to the end time of the other chosen meeting.


Example 1:

Input:
N = 6
start[] = {1,3,0,5,8,5}
end[] =  {2,4,6,7,9,9}
Output: 
4
Explanation:
Maximum four meetings can be held with
given start and end timings.
The meetings are - (1, 2),(3, 4), (5,7) and (8,9)
Example 2:

Input:
N = 3
start[] = {10, 12, 20}
end[] = {20, 25, 30}
Output: 
1
Explanation:
Only one meetings can be held
with given start and end timings.

Your Task :
You don't need to read inputs or print anything. 
Complete the function maxMeetings() that takes two arrays start[] and end[] along with their size N as input parameters 
and returns the maximum number of meetings that can be held in the meeting room.


Expected Time Complexity : O(N*LogN)
Expected Auxilliary Space : O(N)


Constraints:
1 ≤ N ≤ 105
0 ≤ start[i] < end[i] ≤ 105


MY_SOLUTION

Approach: 
Idea is to solve the problem using the greedy approach which is the same as Activity Selection Problem.


Sort all pairs(Meetings) in increasing order of second number(Finish time) of each pair.
Select first meeting of sorted pair as the first Meeting in the room and push it into result vector and set a
variable time_limit(say) with the second value(Finishing time) of the first selected meeting.
Iterate from the second pair to last pair of the array and if the value of the first element(Starting time of meeting) of the
current pair is greater then previously selected pair finish time (time_limit) then select the current pair and update the result
vector (push selected meeting number into vector) and variable time_limit.
Print the Order of meeting from vector.



=======================================

Initial Thought Process:-
Say if you have two meetings, one which gets over early and another which gets over late. Which one should we choose?  If our meeting lasts longer the room stays occupied and we lose our time. On the other hand, if we choose a meeting that finishes early we can accommodate more meetings. Hence we should choose meetings that end early and utilize the remaining time for more meetings.

Approach: 

To proceed we need a vector of three quantities: the starting time, ending time, meeting number. 
Sort this data structure in ascending order of end time. 

We need a variable to store the answer. Initially, the answer is 1 because the first meeting can always be performed. 
Make another variable, say limit that keeps track of the ending time of the meeting that was last performed. 
Initially set limit as the end time of the first meeting.

Start iterating from the second meeting. At every position we have two possibilities:-

If the start time of a meeting is  strictly greater than limit we can perform the meeting. Update the answer.
Our new limit is the ending time of the current meeting  since it was last performed.Also update limit.  
 If the start time is less than or equal to limit  ,skip and move ahead. 
Let’s have a dry run by taking the following example.

N = 6,  start[] = {1,3,0,5,8,5}, end[] =  {2,4,5,7,9,9}

Initially set answer =[1],limit = 2.

For Position 2 – 

Start time of meeting no. 2 = 3 > limit. Update answer and limit.

Answer = [1, 2], limit = 4.

For Position 3 –

Start time of meeting no. 3 = 0 < limit.Nothing is changed.

For Position 4 –

Start time of meeting no. 4 = 5 > limit. Update answer and limit.

Answer = [1,2,4], limit = 7.

For Position 5 –

Start time of meeting no. 5 = 8 > limit.Update answer and limit.

Answer = [1,2,4,5], limit = 9.

For Position 6 –

Start time of meeting no. 6 = 8 < limit.Nothing is changed.

Final answer  =  [1,2,4,5]

===============================

class meeting{
    int start;
    int end;
    int pos;
    
    meeting(int start, int end, int pos){
        this.start = start;
        this.end = end;
        this.pos = pos;
    }
}

class meetingComparator implements Comparator<meeting>{
    @Override
    public int compare(meeting o1, meeting o2){
        if(o1.end < o2.end) return -1;
        
        else if(o1.end > o2.end) return 1;
        
        else if(o1.pos < o2.pos) return -1;
        
        return 1;
    }
}

class Solution 
{
    //Function to find the maximum number of meetings that can
    //be performed in a meeting room.
    public static int maxMeetings(int start[], int end[], int n)
    {
        // add your code here
        ArrayList<meeting> meet = new ArrayList<>();
        
        for(int i = 0; i < start.length; i++){
            meet.add(new meeting(start[i], end[i], i + 1));
        }
        
        meetingComparator mc = new meetingComparator();
        Collections.sort(meet, mc);
        
        ArrayList<Integer> result = new ArrayList<>();
        result.add(meet.get(0).pos);
        int limit = meet.get(0).end;
        
        for(int i = 1; i < start.length; i++){
            if(meet.get(i).start > limit){
                limit = meet.get(i).end;
                result.add(meet.get(i).pos);
            }
        }
        
        return result.size();
    }
}
============================================

// Java program to find maximum number of meetings 
import java.util.*;

// Comparator function which can compare 
// the ending time of the meeting ans 
// sort the list
class mycomparator implements Comparator<meeting>
{
    @Override
    public int compare(meeting o1, meeting o2) 
    {
        if (o1.end < o2.end)
        {
            
            // Return -1 if second object is
            // bigger then first
            return -1;
        }
        else if (o1.end > o2.end)
        
            // Return 1 if second object is
            // smaller then first
            return 1;
            
        return 0;
    }
}

// Custom class for storing starting time,  
// finishing time and position of meeting. 
class meeting
{
    int start;
    int end;
    int pos;
    
    meeting(int start, int end, int pos)
    {
        this.start = start;
        this.end = end;
        this.pos = pos;
    }
}

class GFG{
    
// Function for finding maximum meeting in one room 
public static void maxMeeting(ArrayList<meeting> al, int s)
{
    
    // Initialising an arraylist for storing answer
    ArrayList<Integer> m = new ArrayList<>();
    
    int time_limit = 0;
    
    mycomparator mc = new mycomparator(); 
    
    // Sorting of meeting according to 
    // their finish time.
    Collections.sort(al, mc);
    
    // Initially select first meeting. 
    m.add(al.get(0).pos);
    
    // time_limit to check whether new  
    // meeting can be conducted or not. 
    time_limit = al.get(0).end;
    
    // Check for all meeting whether it  
    // can be selected or not. 
    for(int i = 1; i < al.size(); i++)
    {
        if (al.get(i).start > time_limit)
        {
            
            // Add selected meeting to arraylist
            m.add(al.get(i).pos);
            
            // Update time limit
            time_limit = al.get(i).end;
        }
    }
    
    // Print final selected meetings. 
     for(int i = 0; i < m.size(); i++)
        System.out.print(m.get(i) + 1 + " ");
}

// Driver Code  
public static void main (String[] args) 
{
    
    // Starting time 
    int s[] = { 1, 3, 0, 5, 8, 5 };
    
    // Finish time 
    int f[] = { 2, 4, 6, 7, 9, 9 };  
    
    // Defining an arraylist of meet type
    ArrayList<meeting> meet = new ArrayList<>();
    for(int i = 0; i < s.length; i++)
    
        // Creating object of meeting 
        // and adding in the list
        meet.add(new meeting(s[i], f[i], i));
        
    // Function call 
    maxMeeting(meet, meet.size());
}
}
========================================================
class pair 
{
  int first, second;
  public pair(int start, int finish)
  {
    this.first = start;
    this.second = finish;
  }
}

class Solution 
{
    //Function to find the maximum number of meetings that can
    //be performed in a meeting room.
    public static int maxMeetings(int start[], int end[], int n) 
    {
        pair [] x = new pair[n];
        
        //pushing the pair of starting and finish time in a list.
        for(int i = 0; i < n; i++){
            x[i]  = new pair(start[i],end[i]);
        }
        
        
        //comparator function used in sorting the list of pairs 
        //according to increasing order of the finish time.
        Arrays.sort(x,new Comparator<pair>() {
                @Override
                public int compare(pair s1, pair s2)
                {
                    return s1.second - s2.second;
                }
        });
        
        int last = 0;
        int res = 0;
        for (int i = 0; i < n; i++) 
        {
            //if the start time of this meeting is greater than or equal
            //to the finish time of previously selected meeting then 
            //we increment the counter and update last.
            if (x[i].first > last) 
            {
                res++;
                last = x[i].second;
            }
        }
        //returning the counter.
        return res;
    }
}




Time Complexity: O(n) to iterate through every position and insert them in a data structure. 
O(n log n)  to sort the data structure in ascending order of end time. O(n)  to iterate through the positions and check which meeting can be performed.

Overall : O(n) +O(n log n) + O(n) ~O(n log n)

Space Complexity: O(n)  since we used an additional data structure for storing the start time, end time, and meeting no.



==========================================================
SIMILAR QUESTIONS

LeetCode – Meeting Rooms (Java)
 
Given an array of meeting time intervals consisting of start and end times [s1, e1], [s2, e2], ... , determine if a person could attend all meetings.

For example,
Given [ [0, 30], [5, 10], [15, 20] ],
return false.


Java Solution

If a person can attend all meetings, there must not be any overlaps between any meetings. 
After sorting the intervals, we can compare the current end and next start.

public boolean canAttendMeetings(Interval[] intervals) {
    Arrays.sort(intervals, new Comparator<Interval>(){
        public int compare(Interval a, Interval b){
            return a.start-b.start;
        }
    });
 
    for(int i=0; i<intervals.length-1; i++){
        if(intervals[i].end>intervals[i+1].start){
            return false;
        }
    }
 
    return true;
}


============================================================
LeetCode – Meeting Rooms II (Java)
 
Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] find the minimum number of conference rooms required.

Java Solution
When a room is taken, the room can not be used for anther meeting until the current meeting is over. 
As soon as the current meeting is finished, the room can be used for another meeting. We can sort the meetings by start timestamps 
and sequentially assign each meeting to a room. Each time when we assign a room for a meeting, we check if any meeting is finished 
so that the room can be reused. In order to efficiently track the earliest ending meeting, we can use a min heap. 
Whenever an old meeting ends before a new meeting starts, we reuse the room (i.e., do not add more room). 
Otherwise, we need an extra room (i.e., add a room).


public int minMeetingRooms(int[][] intervals) {
    Arrays.sort(intervals, Comparator.comparing((int[] itv) -> itv[0]));
 
    PriorityQueue<Integer> heap = new PriorityQueue<>();
    int count = 0;
    for (int[] itv : intervals) {
        if (heap.isEmpty()) {
            count++;
            heap.offer(itv[1]);
        } else {
            if (itv[0] >= heap.peek()) {
                heap.poll();
            } else {
                count++;
            }
 
            heap.offer(itv[1]);
        }
    }
 
    return count;
}



The time complexity is O(N*log(N)).

===========================================
253 LeetCode Java: Meeting Rooms – Medium
Problem:
Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],…] (si < ei), find the minimum number of conference rooms required.

For example, Given [[0, 30],[5, 10],[15, 20]], return 2.

Thoughts:
We still need to sort the intervals by start time in order to make things easier. 
A very straightforward way is to have a List of Interval and stored as the occupied interval of a room. 
And the size of the List will be the number of rooms required.

Because the start time is in increasing order, so that when you found a meeting that needs to be put into one room, it doesn't matter which available room to put in. 
E.g. if there are three rooms can support a meeting at 1pm and the end time of three rooms are 9 am , 10 am and 11 am. 
We can arrange this meeting at 1pm to any of the three. Because we know the next (if has next) meeting will start later than 1pm. 
No matter where we put 1pm meeting, we will have only two rooms available for the later ones.

Because we only care about the end time of a room, so actually we can use a min-heap to keep track of end time so that we don't need 
to iterate over the list of rooms. Because for a heap. add takes O(logn) in worse case and peek takes O(1) which would be mush faster.

Note that in Java, PriorityQueue is default to be min-heap. If we want to use max-heap,
we have to use PriorityQueue pq = new PriorityQueue(11, Collections.reverseOrder());.

Solutions:
/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    class IntervalComparator implements Comparator<Interval> {
        @Override
        public int compare(Interval i1, Interval i2) {
            return i1.start - i2.start;
        }
    }
    public int minMeetingRooms(Interval[] intervals) {
        List<Interval> rooms = new LinkedList<Interval>();
        if (intervals.length == 0) {
            return 0;
        }
        Arrays.sort(intervals, new IntervalComparator());
        rooms.add(intervals[0]);
        for (int i = 1; i < intervals.length; i ++) {
            boolean found = false;
            for (Interval inter:rooms) {
                if (intervals[i].start >= inter.end) {
                    inter.end = intervals[i].end;
                    found = true;
                    break;
                }
            }
            if (found == false) {
                rooms.add(intervals[i]);
            }
        }
        return rooms.size();
    }
}
/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    class IntervalComparator implements Comparator<Interval> {
        @Override
        public int compare(Interval i1, Interval i2) {
            return i1.start - i2.start;
        }
    }
    public int minMeetingRooms(Interval[] intervals) {
        PriorityQueue<Integer> end = new PriorityQueue<Integer>();
        if (intervals.length == 0) {
            return 0;
        }
        Arrays.sort(intervals, new IntervalComparator());
        end.add(intervals[0].end);
        for (int i = 1; i < intervals.length; i ++) {
            if (intervals[i].start >= end.peek()) {
                end.poll();
            }
            end.add(intervals[i].end);
        }
        return end.size();
    }
}
