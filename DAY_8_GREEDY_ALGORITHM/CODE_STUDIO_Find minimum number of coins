Problem Statement: Given a value V, if we want to make a change for V Rs, and we have an infinite supply of each of the 
denominations in Indian currency, i.e., we have an infinite supply of { 1, 2, 5, 10, 20, 50, 100, 500, 1000} valued coins/notes,
what is the minimum number of coins and/or notes needed to make the change.

Examples:

Example 1:

Input: V = 70

Output: 2

Explaination: We need a 50 Rs note and a 20 Rs note.

Example 2:

Input: V = 121

Output: 3

Explaination: We need a 100 Rs note, a 20 Rs note and a 1 Rs coin.
Solution:

Disclaimer: Don’t jump directly to the solution, try it out yourself first.

MY_SOLUTION


Solution: Greedy Algorithm

Approach: We will keep a pointer at the end of the array i. Now while(V >= coins[i]) we will reduce V by coins[i] and add it to the ans array.

We will also ignore the coins which are greater than V and the coins which are less than V. We consider them and reduce the value of V by coins[I].

import java.util.*;
public class Solution
{
public static int findMinimumCoins(int amount)
    {
        int value = amount;
        ArrayList<Integer> ans = new ArrayList<>();
        int[] coins = {1, 2, 5, 10, 20, 50, 100, 500, 1000};
        int len = coins.length;
        
        for(int i = len -1 ; i >=0; i--){
            while(value >= coins[i]){
                value -= coins[i];
                ans.add(coins[i]);
            }
        }
        return ans.size();
    }
}

Time Complexity:O(V)

Space Complexity:O(1)

===========================================================================================
OTHER_SOLUTION
Dynamic Programming
We can use dynamic programming to solve this problem. 

We maintain a vector ‘dp’ of size AMOUNT+1 and initialize it to a maximum value (say AMOUNT + 1). 
Here, dp[i] stores the minimum number of coins needed to change an amount ‘i’. 

Algorithm
We set dp[0] to 0 as minimum coins to change an amount of ‘0’ is 0.
We then traverse denominations from beginning to end (loop variable i).
We loop from denominations[i] to amount (loop variable j).
Now, if we pick the i-th coin, we will be interested in minimum coins needed to make a change of amount j - denominations[i].
So, we set dp[j] to the minimum of dp[j] and dp[j - denominations[i]] + 1.
Finally, we return dp[amount] as answer.

Time Complexity
O(N * Amount), where ‘N’ denotes the size of the denomination array and ‘Amount’ represents the amount to be changed.

For every denomination value, we are filling the ‘dp’ array. In the worst case, the time complexity will be O(N*AMOUNT).

Space Complexity
O(Amount), where 'Amount; represents the given amount to be changed.

We are making a ‘dp’ array/list of size Amount + 1 to store the minimum coins required for amounts from 1 to Amount. 
So, the overall space complexity is O(Amount).

/*
    Time Complexity: O(Amount*N)
    Space Complexity: O(Amount)

    where 'Amount' is the given amount to be changed
    and N is the nuber of denominations given.
*/

import java.util.ArrayList;
import java.util.Arrays;

public class Solution
{
public static int findMinimumCoins(int amount)
    {
        // Array to store denominations.
        ArrayList<Integer> denominations = new ArrayList<Integer>();
        denominations.add(1);
        denominations.add(2);
        denominations.add(5);
        denominations.add(10);
        denominations.add(20);
        denominations.add(50);
        denominations.add(100);
        denominations.add(500);
        denominations.add(1000);
        int n = denominations.size();

        int maxVal = amount + 1;

        // Initialize all values of 'dp' array with 'maxVal'.
        int[] dp = new int[amount + 1];
        Arrays.fill(dp, maxVal);

        dp[0] = 0;

        // Pick each coin
        for (int i = 0; i < n; i++)
        {
            for (int j = denominations.get(i); j <= amount; j++)
            {
                int x = Math.min(dp[j], dp[j - (denominations.get(i))] + 1);
                dp[j] = x;
            }
        }

        return dp[amount];
    }
}

===========================================
Greedy Approach
We will use the greedy approach to solve our problem. 
The intuition behind this idea is that since we need to minimize the total number of coins needed to make the change, taking coins with 
large denominations (i.e. the best available option) in each iteration can yield the best overall result.

Algorithm

We will first sort the ‘denominations’ array, if not sorted.
We initialize ‘coinsCount’ to 0 and traverse ‘denominations’ from the end to the beginning.
While denominations[i] is greater than or equal to ‘amount’-
We increment ‘coinsCount’ by one.
We subtract denominations[i] from ‘amount’.
If ‘amount’ becomes 0, it means we have found a solution. So, we simply break from the loop.
Finally, we return ‘coinsCount’ as our result.

Time Complexity
O(Amount), where ‘Amount’ represents the amount to be changed.
In the worst case, we will end up removing the highest denomination coin most of the times. 
Note that the coins with a lesser denomination will not get picked by more than two times because 
there always exists a higher denomination for equivalent value.

Space Complexity
O(1)
Constant space is used.

/*
    Time Complexity: O(Amount)
    Space Complexity: O(1)

    where 'Amount' is the given amount to be changed.
*/

import java.util.ArrayList;

public class Solution
{
public static int findMinimumCoins(int amount)
    {
        // Array to store denominations.
        ArrayList<Integer> denominations = new ArrayList<Integer>();
        denominations.add(1);
        denominations.add(2);
        denominations.add(5);
        denominations.add(10);
        denominations.add(20);
        denominations.add(50);
        denominations.add(100);
        denominations.add(500);
        denominations.add(1000);

        int coinsCount = 0;
        int n = denominations.size();

        // Pick coins in decreasing order of their values
        for (int i = n - 1; i >= 0; i--)
        {
            while (amount >= denominations.get(i))
            {
                amount = amount - denominations.get(i);
                coinsCount++;
            }
        }

        return coinsCount;
    }
}


=================================================
Optimized Greedy Approach
We know that if we have an amount of X and a certain type of coin, say Y, then we can make a change of int(X/Y) coins and 
an amount of X%Y will remain unchanged. So, we can use this idea to further optimize our previous approach in which we were counting a coin again and again.

Algorithm

We will first sort the ‘denominations’ array/list, if not sorted.
We initialize ‘coinsCount’ to 0 and traverse ‘denominations’ from the end to the beginning.
Increment ‘coinsCount’ by int(AMOUNT / denominations[i]).
Set ‘AMOUNT’ to AMOUNT % denominations[i].
Finally, we return ‘coinsCount’ as our result.

Time Complexity
O(N), where N denotes the size of denomination array/list.
In the worst case, we might end up picking every coin in our change.

Space Complexity
O(1)
Constant space is used.
/*
    Time Complexity: O(N)
    Space Complexity: O(1)

    where 'N' is the number of denominations given.
*/

import java.util.ArrayList;

public class Solution
{
public static int findMinimumCoins(int amount)
    {
        // Array to store denominations.
        ArrayList<Integer> denominations = new ArrayList<Integer>();
        denominations.add(1);
        denominations.add(2);
        denominations.add(5);
        denominations.add(10);
        denominations.add(20);
        denominations.add(50);
        denominations.add(100);
        denominations.add(500);
        denominations.add(1000);

        int coinsCount = 0;
        int n = denominations.size();

        // Pick coins in decreasing order of their values
        for (int i = n - 1; i >= 0; i--)
        {
            coinsCount = coinsCount + (amount / denominations.get(i));
            amount %= denominations.get(i);
        }

        return coinsCount;
    }
}




