Given arrival and departure times of all trains that reach a railway station. Find the minimum number of platforms required for the railway station so that no train is kept waiting.
Consider that all the trains arrive on the same day and leave on the same day. Arrival and departure time can never be the same for a train but we can have arrival time of one train equal to departure time of the other. At any given instance of time, same platform can not be used for both departure of a train and arrival of another train. In such cases, we need different platforms.


Example 1:

Input: n = 6 
arr[] = {0900, 0940, 0950, 1100, 1500, 1800}
dep[] = {0910, 1200, 1120, 1130, 1900, 2000}
Output: 3
Explanation: 
Minimum 3 platforms are required to 
safely arrive and depart all trains.
Example 2:

Input: n = 3
arr[] = {0900, 1100, 1235}
dep[] = {1000, 1200, 1240}
Output: 1
Explanation: Only 1 platform is required to 
safely manage the arrival and departure 
of all trains. 

Your Task:
You don't need to read input or print anything. Your task is to complete the function findPlatform() which takes 
the array arr[] (denoting the arrival times), array dep[] (denoting the departure times) and the size of the array as 
inputs and returns the minimum number of platforms required at the railway station such that no train waits.

Note: Time intervals are in the 24-hour format(HHMM) , where the first two characters represent hour (between 00 to 23 ) and the 
last two characters represent minutes (this may be > 59).


Expected Time Complexity: O(nLogn)
Expected Auxiliary Space: O(n)


Constraints:
1 ≤ n ≤ 50000
0000 ≤ A[i] ≤ D[i] ≤ 2359

MY_SOLUTION
Solution 1: Naive Approach 

Intuition: Take each interval of arrival and departure one by one and count the number of overlapping time intervals. 
This can easily be done using nested for-loops. Maintain the maximum value of the count during the process and return the maximum value at the end.

Approach: We need to run two nested for-loops. Inside the inner loop count the number of intervals which intersect with the interval represented by the outer loop. 
As soon as the inner loop ends just update the maximum value of count and proceed with the next iteration of the outer loop. 
After the process ends we will get the maximum value of the count.

class Solution
{
    //Function to find the minimum number of platforms required at the
    //railway station such that no train waits.
    static int findPlatform(int arr[], int dep[], int n)
    {
        // add your code here
        //Brute Force

        int ans = 1;
        
        for(int i = 0; i <= n - 1; i++){
            
            int count = 1; // count of overlapping interval of only this   iteration
            for(int j = i + 1; j < n - 1; j++){
                if((arr[i] >= arr[j] && arr[i] <= dep[j]) || 
                (arr[j] >= arr[i] && arr[j] <= dep[i])){
                    count++;
                    
                }
            }
            ans = Math.max(ans, count);
            
        }
        return ans;
         
    }
    
}



Time Complexity: O(n^2)  (due to two nested loops).

Space Complexity: O(1)  (no extra space used).

=======================================================================================================
Solution 2: Efficient Approach [Sorting]

Intuition: At first we need to sort both the arrays. 
When the events will be sorted, it will be easy to track the count of trains that have arrived but not departed yet. 
Total platforms needed at one time can be found by taking the difference of arrivals and departures at that time and the maximum value of all times 
will be the final answer.

Approach:  At first we need to sort both the arrays. When the events will be sorted, it will be easy to track the count of trains that have arrived 
but not departed yet. Total platforms needed at one time can be found by taking the difference of arrivals and departures at that time and the maximum 
value of all times will be the final answer. If(arr[i]<=dep[j]) means if arrival time is less than or equal to the departure time then- we need one more platform. 
So increment count as well as increment i. If(arr[i]>dep[j]) means arrival time is more than the departure time then- we have one extra platform which we can reduce. 
So decrement count but increment j. Update the ans with max(ans, count) after each iteration of the while loop.

class Solution
{
    //Function to find the minimum number of platforms required at the
    //railway station such that no train waits.
    static int findPlatform(int arr[], int dep[], int n)
    {
        
        // OPTIMISED -> SORTING
        // sort the both arrays
        Arrays.sort(arr);
        Arrays.sort(dep);
        
        int plat_need = 1;
        int ans = 1;
        
        int i = 1, j = 0;
        
        while(i < n && j < n){
            if(arr[i] <= dep[j]){
                plat_need++;
                i++;
            }
            else if(arr[i] > dep[j]){
                plat_need--;
                j++;
            }
            
            if(plat_need > ans){
                ans = plat_need;
            }
        }
        return ans;
        
        
        
    }
    
}



Time Complexity: O(nlogn)   (Sorting takes O(nlogn) and traversal of arrays takes O(n) so overall time complexity is O(nlogn)).

Space complexity: O(1)   (No extra space used).

