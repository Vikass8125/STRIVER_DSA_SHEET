Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy all of the following rules:

Each of the digits 1-9 must occur exactly once in each row.
Each of the digits 1-9 must occur exactly once in each column.
Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
The '.' character indicates empty cells.

 

Example 1:


Input: board = [["5","3",".",".","7",".",".",".","."],
                ["6",".",".","1","9","5",".",".","."],
                [".","9","8",".",".",".",".","6","."],
                ["8",".",".",".","6",".",".",".","3"],
                ["4",".",".","8",".","3",".",".","1"],
                ["7",".",".",".","2",".",".",".","6"],
                [".","6",".",".",".",".","2","8","."],
                [".",".",".","4","1","9",".",".","5"],
                [".",".",".",".","8",".",".","7","9"]]
                
Output: [["5","3","4","6","7","8","9","1","2"],
         ["6","7","2","1","9","5","3","4","8"],
         ["1","9","8","3","4","2","5","6","7"],
         ["8","5","9","7","6","1","4","2","3"],
         ["4","2","6","8","5","3","7","9","1"],
         ["7","1","3","9","2","4","8","5","6"],
         ["9","6","1","5","3","7","2","8","4"],
         ["2","8","7","4","1","9","6","3","5"],
         ["3","4","5","2","8","6","1","7","9"]]

Constraints:

board.length == 9
board[i].length == 9
board[i][j] is a digit or '.'.
It is guaranteed that the input board has only one solution.

MY_SOLUTION

Intuition:

Since we have to fill the empty cells with available possible numbers and we can also have multiple solutions, 
the main intuition is to try every possible way of filling the empty cells. 
And the more correct way to try all possible solutions is to use recursion.
In each call to the recursive function, we just try all the possible numbers for a particular cell and transfer the updated board to the next recursive call.

Approach:

Let’s see the step by step approach. Our main recursive function(solve()) is going to just do a plain matrix traversal of the sudoku board.
When we find an empty cell, we pause and try to put all available numbers(1 – 9) in that particular empty cell.
 We need another loop to do that. But wait, we forgot one thing – the board has to satisfy all the conditions, right? 
 So, for that we have another function(isValid()) which will check whether the number we have inserted into that empty cell will not violate any conditions.
 If it is violating, we try with the next number. If it is not, we call the same function recursively, but this time with the updated state of the board. 
 Now, as usual it tries to fill the remaining cells in the board in the same way.
Now we’ll come to the returning values. If at any point we cannot insert any numbers from 1 – 9 in a particular cell, 
it means the current state of the board is wrong and we need to backtrack. An important point to follow is, 
we need to return false to let the parent function(which is called this function) know that we cannot fill this way. 
This will serve as a hint to that function, that it needs to try with the next possible number. Refer to the picture below.


 If a recursive call returns true, we can assume that we found one possible way of filling and we simply do an early return.
Validating Board

 Now, let’s see how we are validating the sudoku board. After determining a number for a cell(at i’th row, j’th col), we try to check the validity.
 As we know, a valid sudoku needs to satisfy 3 conditions, we can use three loops. But we can do within a single loop itself. Let’s try to understand that.
We loop from 0 to 8 and check the values – board[i][col](1st condition) and board[row][i](2nd condition), whether the number is already included. 
For the 3rd condition – the expression (3 * (row / 3) + i / 3) evaluates to the row numbers of that 3×3 submatrix and the expression (3 * (col / 3) + i % 3) 
evaluates to the column numbers.
For eg, if row= 5 and col= 3, the cells visited are


It covers all the cells in the sub-matrix.

class Solution {
    public void solveSudoku(char[][] board) {
        solve(board);
    }
    
    private boolean solve(char[][] board){
        for(int i = 0; i < 9; i++){
            for(int j = 0; j < 9; j++){
                if(board[i][j] == '.'){
                    
                    for(char c = '1'; c <= '9'; c++){
                        if(isValid(board, i, j, c)){
                            
                            board[i][j] = c;
                            
                            if(solve(board))
                                return true;
                            else
                                //backtracking
                                board[i][j] = '.';
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
    
    private boolean isValid(char[][] board, int row, int col, char c){
        for(int i = 0 ; i < 9; i++){
            //checking the row
            if(board[i][col] == c){
                return false;
            }
            
            // checking the col
            if(board[row][i] == c){
                return false;
            }
            
            // checking the 3 x 3 box
            if(board[3 * (row/3) + i/3][3 * (col / 3) + i%3] == c){
                return false;
            }
        }
        return true;
    }
}

Time Complexity: O(9(n ^ 2)), in the worst case, for each cell in the n2 board, we have 9 possible numbers.

Space Complexity: O(1), since we are refilling the given board itself, there is no extra space required, so constant space complexity.

=======================================================================
This solution avoids for loops; instead we just check each box one by one and iterate to the next value. 
Very simple and intuitive, something you can come up with on an interview.

class Solution {
    public void solveSudoku(char[][] board) {
        // We are going to need to edit our sudoku board
        solve(board, 0, 0);
    }

    public boolean solve(char[][] board, int row, int col) {
        // If the col is 9, that means you've filled out a whole row. Start the search on the next row by resetting column and incrementing the row by 1
        if (col == board[0].length) {
            col = 0;
            row += 1;
        }
        // If you've reached 9, that means you didn't run into any errors with your blocks in the previous rows, so you have a valid solution
        if (row == board.length) {
            return true; 
        }
        // If this piece already has a value, check the next square
        if (board[row][col] != '.') return solve(board, row, col+1);
        // We want to try every number for this block
        for (char num = '1'; num <= '9'; num++) {
            // Self explanatory, don't run this if the number isn't a valid answer
            if (checkIfValid(board, row, col, num)) {
                // Set the value of the current square to the valid num
                board[row][col] = num;
                // Run this algo for the next square over
                boolean solved = solve(board, row, col+1);
                // The only way we can trigger a true is if we got to the end, so if it's true that means we have a solved board so you just keep returning
                if (solved) return true;
                // If our board isn't solved, backtrack and try the next number
                else board[row][col] = '.';
            }
        }
        // You get this when every value of the board is filled, because you don't run anything on it
        // If you get to this step, that means that no values fit, which means the current iteration of the board is wrong so 
        //return false and try the previous step again with a different value
        return false;
    }

    public boolean checkIfValid(char[][] board, int row, int col, char value) {
        for (int i = 0; i < board.length; i++) {
            // Check the column for duplicates
            if (board[i][col] == value) return false; 
            // Check the row for duplicates
            if (board[row][i] == value) return false;
        }
        // This generates our "box", for [1, 1] for example, this pair will be the box bound by [0, 2] and [0,2]
        int boxRow = row / 3;
        int boxCol = col / 3;
        for (int i = boxRow * 3; i < (boxRow + 1) * 3; i++) {
            for (int j = boxCol * 3; j < (boxCol + 1) * 3; j++) {
                // Check the box for duplicates
                if (board[i][j] == value) return false;
            }
        }
		// There are no falses, therefore this is a valid number to put on the square
        return true;
    }
}
