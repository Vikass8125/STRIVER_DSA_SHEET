Given an undirected graph and an integer M. The task is to determine if the graph can be colored with at most M colors such that 
no two adjacent vertices of the graph are colored with the same color. Here coloring of a graph means the assignment of colors to all vertices. 
Print 1 if it is possible to colour vertices and 0 otherwise.

Example 1:

Input:
N = 4
M = 3
E = 5
Edges[] = {(0,1),(1,2),(2,3),(3,0),(0,2)}
Output: 1
Explanation: It is possible to colour the
given graph using 3 colours.
Example 2:

Input:
N = 3
M = 2
E = 3
Edges[] = {(0,1),(1,2),(0,2)}
Output: 0
Your Task:
Your task is to complete the function graphColoring() which takes the 2d-array graph[], the number of colours and the number of nodes as inputs and 
returns true if answer exists otherwise false. 1 is printed if the returned value is true, 0 otherwise. The printing is done by the driver's code.
Note: In Example there are Edges not the graph.Graph will be like, if there is an edge between vertex X and vertex Y graph[] will contain 1 at graph[X-1][Y-1], else 0.
In 2d-array graph[ ], nodes are 0-based indexed, i.e. from 0 to N-1.Function will be contain 2-D graph not the edges.

Expected Time Complexity: O(M^N).
Expected Auxiliary Space: O(N).

Constraints:
1 ≤ N ≤ 20
1 ≤ E ≤ (N*(N-1))/2
1 ≤ M ≤ N

MY_SOLUTION

Solution 1: Backtracking

Approach:

Basically starting from vertex 0 color one by one the different vertices. 

Base condition:

If I have colored all the N nodes return true.

Recursion:

Trying every color from 1 to m with the help of a for a loop.

Is safe function returns true if it is possible to color it with that color i.e none of the adjacent nodes have the same color.

In case this is an algorithm and follows a certain intuition, please mention it. 

Color it with color i then call the recursive function for the next node if it returns true we will return true.

And If it is false then take off the color.

Now if we have tried out every color from 1 to m and it was not possible to color it with any of the m colors then return false.

class solve {
    // Function to determine if graph can be coloured with at most M colours
    // such
    // that no two adjacent vertices of graph are coloured with same colour.
    public boolean graphColoring(boolean graph[][], int m, int n) {
        int[] color = new int[n];
        
        if(solve(0, graph, color, m, n)) return true;
        
        return false;
    }
    
    public boolean solve(int ele, boolean[][] graph, int[] color, int m, int n){
        if(ele == n) return true;
        
        for(int i = 1; i <=m; i++){
            if(isSafe(ele, graph, color, i, n)){
                color[ele] = i;
                if(solve(ele + 1, graph, color, m, n)) return true;
                color[ele] = 0;
            }
        }
        return false;
    }
    
    public boolean isSafe(int ele, boolean[][] graph, int[] color, int col, int n){
        for(int i = 0; i < n; i++){
            if(graph[ele][i] && color[i] == col) return false;
        }
        
        return true;
    }
}



=======================================================

import java.util.*;
class TUF {
    public static boolean graphColoring(List < Integer > [] G, int[] color, int i, int C) {
        // Your code here
        int n = G.length;
        if (solve(i, G, color, n, C) == true) return true;
        return false;
    }
    private static boolean isSafe(int node, List < Integer > [] G, int[] color, int n, int col) {
        for (int it: G[node]) {
            if (color[it] == col) return false;
        }
        return true;
    }
    private static boolean solve(int node, List < Integer > [] G, int[] color, int n, int m) {
        if (node == n) return true;

        for (int i = 1; i <= m; i++) {
            if (isSafe(node, G, color, n, i)) {
                color[node] = i;
                if (solve(node + 1, G, color, n, m) == true) return true;
                color[node] = 0;
            }
        }
        return false;
    }
    public static void main(String[] args) {
        int N = 4, M = 3;
        List < Integer > [] G = new ArrayList[N];
        for (int i = 0; i < N; i++) {
            G[i] = new ArrayList < > ();
        }
        G[0].add(1);
        G[1].add(0);
        G[1].add(2);
        G[2].add(1);
        G[2].add(3);
        G[3].add(2);
        G[3].add(0);
        G[0].add(3);
        G[0].add(2);
        G[2].add(0);
        int[] color = new int[N];
        boolean ans = graphColoring(G, color, 0, M);
        if (ans == true)
            System.out.println("1");
        else
            System.out.println("0");
    }
}
Output: 1

Time Complexity: O( N^M) (n raised to m)

Space Complexity: O(N)

====================================================
class solve {
    
    boolean isPossible(int node,ArrayList<ArrayList<Integer>> edge,int col[],int i){
        for(int it: edge.get(node)){
            if(col[it]==i)return false;
        }
        return true;
    }
    
    boolean solve(int node,  ArrayList<ArrayList<Integer>> edge,int col[],int n,int m){
    	
        if(node==n)return true;
        
        for(int i=1;i<=m;i++){
            if(isPossible(node,edge,col,i)==true){
                col[node]=i;
                if(solve(node+1,edge,col,n,m)==true)  return true;
                col[node]=0;
            }
        }
        return false;
    }
    
    
    
    public boolean graphColoring(boolean graph[][], int m, int n) {
        ArrayList<ArrayList<Integer>> edge=new ArrayList<>();
            
        for(int i=0;i<n;i++)edge.add(new ArrayList<>());
        
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(graph[i][j]==true){                   
                    edge.get(i).add(j);
                    edge.get(j).add(i);
                }
            }
        }
        int col[]=new int[n];
     
        if(solve(0,edge,col,n,m)==true)return true;
        else return false;
    }
}


