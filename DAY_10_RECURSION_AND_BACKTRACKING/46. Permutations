Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.


Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
 

Constraints:

1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.


MY_SOLUTION

Solution 1: Recursive

Approach: We have given the nums array, so we will declare an ans vector of vector that will store all the permutations also declare a data structure.

Declare a map and initialize it to zero and call the recursive function

Base condition:

When the data structure’s size is equal to n(size of nums array)  then it is a permutation and stores that permutation in our ans, then returns it.

Recursion:

Run a for loop starting from 0 to nums.size() – 1. 
Check if the frequency of i is unmarked, if it is unmarked then it means it has not been picked and then we pick.\ And make sure it is marked as picked.

Call the recursion with the parameters to pick the other elements when we come back from the recursion make sure you throw that element out. 
And unmark that element in the map.

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        // APPROACH - 1
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> ds = new ArrayList<>();
        
        boolean[] freq = new boolean[nums.length];
        
        recPermute(nums, ds, ans,freq);
        return ans;
    }
    
    private void recPermute(int[] nums, List<Integer> ds, List<List<Integer>> ans, boolean[] freq){
        // base case
        if(ds.size() == nums.length){
            ans.add(new ArrayList<>(ds));
            return;
        }
        
        for(int i = 0; i < nums.length; i++){
            if(!freq[i]){
                freq[i] = true;
                ds.add(nums[i]);
                recPermute(nums, ds, ans,freq);
                // backtracking
                ds.remove(ds.size() - 1);
                freq[i] = false;
            }
        }
    }
}

Time Complexity:  N! x N

Space Complexity:  O(N)
===================================================================================================================

Solution 2: With Backtracking.

Approach: Using backtracking to solve this.

We have given the nums array, so we will declare an ans vector of vector that will store all the permutations.

Call a recursive function that starts with zero, nums array, and ans vector.

Declare a map and initialize it to zero and call the recursive function

Base condition:

Whenever the index reaches the end take the nums array and put it in ans vector and return.

Recursion:

Go from index to n – 1 and swap. Once the swap has been done call recursion for the next state.
After coming back from the recursion make sure you re-swap it because for the next element the swap will not take place.

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        // APPROACH - 2
        List<List<Integer>> ans = new ArrayList<>();
        
        recPerm(0, nums, ans);
        return ans;
    }
    
    private void recPerm(int index, int[] nums, List<List<Integer>> ans){
        // base case
        if(index == nums.length){
            // copy the ds to ans
            List<Integer> ds = new ArrayList<>();
            
            for(int i = 0; i < nums.length; i++){
                ds.add(nums[i]);
            }
            
            ans.add(new ArrayList<>(ds));
            return;
        }
        
        for(int i = index; i < nums.length; i++){
            swap(i, index, nums);
            recPerm(index + 1, nums, ans);
            //backtracking
            swap(i, index, nums);
        }
    }
    
    private void swap(int first, int second, int[] nums){
        int temp = nums[first];
        nums[first] = nums[second];
        nums[second] = temp;
    }
    
    
}

Time Complexity: O(N! X N)

Space Complexity: O(1)
============================================================================================================

Classic combinatorial search problem, we can solve it using 3-step system

Identify states
What state do we need to know whether we have reached a solution (and using it to construct a solution if the problem asks for it).
We need a state to keep track of the list of letters we have chosen for the current permutation
What state do we need to decide which child nodes should be visited next and which ones should be pruned?
We have to know what are the letters left that we can still use (since each letter can only be used once).

Draw the State-space Tree


DFS on the State-space tree
Using the backtracking template as basis, we add the two states we identified in step 1:

A list to represent permutation constructed so far, path
A list to record which letters are already used, used, used[i] == true means ith letter in the origin list has been used.
class Solution {
    public List<List<Integer>> permute(int[] letters) {
        List<List<Integer>> res = new ArrayList<>();
        dfs(new ArrayList<>(), new boolean[letters.length], res, letters);
        return res;
    }

    private static void dfs(List<Integer> path, boolean[] used, List<List<Integer>> res, int[] letters) {
        if (path.size() == used.length) {
            // make a deep copy since otherwise we'd be append the same list over and over
            res.add(new ArrayList<Integer>(path));
            return;
        }

        for (int i = 0; i < used.length; i++) {
            // skip used letters
            if (used[i]) continue;
            // add letter to permutation, mark letter as used
            path.add(letters[i]);
            used[i] = true;
            dfs(path, used, res, letters);
            // remove letter from permutation, mark letter as unused
            path.remove(path.size() - 1);
            used[i] = false;
        }
    }    
}
=========================================================================================

Bottom up? approach - 280ms

public class Solution {
   public List<List<Integer>> permute(int[] nums) {
		List<List<Integer>> permutations = new ArrayList<>();
		if (nums.length == 0) {
			return permutations;
		}

		collectPermutations(nums, 0, new ArrayList<>(), permutations);
		return permutations;
    }

	private void collectPermutations(int[] nums, int start, List<Integer> permutation,
 			List<List<Integer>>  permutations) {
		
		if (permutation.size() == nums.length) {
			permutations.add(permutation);
			return;
		}

		for (int i = 0; i <= permutation.size(); i++) {
			List<Integer> newPermutation = new ArrayList<>(permutation);
			newPermutation.add(i, nums[start]);
			collectPermutations(nums, start + 1, newPermutation, permutations);
		}
	}
}
Code flow

nums = 1,2,3

start = 0, permutation = []
i = 0, newPermutation = [1]
	start = 1, permutation = [1]
	i = 0, newPermutation = [2, 1]
		start = 2, permutation = [2, 1]
		i = 0, newPermutation = [3, 2, 1]
		i = 1, newPermutation = [2, 3, 1]
		i = 2, newPermutation = [2, 1, 3]
	i = 1, newPermutation = [1, 2]
		start = 2, permutation = [1, 2]
		i = 0, newPermutation = [3, 1, 2]
		i = 1, newPermutation = [1, 3, 2]
		i = 2, newPermutation = [1, 2, 3]
Base case and build approach - 524ms

public class Solution {
   public List<List<Integer>> permute(int[] nums) {
		return permute(Arrays.stream(nums).boxed().collect(Collectors.toList()));
   }

	private List<List<Integer>> permute(List<Integer> nums) {
		List<List<Integer>> permutations = new ArrayList<>();
		if (nums.size() == 0) {
			return permutations;
		}
		if (nums.size() == 1) {
			List<Integer> permutation = new ArrayList<>();
			permutation.add(nums.get(0));
			permutations.add(permutation);
			return permutations;
		}
		
		List<List<Integer>> smallPermutations = permute(nums.subList(1, nums.size()));
		int first = nums.get(0);
		for(List<Integer> permutation : smallPermutations) {
			for (int i = 0; i <= permutation.size(); i++) {
				List<Integer> newPermutation = new ArrayList<>(permutation);
				newPermutation.add(i, first);
				permutations.add(newPermutation);
			}
		}
		return permutations;
	}
}
Code flow

nums = 1,2,3

smallPermutations(2, 3)
	smallPermutations(3)
		return [[3]]
	first = 2
 		permutation = [3]
			i = 0, newPermutation = [2, 3]
			i = 1, newPermutation = [3, 2]
	return [[2, 3], [3, 2]]
first = 1
 	permutation = [2, 3]
		i = 0, newPermutation = [1, 2, 3]
		i = 1, newPermutation = [2, 1, 3]
		i = 2, newPermutation = [2, 3, 1]
 	permutation = [3, 2]
		i = 0, newPermutation = [1, 3, 2]
		i = 1, newPermutation = [3, 1, 2]
		i = 2, newPermutation = [3, 2, 1]

========================================================================================
Recursive Backtracking

/**
 * Recursive Backtracking. In this solution passing the index of the nums that
 * needs to be set in the current recursion.
 *
 * Time Complexity: O(N * N!). Number of permutations = P(N,N) = N!. Each
 * permutation takes O(N) to construct
 *
 * T(n) = n*T(n-1) + O(n)
 * T(n-1) = (n-1)*T(n-2) + O(n-1)
 * ...
 * T(2) = (2)*T(1) + O(2)
 * T(1) = O(N) -> To convert the nums array to ArrayList.
 *
 * Above equations can be added together to get:
 * T(n) = n + n*(n-1) + n*(n-1)*(n-2) + ... + (n....2) + (n....1) * n
 *      = P(n,1) + P(n,2) + P(n,3) + ... + P(n,n-1) + n*P(n,n)
 *      = (P(n,1) + ... + P(n,n)) + (n-1)*P(n,n)
 *      = Floor(e*n! - 1) + (n-1)*n!
 *      = O(N * N!)
 *
 * Space Complexity: O(N). Recursion stack.
 *
 * N = Length of input array.
 */
class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        if (nums == null || nums.length == 0) {
            return result;
        }

        permutationsHelper(result, nums, 0);
        return result;
    }

    private void permutationsHelper(List<List<Integer>> result, int[] nums, int start) {
        if (start == nums.length - 1) {
            List<Integer> list = new ArrayList<>();
            for (int n : nums) {
                list.add(n);
            }
            result.add(list);
            return;
        }
        for (int i = start; i < nums.length; i++) {
            swap(nums, start, i);
            permutationsHelper(result, nums, start + 1);
            swap(nums, start, i);
        }
    }

    private void swap(int[] nums, int x, int y) {
        int t = nums[x];
        nums[x] = nums[y];
        nums[y] = t;
    }
}
Iterative Solution

/**
 * Iterative Solution
 *
 * The idea is to add the nth number in every possible position of each
 * permutation of the first n-1 numbers.
 *
 * Time Complexity: O(N * N!). Number of permutations = P(N,N) = N!. Each
 * permutation takes O(N) to construct
 *
 * T(n) = (x=2->n) ∑ (x-1)!*x(x+1)/2
 *      = (x=1->n-1) ∑ (x)!*x(x-1)/2
 *      = O(N * N!)
 *
 * Space Complexity: O((N-1) * (N-1)!) = O(N * N!). All permutations of the first n-1 numbers.
 *
 * N = Length of input array.
 */
class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        if (nums == null || nums.length == 0) {
            return result;
        }

        result.add(Arrays.asList(nums[0]));

        for (int i = 1; i < nums.length; i++) {
            List<List<Integer>> newResult = new ArrayList<>();
            for (List<Integer> cur : result) {
                for (int j = 0; j <= i; j++) {
                    List<Integer> newCur = new ArrayList<>(cur);
                    newCur.add(j, nums[i]);
                    newResult.add(newCur);
                }
            }
            result = newResult;
        }

        return result;
    }
}
Recursive Backtracking using visited array

/**
 * Recursive Backtracking using visited array.
 *
 * Time Complexity: O(N * N!). Number of permutations = P(N,N) = N!. Each
 * permutation takes O(N) to construct
 *
 * T(n) = n*T(n-1) + O(n)
 * T(n-1) = (n-1)*T(n-2) + O(n)
 * ...
 * T(2) = (2)*T(1) + O(n)
 * T(1) = O(n)
 *
 * Above equations can be added together to get:
 * T(n) = n (1 + n + n*(n-1) + ... + (n....2) + (n....1))
 *      = n (P(n,0) + P(n,1) + P(n,1) + ... + P(n,n-1) + P(n,n))
 *      = n * Floor(e*n!)
 *      = O(N * N!)
 *
 * Space Complexity: O(N). Recursion stack + visited array
 *
 * N = Length of input array.
 */
class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        if (nums == null) {
            return result;
        }

        helper(result, new ArrayList<>(), nums, new boolean[nums.length]);
        return result;
    }

    private void helper(List<List<Integer>> result, List<Integer> temp, int[] nums, boolean[] visited) {
        if (temp.size() == nums.length) {
            result.add(new ArrayList<>(temp));
            return;
        }

        for (int i = 0; i < nums.length; i++) {
            if (visited[i]) {
                continue;
            }
            temp.add(nums[i]);
            visited[i] = true;
            helper(result, temp, nums, visited);
            visited[i] = false;
            temp.remove(temp.size() - 1);
        }
    }
}
