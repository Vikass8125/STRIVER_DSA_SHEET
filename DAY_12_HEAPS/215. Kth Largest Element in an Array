Given an integer array nums and an integer k, return the kth largest element in the array.

Note that it is the kth largest element in the sorted order, not the kth distinct element.

You must solve it in O(n) time complexity.

 

Example 1:

Input: nums = [3,2,1,5,6,4], k = 2
Output: 5
Example 2:

Input: nums = [3,2,3,1,2,4,5,5,6], k = 4
Output: 4
 

Constraints:

1 <= k <= nums.length <= 105
-104 <= nums[i] <= 104

MY_SOLUTION

class Solution {
    public int findKthLargest(int[] nums, int k) {
        //BRUTE FORCE -> O(nlogn)
        /*
        Arrays.sort(nums);
        return nums[nums.length - k];
        */
        
        // OPTIMISED -> HEAP -> T.C : O(nlogk)
        // k + LARGEST -> minHeap
        /*
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        
        for(int ele : nums){
            minHeap.add(ele);
            
            if(minHeap.size() > k) minHeap.poll();
        }
        
        return minHeap.peek();
        */
        
        // MORE OPTIMISED -> QUICK SORT
        return quickSelect(nums.length-k, nums, 0, nums.length - 1);
    }
    
    private int quickSelect(int k, int []nums, int start, int end) { //k-th smallest
        while(start < end) {
            int idx = start + (end - start)/2;
            int pivot = nums[idx], left=start, right=end;

            while(true) {
                while(nums[left] < pivot) ++left; // gives first index where nums[left] >= pivot
                while(nums[right] > pivot) --right; // gives first index from the right side where nums[right] <= pivot
                if(left == right) break;
                nums[left] ^= nums[right]; nums[right] ^= nums[left]; nums[left] ^= nums[right]; // swap using xor
                if(nums[left] == pivot && nums[right] == pivot) ++left; // both elements equal to the pivot, you can move any.
            }

            // the "right" index currently is the correct position of the pivot., we have "right" (value of right, ex 5) elements <= pivot
            // in line 12, if we chose --right, then we will end with *at least* right elements <= pivot
            if(k < right) end = right-1;
            else if(k > right) start = right+1;
            else return nums[right];
        }
        return nums[end]; // here start will be equal to end, so you can return any, or change the start<end condition to start<=end and return -1 
        //here to indicate invalid input k.
    }
}


===================================================================================================================================

public int findKthLargest(int[] nums, int k) {
  return quickSelect(nums, 0, nums.length - 1, k);
}

int quickSelect(int[] nums, int low, int high, int k) {
  int pivot = low;

  // use quick sort's idea
  // put nums that are <= pivot to the left
  // put nums that are  > pivot to the right
  for (int j = low; j < high; j++) {
    if (nums[j] <= nums[high]) {
      swap(nums, pivot++, j);
    }
  }
  swap(nums, pivot, high);
  
  // count the nums that are > pivot from high
  int count = high - pivot + 1;
  // pivot is the one!
  if (count == k) return nums[pivot];
  // pivot is too small, so it must be on the right
  if (count > k) return quickSelect(nums, pivot + 1, high, k);
  // pivot is too big, so it must be on the left
  return quickSelect(nums, low, pivot - 1, k - count);
}

===================================================================

Personally, the most straightforward way is to use quick select. There is a simple conversion:
Find kith largest element is equivalent to find (n - k)th smallest element in array. It is worth mentioning that (n - k) is
the real index (start from 0) of an element.

public class Solution {
    public int findKthLargest(int[] nums, int k) {
        int start = 0, end = nums.length - 1, index = nums.length - k;
        while (start < end) {
            int pivot = partion(nums, start, end);
            if (pivot < index) start = pivot + 1; 
            else if (pivot > index) end = pivot - 1;
            else return nums[pivot];
        }
        return nums[start];
    }
    
    private int partion(int[] nums, int start, int end) {
        int pivot = start, temp;
        while (start <= end) {
            while (start <= end && nums[start] <= nums[pivot]) start++;
            while (start <= end && nums[end] > nums[pivot]) end--;
            if (start > end) break;
            temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
        }
        temp = nums[end];
        nums[end] = nums[pivot];
        nums[pivot] = temp;
        return end;
    }
    
}
============================================================================================================

Solution 1: Sorting the Array
The most naive approach is to sort the given array in descending order.
The index of kth Largest element = k-1 ( zero-based indexing ) 
The index of kth Smallest element = n-k 
The array can also be sorted in ascending order.
The index of kth Largest element = n-k 
The index of kth Smallest element = k-1 ( zero based indexing )


Code:

C++ Code
#include <bits/stdc++.h>
using namespace std ;

class Solution {

public:

void kth_Largest_And_Smallest_By_AscendingOrder(vector<int>&arr, int k) {

        sort(arr.begin(), arr.end())  ;
        int n = arr.size()  ;

        cout << "kth Largest element " << arr[n - k] << ", " << 
        "kth Smallest element " << arr[k - 1];
    }
} ;
int main() {

    vector<int>arr = {1, 2, 6, 4, 5, 3}  ;

    Solution obj ;
    
    obj.kth_Largest_And_Smallest_By_AscendingOrder(arr, 3) ;

    return 0 ;
}
Output: kth Largest element 4, kth Smallest element 3

Time complexity: O(nlogn)

Space complexity: O(1)

Java Code
import java.util.*;

class Solution {

static void kth_Largest_And_Smallest_By_AscendingOrder(int[] arr, int k) {

        Arrays.sort(arr);
        int n = arr.length;

        System.out.println("kth Largest element "+arr[n - k]+", "+
        "kth Smallest element "+arr[k - 1]);
    }
    
public static void main(String args[]) {

    int arr[] = {1, 2, 6, 4, 5, 3}  ;
    
    kth_Largest_And_Smallest_By_AscendingOrder(arr, 3) ;

}
}
Output: kth Largest element 4, kth Smallest element 3

Time complexity: O(nlogn)

Space complexity: O(1)

Solution 2: Using Heap
The idea is to construct a max-heap of elements . Since the top element of the max-heap is the largest element of the heap ,
we will remove the top K-1 elements from the heap .  The top element will be Kth Largest element.
To get the Kth Smallest element , we will use a min-heap . After removal of top k-1 elements , the Kth Smallest element is top of the Priority queue.
Let the array be
[17,7,2,30,21] and k = 3


Similarly, for the smallest kth element we will be using Min-Heap. After, extracting the top k-1 values will be having Kth Smallest element.

Code:

import java.util.*;
class Solution {

    static void kth_Largest_MaxHeap(int[] arr, int k) {

        PriorityQueue<Integer>pq= new PriorityQueue<>((a,b)->b-a);
        
        int n = arr.length  ;

        for (int i = 0; i < arr.length; i++) {
            pq.add(arr[i])  ;
        }

        int f = k - 1 ;

        while (f > 0) {
            pq.remove()  ;
            f-- ;
        }

        System.out.println("Kth Largest element "+pq.peek())  ;
    }

    static void kth_Smallest_MinHeap(int[] arr, int k) {

        PriorityQueue<Integer>pq= new PriorityQueue<>();
        int n = arr.length  ;

        for (int i = 0; i < n; i++) {
            pq.add(arr[i])  ;
        }

        int f = k - 1 ;

        while (f > 0) {
            pq.remove()  ;
            f-- ;
        }

        System.out.println("Kth Smallest element "+pq.peek())  ;
    }
 
public static void main(String args[]) {

    int arr[] = {1, 2, 6, 4, 5, 3}  ;

    kth_Largest_MaxHeap(arr, 3)  ;
    kth_Smallest_MinHeap(arr, 3)  ;
}
}
Output:

Kth Largest element 4
Kth Smallest element 3

Time complexity: O(k+(n-k)*log(k))  , n = size of array

Space complexity: O(k)

Solution 3: Using Quickselect Algorithm
Choose any random element as PIVOT.
Use Partition Algorithm to partition the given array into 2 parts and place the PIVOT at its correct position ( called as index ).
Partition Algorithm : All the elements are compared to the PIVOT, and the elements less than the PIVOT are shifted towards the left 
side of the array and greater are shifted toward the right side of the array.
Now since, all elements right to the PIVOT are greater and left to the PIVOT are smaller , compare index with N-k ( where N = size of array )  
and recursively find the part to find the Kth largest element.
The worst case time complexity of this method is O(n^2) but its Average time complexity is O(n).


Code for kth largest element:

import java.util.*;

class TUF{
static int partition(int[] arr, int left, int right) {
    int pivot = arr[left] ;
    int l = left + 1 ;
    int r = right;
    while (l <= r) {
        if (arr[l] < pivot && arr[r] > pivot) {
            int temp=arr[l];
            arr[l]=arr[r];
            arr[r]=temp;
            l++ ;
            r-- ;
        }
        if (arr[l] >= pivot) {
            l++;
        }
        if (arr[r] <= pivot) {
            r--;
        }
    }
    int temp2=arr[left];
            arr[left]=arr[r];
            arr[r]=temp2;
    return r;
}

static int kth_Largest_Element(int[] arr, int k) {
    int left = 0, right = arr.length - 1, kth;
    while (true) {
        int idx = partition(arr, left, right);
        if (idx == k - 1) {
            kth = arr[idx];
            break;
        }
        if (idx < k - 1) {
            left = idx + 1;
        } else {
            right = idx - 1;
        }
    }
    return kth;
}

public static void main(String args[]) {

    int arr[]={12,3,5,7,4,19,26};

    int n = arr.length, k = 1;
    System.out.println("Kth Largest element is "+kth_Largest_Element(arr, k));
    }
}
Output: Kth Largest element is 26

Time complexity: O(n) , where n = size of the array

Space complexity: O(1) 

code for Kth Smallest element:

import java.util.*;

class TUF{
static int partition(int[] arr, int l, int r) {
    
    int f = arr[r] ;
	int i = l;

	for (int j = l; j <= r - 1; j++) {
		if (arr[j] <= f) {
		    int temp=arr[i];
		    arr[i]=arr[j];
		    arr[j]=temp;
			i++;
		}
	}
	int temp=arr[i];
        arr[i]=arr[r];
        arr[r]=temp;
	return i;
}

static int kth_Smallest_Element(int[] arr,int l,int r, int k) {
    if (k <= r - l + 1 && k > 0) {

		int ind = partition(arr, l, r);


		if (ind - l == k - 1) {
			return arr[ind];
		}
		if (ind - l > k - 1) {
			return kth_Smallest_Element(arr, l, ind - 1, k);
		}


		return kth_Smallest_Element(arr, ind + 1, r, k - ind + l - 1);
	}
	return Integer.MAX_VALUE;
}

public static void main(String args[]) {

    int arr[]={12,3,5,7,4,19,26};

    int n = arr.length, k = 1;
    System.out.println("Kth Smallest element is "+kth_Smallest_Element(arr, 0,n-1,k));
    }
}
Output: Kth smallest element is 3

Time complexity: O(n) ,where n = size of the array

Space complexity: O(1)
