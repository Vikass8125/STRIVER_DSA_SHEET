Problem Description

Given two equally sized 1-D arrays A, B containing N integers each.

A sum combination is made by adding one element from array A and another element of array B.

Return the maximum C valid sum combinations from all the possible sum combinations.



Problem Constraints
 1 <= N <= 105

 1 <= A[i] <= 103

 1 <= C <= N



Input Format
First argument is an one-dimensional integer array A of size N.

Second argument is an one-dimensional integer array B of size N.

Third argument is an integer C.



Output Format
Return a one-dimensional integer array of size C denoting the top C maximum sum combinations.

NOTE:

The returned array must be sorted in non-increasing order.



Example Input
Input 1:

 A = [3, 2]
 B = [1, 4]
 C = 2
Input 2:

 A = [1, 4, 2, 3]
 B = [2, 5, 1, 6]
 C = 4


Example Output
Output 1:

 [7, 6]
Output 1:

 [10, 9, 9, 8]


Example Explanation
Explanation 1:

 7     (A : 3) + (B : 4)
 6     (A : 2) + (B : 4)
Explanation 2:

 10   (A : 4) + (B : 6)
 9   (A : 4) + (B : 5)
 9   (A : 3) + (B : 6)
 8   (A : 3) + (B : 5)

MY_SOLUTION

Approach 1 (Naive Algorithm): We can use Brute force through all the possible combinations that can be made by taking one element from 
array A and another from array B and inserting them to a max heap. In a max heap maximum element is at the root node so whenever we pop 
from max heap we get the maximum element present in the heap. 
After inserting all the sum combinations we take out K elements from max heap and display it.
// Java program to find K
// maximum combinations
// from two arrays,
import java.io.*;
import java.util.*;

class GFG {

	// function to display first K
	// maximum sum combinations
	static void KMaxCombinations(int A[], int B[],
								int N, int K)
	{
		// max heap.
		PriorityQueue<Integer> pq
			= new PriorityQueue<Integer>(
				Collections.reverseOrder());

		// Insert all the possible
		// combinations in max heap.
		for (int i = 0; i < N; i++)
			for (int j = 0; j < N; j++)
				pq.add(A[i] + B[j]);

		// Pop first N elements
		// from max heap and
		// display them.
		int count = 0;

		while (count < K) {
			System.out.println(pq.peek());
			pq.remove();
			count++;
		}
	}

	// Driver Code
	public static void main(String[] args)
	{
		int A[] = { 4, 2, 5, 1 };
		int B[] = { 8, 0, 5, 3 };
		int N = A.length;
		int K = 3;

		// Function Call
		KMaxCombinations(A, B, N, K);
	}
}


=======================================================================

Time Complexity: O(N2)
Auxiliary Space : O(N2)

Approach 2 (Sorting, Max heap, Map) : 

Instead of brute-forcing through all the possible sum combinations, we should find a way to limit our search space to possible candidate sum combinations. 

1.Sort both arrays array A and array B.
2.Create a max heap i.e priority_queue in C++ to store the sum combinations along with the indices of elements from both arrays A and B which make up the sum. 
Heap is ordered by the sum.
3.Initialize the heap with the maximum possible sum combination i.e (A[N – 1] + B[N – 1] where N is the size of array) and with the indices of elements 
from both arrays (N – 1, N – 1). The tuple inside max heap will be (A[N-1] + B[N – 1], N – 1, N – 1). Heap is ordered by first value i.e sum of both elements.
4.Pop the heap to get the current largest sum and along with the indices of the element that make up the sum. Let the tuple be (sum, i, j).
  ->Next insert (A[i – 1] + B[j], i – 1, j) and (A[i] + B[j – 1], i, j – 1) into the max heap but make sure that the 
    pair of indices i.e (i – 1, j) and (i, j – 1) are not 
    already present in the max heap. To check this we can use set in C++.
  ->Go back to 4 until K times.

// An efficient Java program to find
// top K elements from two arrays.

import java.io.*;
import java.util.*;

class GFG {
	public static void MaxPairSum(Integer[] A,
								Integer[] B,
								int N, int K)
	{
		// sort both arrays A and B
		Arrays.sort(A);
		Arrays.sort(B);
		
		// Max heap which contains Pair of
		// the format (sum, (i, j)) i and j are
		// the indices of the elements from
		// array A and array B which make up the sum.
		PriorityQueue<PairSum> sums
			= new PriorityQueue<PairSum>();
		
		// pairs is used to store the indices of
		// the Pair(i, j) we use pairs to make sure
		// the indices does not repeat inside max heap.
		HashSet<Pair> pairs = new HashSet<Pair>();
		
		// initialize the heap with the maximum sum
		// combination ie (A[N - 1] + B[N - 1])
		// and also push indices (N - 1, N - 1) along
		// with sum.
		int l = N - 1;
		int m = N - 1;
		pairs.add(new Pair(l, m));
		sums.add(new PairSum(A[l] + B[m], l, m));
		
		// iterate upto K
		for (int i = 0; i < K; i++)
		{
			// Poll the element from the
			// maxheap in theformat (sum, (l,m))
			PairSum max = sums.poll();
			System.out.println(max.sum);
			l = max.l - 1;
			m = max.m;
			// insert only if l and m are greater
			// than 0 and the pair (l, m) is
			// not already present inside set i.e.
			// no repeating pair should be
			// present inside the heap.
			if (l >= 0 && m >= 0
				&& !pairs.contains(new Pair(l, m)))
			{
				// insert (A[l]+B[m], (l, m))
				// in the heap
				sums.add(new PairSum(A[l]
						+ B[m], l, m));
				pairs.add(new Pair(l, m));
			}

			l = max.l;
			m = max.m - 1;

			// insert only if l and m are
			// greater than 0 and
			// the pair (l, m) is not
			// already present inside
			// set i.e. no repeating pair
			// should be present
			// inside the heap.
			if (l >= 0 && m >= 0
				&& !pairs.contains(new Pair(l, m)))
			{
				// insert (A[i1]+B[i2], (i1, i2))
				// in the heap
				sums.add(new PairSum(A[l]
						+ B[m], l, m));
				pairs.add(new Pair(l, m));
			}
		}
	}

	// Driver Code
	public static void main(String[] args)
	{
		Integer A[] = { 1, 4, 2, 3 };
		Integer B[] = { 2, 5, 1, 6 };
		int N = A.length;
		int K = 4;

		// Function Call
		MaxPairSum(A, B, N, K);
	}

	public static class Pair {

		public Pair(int l, int m)
		{
			this.l = l;
			this.m = m;
		}

		int l;
		int m;

		@Override public boolean equals(Object o)
		{
			if (o == null) {
				return false;
			}
			if (!(o instanceof Pair)) {
				return false;
			}
			Pair obj = (Pair)o;
			return (l == obj.l && m == obj.m);
		}

		@Override public int hashCode()
		{
			return Objects.hash(l, m);
		}
	}

	public static class PairSum
		implements Comparable<PairSum> {

		public PairSum(int sum, int l, int m)
		{
			this.sum = sum;
			this.l = l;
			this.m = m;
		}

		int sum;
		int l;
		int m;

		@Override public int compareTo(PairSum o)
		{
			return Integer.compare(o.sum, sum);
		}
	}
}

Time Complexity : O(N log N) assuming K <= N
Auxiliary Space : O(N)
==============================================================================================================================
EDITORIAL
===============================================================

class A1{
    int sum;
    int i;
    int j;
    A1(int s,int i1,int j1){
        sum=s;
        i=i1;
        j=j1;
    }
}


   class solComparator implements Comparator<A1>{
        
            public int compare(A1 p1,A1 p2){
            
            if(p1.sum<p2.sum)
            return 1;
            else if(p1.sum>p2.sum)
            return -1;
            else
             return 0;
            }
        }

public class Solution {
    public int[] solve(int[] A, int[] B, int C) {
        
        int n=A.length;
        
         PriorityQueue<A1> p=new PriorityQueue<A1>(new solComparator()); 
            Arrays.sort(A);
            Arrays.sort(B);
            
            HashSet<String> hs=new HashSet<>();
            
            p.add(new A1(A[n-1]+B[n-1],n-1,n-1));
            hs.add(new String((n-1)+" "+(n-1)));
            
          
           
            int i=n-1,j=n-1;
            int k1=C;
            
            int ans[]=new int[C];
            int y=0;
            
            for(int p1=0;p1<C;p1++){
           ans[y]=p.peek().sum;
           y++;
            
            i=p.peek().i;
            j=p.peek().j;
            p.poll();
            
            if(i>0&&j>0){
                if(!hs.contains(new String((i-1)+" "+j))){
                p.add(new A1(A[i-1]+B[j],i-1,j));
                     hs.add(new String((i-1)+" "+j));

  
                }
                
                if(!hs.contains(new String(i+" "+(j-1)))){
                p.add(new A1(A[i]+B[j-1],i,j-1));
               
                hs.add(new String(i+" "+(j-1)));
                }
                
                
            }
            
            }
            
        return ans;
        
        
        
    }
}

==========
public class Solution {
    public ArrayList<Integer> solve(ArrayList<Integer> A, ArrayList<Integer> B, int C) {
        int size = A.size();
        PriorityQueue<pair>pq= new PriorityQueue<>((a,b)->b.val-a.val);
        HashSet<Integer>hs = new HashSet<>();
        Collections.sort(A,Collections.reverseOrder());
        Collections.sort(B,Collections.reverseOrder());
        
        ArrayList<Integer>ans = new ArrayList<>();
        pq.add(new pair(0,0, A.get(0) + B.get(0) ));
        hs.add(0);
        while(C-- != 0){
            pair pair1 = pq.poll();
            ans.add(pair1.val);
            int a,b;
            a = pair1.poia;
            b = pair1.poib;
            
            if( b+1<size && !hs.contains( a*size+ (b+1) ) ){
                hs.add( a*size+ b +1 );
                pq.add( new pair(a, b+1, A.get(a) + B.get(b+1) ) );
            }
            if( a+1<size && !hs.contains( (a+1) * size + b ) ){
                hs.add( (a+1) * size + b );
                pq.add( new pair(a+1, b, A.get(a+1) + B.get(b) ) );
            }
            
        }
        return ans;
    }
    
}
class pair{
    int poia,poib,val;
    public pair(int a ,int b , int sum){
        poia = a;
        poib = b;
        val = sum;
    }
}

==========================
Fastest
public class Solution {
    public int[] solve(int[] A, int[] B, int C) {
        Arrays.sort(A) ;
        Arrays.sort(B) ;
        
        ArrayList<Integer> a = new ArrayList<>() ;
        
        PriorityQueue<Pair> pq = new PriorityQueue<>() ;
        pq.add(new Pair(A.length-1,B.length-1, A[A.length-1]+B[B.length-1] ) );
        
        HashSet<Integer> hs = new HashSet<>() ;
        hs.add( f(A[A.length-1],B[B.length-1]) ) ;
         
        while(a.size()<C){
            Pair p = pq.remove() ;
            
            if( hs.contains( f(p.i,p.j) ) ) 
                continue ;
            else
                hs.add( f(p.i,p.j) ) ;
            
            a.add(p.wt) ; 
            
            if(p.i>0)
                pq.add(new Pair(p.i-1,p.j,A[p.i-1]+B[p.j]) ) ;
            if(p.j>0)
                pq.add(new Pair(p.i,p.j-1,A[p.i]+B[p.j-1]) ) ;
        }
        
        int[] r = new int[a.size()] ;
        for(int i=0;i<a.size();i++){
            r[i] = a.get(i) ;
        }
        
        return  r ;  
    }
    
    public int f(int a,int b){
        return  a + ((a+b)*(a+b+1))/2 ; 
    }
    
    public class Pair implements Comparable<Pair>{
        int i;
        int j;
        int wt;
        Pair(int i,int j,int wt){
            this.i = i ;
            this.j = j ;
            this.wt = wt ;
        }
        
        public int compareTo(Pair o){
            return o.wt-this.wt ;
        }
    }
}
================
public class Solution {
    public ArrayList<Integer> solve(ArrayList<Integer> A, ArrayList<Integer> B, int C) {
        PriorityQueue<int[]> pq=new PriorityQueue<>((a,b) -> b[0]-a[0]);
        Collections.sort(A);
        Collections.sort(B);
        ArrayList<Integer> ans=new ArrayList<>();
        HashSet<Long> set = new HashSet<>();
        int n=A.size();
        pq.offer(new int[]{A.get(n-1)+B.get(n-1), n-1, n-1});
        set.add((long)((n-1)*n+(n-1)));
        while(ans.size()<C)
        {
            int sum=pq.peek()[0];
            int i=pq.peek()[1];
            int j=pq.peek()[2];
            pq.poll();
            ans.add(sum);
            if(ans.size()==C)
                break;
            if(i>0 && set.contains((long)((i-1)*n+j))==false)
            {
                pq.offer(new int[]{A.get(i-1)+B.get(j), i-1, j});
                set.add((long)((i-1)*n+j));
            }
            if(j>0 && set.contains((long)((i*n+(j-1))))==false)
            {
                pq.offer(new int[]{A.get(i)+B.get(j-1), i, j-1});
                set.add((long)((i*n+(j-1))));
            }
        }
        return ans;
    }
}

=====================================
Lightweight
public class Solution {
    public int[] solve(int[] a, int[] b, int k) {
        int ans[]=new int[k];
        int m=a.length;
        int n=b.length;
        Arrays.sort(a);
        Arrays.sort(b);
        PriorityQueue<Integer> pq=new PriorityQueue<>();
        for(int j=n-1;j>=0;j--)
        {
            if(pq.size()<k) pq.add(a[m-1]+b[j]);
        }
        for(int i=m-2;i>=0;i--)
        {
            for(int j=n-1;j>=0;j--)
            {
                
                    int val=a[i]+b[j];
                    if( val<pq.peek())
                    {
                        break;
                    }
                    else{
                        if(pq.size()<k)
                        {
                            pq.add(val);
                        }
                        else{
                            pq.poll();
                            pq.add(val);
                        }
                    }                    
                
            }
        }
  int ff=0;
        while(pq.size()>0)
        {
            ans[ff++]=pq.poll();
        }
        Arrays.sort(ans);
        int ans1[]=new int[k];
        for(int i=ans.length-1;i>=0;i--)
        {
            ans1[ans.length-i-1]=ans[i];
        }
        return ans1;
      
    }
}
=======================================
public class Solution {
    public ArrayList<Integer> solve(ArrayList<Integer> A, ArrayList<Integer> B, int C) {
        Collections.sort(A, Collections.reverseOrder());
        Collections.sort(B, Collections.reverseOrder());
        PriorityQueue<Integer> pq = new PriorityQueue();
        ArrayList<Integer> arr = new ArrayList<Integer>();
        for(int i=0; i<A.size();i++)
        {
            for(int j=0;j< B.size(); j++)
            {
               int sum= A.get(i)+B.get(j);
               if(pq.size()<C)
               {
                   pq.add(sum);
               }
               else 
               {
                   if(sum>pq.peek())
                   {
                       pq.poll();
                       pq.add(sum);
                   }
                   else if(sum<pq.peek())
                   {
                      break; 
                   }
               }
            }
        }
       
       while(!pq.isEmpty())
       {
           arr.add(pq.peek());
           pq.poll();
       }
       Collections.sort(arr, Collections.reverseOrder());
       
       return arr;
    }
}


===========================================


