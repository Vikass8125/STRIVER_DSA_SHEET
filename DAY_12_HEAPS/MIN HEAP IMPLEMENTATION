Problem Statement
Sample Input 1 :
2
3
0 2
0 1
1
2
0 1
1
Sample Output 1 :
1
1
Explanation Of Sample Input 1 :
For the first test case:-
Insert 2 in the heap and currently, 2 is the smallest element in the heap.
Insert 1 in the heap and now the smallest element is 1.
Return and remove the smallest element which is 1.

For the second test case:-
Insert 1 in the heap and currently, 1 is the smallest element in the heap.
Return the smallest element from the heap which is 1 and remove it.
Sample Input 2 :
2
5
0 5
1
0 43
0 15
0 5
2
0 4
1
Sample Output 2 :
5
4


MY-SOLUTION

Binary Tree Approach
The heap property is satisfied by the heap data structure. And follows the properties of a complete binary tree. 
Heap property is as follows, which we have used all over the approach:-

Each parent element is smaller than its child elements.

The complete binary tree, as we all know, is a tree with every level filled and all nodes as far left as feasible. 
It's possible that the last level of the binary tree is empty and unfilled. 

 You're probably wondering what the heap property is.

Every node of the tree is given a key value or weight in the heap data structure.

Now, the key value of the root node is compared with the values of children's nodes, and then the tree is arranged 
into two categories, respectively i.e., max Heap or min-heap. This data structure is used as a sorting algorithm to 
sort the elements in a list and an array. This sorting algorithm can be used in data structures like order statistics, 
priority queues, Dijkstra's algorithm, or Prim's algo. Heapify refers to creating a heap data structure using a binary tree. 
To create the Min-Heap, the heapify process is used. For complete binary tree the left child in an array is 2*i+1 and the right 
child is 2*i+2 if the current node index is ‘i’ in the array. For the index ‘i’ the parent of it is (i-1)/2.

Now to create min-heap following steps are used:-

left ( k )

Return 2*k+1.
right ( k )

Return 2*k+2.
parent ( k )

Return ( k-1 ) / 2.
Heapify ( heap, k)

Find the left child of the node.
Find the right child of the node.
Find the smallest element between the current node and its children.
Check if the left child is the smallest.
Check if the right node is smallest than the previous smallest.
If the smallest element is not in the current node.
We have to heapify the Heap to take that element to the top.
Swap the values of the current node and the smallest node value.
Call the heapify function on the smallest value node which now contains the value of the parent node.
insert( heap, val )

Insert a val in the heap.
The function contains heap array, val to inserted.
Insert the val at the end of the heap.
If there is more than 1 node in the Heap.
MinHeapify the heap by checking the val at its parent node.
Also, do it until the heap property is not satisfied.
while( i != 0 and heap[parent(i)] > heap[i]):
Swap the value of the current node with its parent.
Check the same if the parent element of the current element is satisfying the heap property.
i = parent(i)
extractMin( heap )

Check if the current node is the only node in the heap.
Return heap[0].
Take out the min value and remove it from the heap.
Put the last node on the top of the heap. So that we can heapify from the root node till the last children.
Decrease the size of heap as the minimum element is removed.
Heapify the heap to satisfy the heap property.
minHeap ( N, Q )

Define minHeap function which takes the size of Queries and Queries as Input.
Returns an array of outputs depending on the queries.
Define a heap array to store elements.
Define an array that stores the min elements.
For each query in the array Q.
If the query is of type 1 then insert the value in the heap.
Else take min element from the heap and append it in the ans.
Return the ans array.
Time Complexity
O( N * log( N )), Where ‘N’ is the number of queries.


 We are iterating over each query which is ‘N’ and for each insert or remove we do heapify operation where we each time go to child 
 or parent which is at its double or half of the current position respectively and at max, we will go to the height of the tree which is log ( N ).

Hence the time complexity will be O( N * log( N )).

Space Complexity
O( N ), Where ‘N’ is the number of queries.
 

We are creating a heap array of size ‘N’.

Hence the space complexity will be O( N ).

==============================================================================================

import java.util.*;
class Heap{
    int arr[];
    int size;
    //Initialize the heap with 1 based indexed array
    Heap(int n){
        arr = new int[n];
        arr[0] = -1;
        size = 0;
    }
    
    void swap(int i,int j){
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
    
    void add(int element){
        size++;
        int i = size;
        arr[i] = element;
       
        while(i>1){
            int  parent = i/2;
            if(arr[parent]>arr[i]){
                swap(parent,i);
                i = parent;
            }else{
                return;
            }
        }
    }
    
    int poll(){
        if(size==0) return -1;
        int res = arr[1];
        arr[1] = arr[size];
        size--;
        int i = 1;
        while(i<size){
            int left = 2*i;
            int  right = 2*i+1;
            
            int smaller = i;
            
            if(left<=size && arr[smaller]>arr[left]){
                smaller = left;
            }
            if(right<=size && arr[smaller]>arr[right]){
                smaller = right;
            }
            
            if(i==smaller) break;
            swap(i,smaller);
            i=smaller;
        }
        return res;
    }
}
public class Solution {
    static int[] minHeap(int n, int[][] q) {
        Heap pq = new Heap(n+1);
        ArrayList<Integer> res = new ArrayList<>();
        for(int[] query : q){
            if(query[0]==0){
                pq.add(query[1]);
            }else{
                res.add(pq.poll());
            }
        }
        int ans[] = new int[res.size()];
        for(int i=0;i<res.size();i++) ans[i] = res.get(i);
        return ans;
    }
}
===================================================================================================
1. Max Heap implementation in Java
Following is Java implementation of max-heap data structure. We have tried to keep the implementation similar to the java.util.PriorityQueue class.

import java.util.Arrays;
import java.util.Vector;
 
// A class for implementing the priority queue
class PriorityQueue
{
    // vector to store heap elements
    private Vector<Integer> A;
 
    // constructor: use the default initial capacity of a vector
    public PriorityQueue() {
        A = new Vector();
    }
 
    // constructor: set a custom initial capacity for vector
    public PriorityQueue(int capacity) {
        A = new Vector(capacity);
    }
 
    // return parent of `A[i]`
    private int parent(int i)
    {
        // if `i` is already a root node
        if (i == 0) {
            return 0;
        }
 
        return (i - 1) / 2;
    }
 
    // return left child of `A[i]`
    private int LEFT(int i) {
        return (2*i + 1);
    }
 
    // return right child of `A[i]`
    private int RIGHT(int i) {
        return (2*i + 2);
    }
 
    // swap values at two indexes
    void swap(int x, int y)
    {
        // swap with a child having greater value
        Integer temp = A.get(x);
        A.setElementAt(A.get(y), x);
        A.setElementAt(temp, y);
    }
 
    // Recursive heapify-down procedure. Here, the node at index `i`
    // and its two direct children violate the heap property
    private void heapify_down(int i)
    {
        // get left and right child of node at index `i`
        int left = LEFT(i);
        int right = RIGHT(i);
 
        int largest = i;
 
        // compare `A[i]` with its left and right child
        // and find the largest value
        if (left < size() && A.get(left) > A.get(i)) {
            largest = left;
        }
 
        if (right < size() && A.get(right) > A.get(largest)) {
            largest = right;
        }
 
        if (largest != i)
        {
            // swap with a child having greater value
            swap(i, largest);
 
            // call heapify-down on the child
            heapify_down(largest);
        }
    }
 
    // Recursive heapify-up procedure
    private void heapify_up(int i)
    {
        // check if the node at index `i` and its parent violates
        // the heap property
        if (i > 0 && A.get(parent(i)) < A.get(i))
        {
            // swap the two if heap property is violated
            swap(i, parent(i));
 
            // call heapify-up on the parent
            heapify_up(parent(i));
        }
    }
 
    // return size of the heap
    public int size() {
        return A.size();
    }
 
    // check if the heap is empty or not
    public Boolean isEmpty() {
        return A.isEmpty();
    }
 
    // insert a specified key into the heap
    public void add(Integer key)
    {
        // insert a new element at the end of the vector
        A.addElement(key);
 
        // get element index and call heapify-up procedure
        int index = size() - 1;
        heapify_up(index);
    }
 
    // Function to remove and return an element with the highest priority
    // (present at the root). It returns null if the queue is empty
    public Integer poll()
    {
        try {
            // if the heap is empty, throw an exception
            if (size() == 0) {
                throw new Exception("Index is out of range (Heap underflow)");
            }
 
            // element with the highest priority
            int root = A.firstElement();    // or A.get(0);
 
            // replace the root of the heap with the last element of the vector
            A.setElementAt(A.lastElement(), 0);
            A.remove(size() - 1);
 
            // call heapify-down on the root node
            heapify_down(0);
 
            // return root element
            return root;
        }
        // catch and print the exception
        catch (Exception ex)
        {
            System.out.println(ex);
            return null;
        }
    }
 
    // Function to return an element with the highest priority
    // (present at the root). It returns null if the queue is empty
    public Integer peek()
    {
        try {
            // if the heap has no elements, throw an exception
            if (size() == 0) {
                throw new Exception("Index out of range (Heap underflow)");
            }
 
            // otherwise, return the top (first) element
            return A.firstElement();    // or A.get(0);
        }
        // catch the exception and print it, and return null
        catch (Exception ex)
        {
            System.out.println(ex);
            return null;
        }
    }
 
    // Function to remove all elements from the priority queue
    public void clear()
    {
        System.out.print("Emptying queue: ");
        while (!A.isEmpty()) {
            System.out.print(poll() + " ");
        }
        System.out.println();
    }
 
    // Returns true if the queue contains the specified element
    public Boolean contains(Integer i) {
        return A.contains(i);
    }
 
    // Returns an array containing all elements in the queue
    public Integer[] toArray() {
        return A.toArray(new Integer[size()]);
    }
}
 
class Main
{
    public static void main (String[] args)
    {
        // create a priority queue with an initial capacity of 10.
        // The value of an element decides the priority of it.
        PriorityQueue pq = new PriorityQueue(10);
 
        // insert three integers
        pq.add(3);
        pq.add(2);
        pq.add(15);
 
        // print priority queue size
        System.out.println("Priority queue size is " + pq.size());
 
        // search 2 in priority queue
        Integer searchKey = 2;
 
        if (pq.contains(searchKey)) {
            System.out.println("Priority queue contains " + searchKey + "\n");
        }
 
        // empty queue
        pq.clear();
 
        if (pq.isEmpty()) {
            System.out.println("The queue is empty");
        }
 
        System.out.println("\nCalling remove operation on an empty heap");
        System.out.println("The element with the highest priority is " + pq.poll());
 
        System.out.println("\nCalling peek operation on an empty heap");
        System.out.println("The element with the highest priority is " + pq.peek() +
                    System.lineSeparator());
 
        // again insert three integers
        pq.add(5);
        pq.add(4);
        pq.add(45);
 
        // construct an array containing all elements present in the queue
        Integer[] I = pq.toArray();
        System.out.println("Printing array: " + Arrays.toString(I));
 
        System.out.println("\nThe element with the highest priority is " + pq.poll());
        System.out.println("The element with the highest priority is " + pq.peek());
    }
}


Output:
 
Priority queue size is 3
Priority queue contains 2
 
Emptying queue: 15 3 2
The queue is empty
 
Calling remove operation on an empty heap
java.lang.Exception: Index out of range(Heap underflow)
The element with the highest priority is null
 
Calling peek operation on an empty heap
java.lang.Exception: Index out of range (Heap underflow)
The element with the highest priority is null
 
Printing array: [45, 4, 5]
 
The element with the highest priority is 45
The element with the highest priority is 5

=======================================================================================================================================

2. Min Heap implementation in Java
The min-heap implementation is very similar to the max-heap implementation discussed above. 
The highlighted portion in the following code marks its differences with max-heap implementation:

import java.util.Arrays;
import java.util.Vector;
 
// A class for implementing the Priority queue
class PriorityQueue
{
    // vector to store heap elements
    private Vector<Integer> A;
 
    // constructor: use the default initial capacity of a vector
    public PriorityQueue() {
        A = new Vector();
    }
 
    // constructor: set a custom initial capacity for vector
    public PriorityQueue(int capacity) {
        A = new Vector(capacity);
    }
 
    // return parent of `A[i]`
    private int parent(int i)
    {
        // if `i` is already a root node
        if (i == 0) {
            return 0;
        }
 
        return (i - 1) / 2;
    }
 
    // return left child of `A[i]`
    private int LEFT(int i) {
        return (2*i + 1);
    }
 
    // return right child of `A[i]`
    private int RIGHT(int i) {
        return (2*i + 2);
    }
 
    // swap values at two indexes
    void swap(int x, int y)
    {
        // swap with a child having greater value
        Integer temp = A.get(x);
        A.setElementAt(A.get(y), x);
        A.setElementAt(temp, y);
    }
 
    // Recursive heapify-down procedure. Here, the node at index `i`
    // and its two direct children violate the heap property
    private void heapify_down(int i)
    {
        // get left and right child of node at index `i`
        int left = LEFT(i);
        int right = RIGHT(i);
 
        int smallest = i;
 
        // compare `A[i]` with its left and right child
        // and find the smallest value
        if (left < size() && A.get(left) < A.get(i)) {
            smallest = left;
        }
 
        if (right < size() && A.get(right) < A.get(smallest)) {
            smallest = right;
        }
 
        if (smallest != i)
        {
            // swap with a child having lesser value
            swap(i, smallest);
 
            // call heapify-down on the child
            heapify_down(smallest);
        }
    }
 
    // Recursive heapify-up procedure
    private void heapify_up(int i)
    {
        // check if the node at index `i` and its parent violates
        // the heap property
        if (i > 0 && A.get(parent(i)) > A.get(i))
        {
            // swap the two if heap property is violated
            swap(i, parent(i));
 
            // call heapify-up on the parent
            heapify_up(parent(i));
        }
    }
 
    // return size of the heap
    public int size() {
        return A.size();
    }
 
    // check if the heap is empty or not
    public Boolean isEmpty() {
        return A.isEmpty();
    }
 
    // insert a specified key into the heap
    public void add(Integer key)
    {
        // insert a new element at the end of the vector
        A.addElement(key);
 
        // get its index and call the heapify-up procedure
        int index = size() - 1;
        heapify_up(index);
    }
 
    // Function to remove and return an element with the highest priority
    // (present at the root). It returns null if the queue is empty
    public Integer poll()
    {
        try {
            // if the heap is empty, throw an exception
            if (size() == 0) {
                throw new Exception("Index is out of range (Heap underflow)");
            }
 
            // element with the highest priority
            int root = A.firstElement();    // or A.get(0);
 
            // replace the root of the heap with the last element of the vector
            A.setElementAt(A.lastElement(), 0);
            A.remove(size() - 1);
 
            // call heapify-down on the root node
            heapify_down(0);
 
            // return root element
            return root;
        }
        // catch and print the exception
        catch (Exception ex)
        {
            System.out.println(ex);
            return null;
        }
    }
 
    // Function to return an element with the highest priority
    // (present at the root). It returns null if the queue is empty
    public Integer peek()
    {
        try {
            // if the heap has no elements, throw an exception
            if (size() == 0) {
                throw new Exception("Index out of range (Heap underflow)");
            }
 
            // otherwise, return the top (first) element
            return A.firstElement();    // or A.get(0);
        }
        // catch the exception and print it, and return null
        catch (Exception ex)
        {
            System.out.println(ex);
            return null;
        }
    }
 
    // Function to remove all elements from the priority queue
    public void clear()
    {
        System.out.print("Emptying queue: ");
        while (!A.isEmpty()) {
            System.out.print(poll() + " ");
        }
        System.out.println();
    }
 
    // Returns true if the queue contains the specified element
    public Boolean contains(Integer i) {
        return A.contains(i);
    }
 
    // Returns an array containing all elements in the queue
    public Integer[] toArray() {
        return A.toArray(new Integer[size()]);
    }
}
 
class Main
{
    public static void main (String[] args)
    {
        // create a priority queue with an initial capacity of 10.
        // The value of an element decides the priority of it.
        PriorityQueue pq = new PriorityQueue(10);
 
        // insert three integers
        pq.add(3);
        pq.add(2);
        pq.add(15);
 
        // print priority queue size
        System.out.println("Priority queue size is " + pq.size());
 
        // search 2 in priority queue
        Integer searchKey = 2;
 
        if (pq.contains(searchKey)) {
            System.out.println("Priority queue contains " + searchKey + "\n");
        }
 
        // empty queue
        pq.clear();
 
        if (pq.isEmpty()) {
            System.out.println("The queue is empty");
        }
 
        System.out.println("\nCalling remove operation on an empty heap");
        System.out.println("The element with the highest priority is " + pq.poll());
 
        System.out.println("\nCalling peek operation on an empty heap");
        System.out.println("The element with the highest priority is " + pq.peek() +
                    System.lineSeparator());
 
        // again insert three integers
        pq.add(5);
        pq.add(4);
        pq.add(45);
 
        // construct an array containing all elements present in the queue
        Integer[] I = pq.toArray();
        System.out.println("Printing array: " + Arrays.toString(I));
 
        System.out.println("\nThe element with the highest priority is " + pq.poll());
        System.out.println("The element with the highest priority is " + pq.peek());
    }
}


Output:
 
Priority queue size is 3
Priority queue contains 2
 
Emptying queue: 2 3 15
The queue is empty
 
Calling remove operation on an empty heap
java.lang.Exception: Index out of range(Heap underflow)
The element with the highest priority is null
 
Calling peek operation on an empty heap
java.lang.Exception: Index out of range (Heap underflow)
The element with the highest priority is null
 
Printing array: [4, 5, 45]
 
The element with the highest priority is 4
The element with the highest priority is 5

Following is the time complexity of implemented heap operations:

add() and poll() takes O(log(n)) time.
toArray() and contains() takes O(n) time.
peek() and size() and isEmpty() takes O(1) time.
