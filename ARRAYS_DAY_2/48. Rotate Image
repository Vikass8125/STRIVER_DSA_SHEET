You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.

 

Example 1:


Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]
Example 2:


Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]
 

Constraints:

n == matrix.length == matrix[i].length
1 <= n <= 20
-1000 <= matrix[i][j] <= 1000


MY_SOLUTION
Intuition: By observation, we see that the first column of the original matrix is the reverse of the first row of the rotated matrix, so thatâ€™s why we transpose the matrix and then reverse each row, and since we are making changes in the matrix itself space complexity gets reduced to O(1).

Approach:

Step1: Transpose of the matrix. (transposing means changing columns to rows and rows to columns)

Step2: Reverse each row of the matrix.


The idea was firstly transpose the matrix and then flip it symmetrically. For instance,

1  2  3             
4  5  6
7  8  9
after transpose, it will be swap(matrix[i][j], matrix[j][i])

1  4  7
2  5  8
3  6  9
Then flip the matrix horizontally. (swap(matrix[i][j], matrix[i][matrix.length-1-j])

7  4  1
8  5  2
9  6  3


ANOTHER_SOLUTION
Idea:
The trick here is to realize that cells in our matrix (M) can be swapped out in groups of four in a self-contained manner. This will allow us to keep our space complexity down to O(1).

The remaining difficulty lies in setting up our nested for loops to accomplish the entirety of these four-way swaps. If we consider each ring of data as a larger iteration, we can notice that each successive ring shortens in the length of its side by 2. This means that we will need to perform this process to a maximum depth of floor(n / 2) times. We can use floor here because the center cell of an odd-sided matrix will not need to be swapped.

For each ring, we'll need to perform a number of iterations equal to the length of the side minus 1, since we will have already swapped the far corner as our first iteration. As noticed earlier, the length of the side of a ring is shortened by 2 for each layer of depth we've achieved (len = n - 2 * i - 1).

Inside the nested for loops, we need to perform a four-way swap between the linked cells. In order to save on some processing, we can store the value of the opposite side of i (opp = n - 1 - i) as that value will be reused many times over.

Visual 1

Once the nested loops are finished, M has been successfully transformed in-place.

Time Complexity: O(N^2) where N is the length of each side of the matrix
Space Complexity: O(1)



====================================================================================================================================================================
class Solution {
    public void rotate(int[][] matrix) {
       /* int len = matrix.length;
        
        // Transposing the Matrix
        for(int i = 0; i < len; i++){
            for(int j = i; j < len; j++){
                // Swap matrix[i][j] with matrix[j][i]
                //-> swap along the diagonal
                int temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }
        // Reverse Each Row
        for(int i = 0; i < len; i++){
            for(int j = 0; j < len/2; j++){
                // Swap matrix[i][j] with matrix[i][len-j-1]
                //-> swap along the diagonal
                int temp = matrix[i][j];
                matrix[i][j] =matrix[i][len-j-1];
               matrix[i][len-j-1] = temp;
            }
        }*/
        
        int len = matrix.length;
        int layers = len/2;
        
        for(int layer = 0; layer < layers; layer++){
            int start = layer;
            int end = len - 1 - layer;
            
            for(int i = start; i < end; i++){
                // top in temp
                int temp = matrix[start][i];
                // left in top
                matrix[start][i] = matrix[len-1-i][start];
                // bottom in left
                matrix[len-1-i][start] = matrix[end][len-1-i];
                //rght in bottom
                matrix[end][len-1-i] = matrix[i][end];
                //top in right
                matrix[i][end] = temp;
            }
        }
        
        
    }
}



class Solution {
    public void rotate(int[][] M) {
        int n = M.length, depth = n / 2;
        for (int i = 0; i < depth; i++) {
            int len = n - 2 * i - 1, opp = n - 1 - i;
            for (int j = 0; j < len; j++) {
                int temp = M[i][i+j];
                M[i][i+j] = M[opp-j][i];
                M[opp-j][i] = M[opp][opp-j];
                M[opp][opp-j] = M[i+j][opp];
                M[i+j][opp] = temp;
            }
        }
    }
}
