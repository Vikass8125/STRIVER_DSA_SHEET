Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II.
The number 27 is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. 
Instead, the number four is written as IV. Because the one is before the five we subtract it making four. 
The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

I can be placed before V (5) and X (10) to make 4 and 9. 
X can be placed before L (50) and C (100) to make 40 and 90. 
C can be placed before D (500) and M (1000) to make 400 and 900.
Given a roman numeral, convert it to an integer.

 

Example 1:

Input: s = "III"
Output: 3
Explanation: III = 3.
Example 2:

Input: s = "LVIII"
Output: 58
Explanation: L = 50, V= 5, III = 3.
Example 3:

Input: s = "MCMXCIV"
Output: 1994
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.
 

Constraints:

1 <= s.length <= 15
s contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').
It is guaranteed that s is a valid roman numeral in the range [1, 3999].



HINTS:
Problem is simpler to solve by working the string from back to front and using a map.


MY_SOLUTION

First we use a hashmap to map the conversions of roman digits to integer.
Now, if a numeral with smaller value precedes one with a larger value, we subtract the value from the total, otherwise we add the value to the total.
At the end, we still have to add the last character value.


class Solution {
    public int romanToInt(String s) {
        Map<Character, Integer> map = new HashMap<>();
        map.put('I', 1);
        map.put('V', 5);
        map.put('X', 10);
        map.put('L', 50);
        map.put('C', 100);
        map.put('D', 500);
        map.put('M', 1000);
        
        int len = s.length();
        
        int result = map.get(s.charAt(len - 1));
        for(int i = len - 2; i >= 0; i--){
            if(map.get(s.charAt(i)) < map.get(s.charAt(i + 1))){
                result -= map.get(s.charAt(i));
            }
            else{
                 result += map.get(s.charAt(i));
            }
        }
        return result;
        
    }
}



================================================================================
Recursive Approach
The key idea is to follow the rules of roman numbers which are as follows:

 

The roman digits I, X and C are repeated up to three times in succession to form the numbers.
When a digit of lower value is written to the right or after a digit of higher value, the values of all the digits are added.
When a digit of lower value is written to the left or before a digit of higher value, then the value of the lower digit is subtracted from the value of the digit of higher value.
If we have to write the numbers beyond 10 we should write the number 10 or groups of number 10 and then number 1 or 5 as the case may be. Then these numbers are used to change to the corresponding Roman numerals.
 

Keeping the above example in mind, we can write the following recursive solution:

 

We take a recursive approach to solve the problem.
We make a hash map ‘conv’ which stores integer values of special roman numbers.
Then, we take the first 2 characters and check if they are in the map, if yes we add their value and recursively call the rest of the string.
If the first 2 characters are not there in the map, we add the value of 1 character and recursively call the rest of the string.
The base case will be once we have a string of size 1 or an empty string. In that case, we return 0.
Time Complexity
O(N), Where ‘N’ denotes the length of the string.

 

Since we traverse the string once to find the integer value.

Space Complexity
O(N), Where ‘N’ denotes the length of the string.

 

It is because the recursive stack uses space of order of ‘N’.


/*
    Time Complexity     :   O(N)
    Space Complexity    :   O(N)

    Where 'N' is the length of the string.
*/

import java.util.HashMap;

public class Solution {
    public static int romanToIntHelper(String s, HashMap<String, Integer> conv) {

        // If single character, return the integer value of that character.
        if (s.length() <= 1) {
            return conv.get(s);
        }

        // Take first 2 characters.
        String first_two = s.substring(0, 2);

        // If the first 2 characters are in the map, add their value and check rest of the string.
        if (conv.containsKey(first_two)) {
            return conv.get(first_two) + romanToIntHelper(s.substring(2), conv);
        }

        // Otherwise take one character and check its value.
        else {
            return conv.get(s.substring(0, 1)) + romanToIntHelper(s.substring(1), conv);
        }
    }

    public static int romanToInt(String s) {
        HashMap<String, Integer> conv = new HashMap<>();
        conv.put("M", 1000);
        conv.put("D", 500);
        conv.put("C", 100);
        conv.put("L", 50);
        conv.put("X", 10);
        conv.put("V", 5);
        conv.put("I", 1);
        conv.put("IV", 4);
        conv.put("IX", 9);
        conv.put("XL", 40);
        conv.put("XC", 90);
        conv.put("CD", 400);
        conv.put("CM", 900);
        conv.put("", 0);
        
        return romanToIntHelper(s, conv);
    }
}

=======================================================================================================


Iterative Approach
The key idea is to follow the rules of roman numbers which are as follows:

 

The roman digits I, X and C are repeated up to three times in succession to form the numbers.
When a digit of lower value is written to the right or after a digit of higher value, the values of all the digits are added.
When a digit of lower value is written to the left or before a digit of higher value, then the value of the lower digit is subtracted from the value of the digit of higher value.
If we have to write the numbers beyond 10 we should write the number 10 or groups of number 10 and then number 1 or 5 as the case may be. Then these numbers are used to change to the corresponding Roman numerals.
 

Keeping the above example in mind, we can proceed in the following manner:

 

We take a simple iterative approach to solve the problem.
First, we define a function ‘romanToInt’ which takes a character and returns its integer representation.
We make a variable ‘count’ to store the answer.
Then, we simply traverse through the string, and if the current character value is more than the next character value we follow rule 2 and add the values.
If the current character is less than the value of the next character, we subtract the value of the current character from the value of the next character.
Finally, we return the variable ‘count’.
Time Complexity
O(N), Where ‘N’ denotes the length of the string.

 

We traverse the string once to find the integer value.

Space Complexity
O(1).

 

Since we are using constant space.

/*
    Time Complexity     :   O(N)
    Space Complexity    :   O(N)

    Where 'N' is the length of the string.
*/

import java.util.HashMap;

public class Solution {
    public static int romanToInt(String s) {
        int count = 0;

        // To store previous char value.
        int preInt = 0;

        // Hash map for finding interger value for roman numerals.
        HashMap<Character, Integer> conv = new HashMap<>();
        conv.put('I', 1);
        conv.put('V', 5);
        conv.put('X', 10);
        conv.put('L', 50);
        conv.put('C', 100);
        conv.put('D', 500);
        conv.put('M', 1000);

        // Loop from end to start of the string.
        for (int i = s.length() - 1; i >= 0; i--) {
            char ch = s.charAt(i);

            // Store current char integer value.
            int curInt = conv.get(ch);

            /*
                If current value is greater or equal to previous value then increment count i.e., II means 1+1
                else in case of IV, V = 5 and I = 1 here 1 < 5 then else part will execute and update count as 5 - 1 = 4.
            */
            if (curInt >= preInt) {
                count += curInt;
            } else {
                count -= curInt;
            }

            // Update 'preInt' value with current value for next iteration.
            preInt = curInt;
        }
        return count;
    }
}

============================================================================================


Idea:

The only really tricky thing about counting in roman numerals is when a numeral is used as a subtractive value rather than an additive value. In "IV" for example, the value of "I", 1, is subtracted from the value of "V", 5. Otherwise, you're simply just adding the values of all the numerals.

The one thing we should realize about the subtractive numerals is that they're identifiable because they appear before a larger number. This means that the easier way to iterate through roman numerals is from right to left, to aid in the identifying process.

So then the easy thing to do here would be to iterate backwards through S, look up the value for each letter, and then add it to our answer (ans). If we come across a letter value that's smaller than the largest one seen so far, it should be subtracted rather than added.

The standard approach would be to use a separate variable to keep track of the highest value seen, but there's an easier trick here. Since numbers generally increase in a roman numeral notation from right to left, any subtractive number must also be smaller than our current ans.

So we can avoid the need for an extra variable here. We do run into the case of repeated numerals causing an issue (ie, "III"), but we can clear that by multiplying num by any number between 2 and 4 before comparing it to ans, since the numerals jump in value by increments of at least 5x.

Once we know how to properly identify a subtractive numeral, it's a simple matter to just iterate backwards through S to find and return the ans.

Implementation:

Javascript and Python both operate with objects / disctionaries quite quickly, so we'll use a lookup table for roman numeral values.

Java and C++ don't deal with objects as well, so we'll use a switch case to function much the same way.


class Solution {
    public int romanToInt(String S) {
        int ans = 0, num = 0;
        for (int i = S.length()-1; i >= 0; i--) {
            switch(S.charAt(i)) {
                case 'I': num = 1; break;
                case 'V': num = 5; break;
                case 'X': num = 10; break;
                case 'L': num = 50; break;
                case 'C': num = 100; break;
                case 'D': num = 500; break;
                case 'M': num = 1000; break;
            }
            if (4 * num < ans) ans -= num;
            else ans += num;
        }
        return ans;
    }
}


======================================================


Some notes about this solution, most about the first iteration of the while-loop:

The initial value of prev is set to 'A', so the initial value of a[prev - 'A'] is a[0] which equals 0
the first call to if(a[s - 'A'] > a[prev - 'A']) will result true
sum = sum - 2 * a[prev - 'A']; will be executed, but there will be no effect to the value of sum, as a[0] equals 0
The following is my solution, pay attention to the different deal with initial values.

public int romanToInt(String s) {
        int[] romans = new int[26];
        romans['I' - 'A'] = 1;
        romans['V' - 'A'] = 5;
        romans['X' - 'A'] = 10;
        romans['L' - 'A'] = 50;
        romans['C' - 'A'] = 100;
        romans['D' - 'A'] = 500;
        romans['M' - 'A'] = 1000;
        
        int result = 0;
        char[] arr = s.toCharArray();
        int lastIndexValue = 1000;
        for (int i = 0; i < arr.length; i++) {
            int currentIndexValue = romans[arr[i] - 'A'];
            if (currentIndexValue <= lastIndexValue) {
                result += currentIndexValue;
            } else {
                result = result - 2 * lastIndexValue + currentIndexValue;
            }
            lastIndexValue = currentIndexValue;
        }
        
        return result;
    }
    
    
    ===
    public int romanToInt(String str) {
    int[] a = new int[26];
    a['I' - 'A'] = 1;
    a['V' - 'A'] = 5;
    a['X' - 'A'] = 10;
    a['L' - 'A'] = 50;
    a['C' - 'A'] = 100;
    a['D' - 'A'] = 500;
    a['M' - 'A'] = 1000;
    char prev = 'A';
    int sum = 0;
    for(char s : str.toCharArray()) {
        if(a[s - 'A'] > a[prev - 'A']) {
            sum = sum - 2 * a[prev - 'A'];
        }
        sum = sum + a[s - 'A'];
        prev = s;
    }
    return sum;
}
    
    ======================================================================
    
    
    
